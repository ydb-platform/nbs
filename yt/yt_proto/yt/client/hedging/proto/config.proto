package NYT.NClient.NHedging.NRpc;

import public "yt_proto/yt/client/cache/proto/config.proto";
import "yt_proto/yt/core/yson/proto/protobuf_interop.proto";

option (NYT.NYson.NProto.derive_underscore_case_names) = true;


message THedgingClientConfig
{
    // All timeouts also in milliseconds.
    message TClientOptions {
        optional NYT.NClient.NCache.TConfig ClientConfig = 1;
        optional uint32 InitialPenalty = 2;
    };

    repeated TClientOptions Clients = 1;
    optional uint32 BanPenalty = 2 [default = 1];  // The penalty increment during ban.
    optional uint32 BanDuration = 3 [default = 50]; // How long need to ban cllent after error.
    map<string, string> Tags = 4 [
        (NYT.NYson.NProto.yson_map) = true
    ];  // Tags for profiling.
}

message TReplicationLagPenaltyProviderConfig
{
    repeated string ReplicaClusters = 1; // Clusters that need checks for replication lag.
    optional string TablePath = 2; // Table that needs checks for replication lag.
    optional uint32 LagPenalty = 3 [default = 10]; // penalty in milliseconds, same as BanPenalty in THedgingClientConfig.
    optional uint32 MaxTabletLag = 4 [default = 300]; // Tablet is considered "lagged" if CurrentTimestamp - TabletLastReplicationTimestamp >= MaxTabletLag (in seconds).
    optional float MaxTabletsWithLagFraction = 5 [default = 0.05]; // Real value from 0.0 to 1.0. Replica cluster receives LagPenalty if NumberOfTabletsWithLag >= MaxTabletsWithLagFraction * TotalNumberOfTablets.
    optional uint32 CheckPeriod = 6 [default = 60]; // Replication lag check period (in seconds).
    optional bool ClearPenaltiesOnErrors = 7 [default = false]; // In case of any errors from master client - clear all penalties.
}
