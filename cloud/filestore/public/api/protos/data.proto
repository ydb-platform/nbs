syntax = "proto3";

import "cloud/filestore/public/api/protos/headers.proto";
import "cloud/filestore/public/api/protos/node.proto";
import "cloud/storage/core/protos/error.proto";

package NCloud.NFileStore.NProto;

option go_package = "github.com/ydb-platform/nbs/cloud/filestore/public/api/protos";

////////////////////////////////////////////////////////////////////////////////
// CreateHandle request/response

message TCreateHandleRequest
{
    enum EFlags
    {
        E_NONE = 0;
        E_READ = 1;
        E_WRITE = 2;
        E_CREATE = 3;
        E_EXCLUSIVE = 4;
        E_APPEND = 5;
        E_TRUNCATE = 6;
        E_DIRECTORY = 7;
        E_NOATIME = 8;
        E_NOFOLLOW = 9;
        E_NONBLOCK = 10;
        E_PATH = 11;

        // TODO: these flags have no meaning or only useful for the local svc
        // E_ASYNC
        // E_CLOEXEC
        // E_DIRECT
        // E_DSYNC
        // E_LARGEFILE
        // E_NOCTTY
        // E_SYNC
    };

    // Optional request headers.
    THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;

    // Parent node.
    uint64 NodeId = 3;

    // Node name
    bytes Name = 4;

    // Flags.
    uint32 Flags = 5;

    // Create mode.
    uint32 Mode = 6;

    // Create owner
    uint64 Uid = 10;

    // Create group
    uint64 Gid = 11;

    // If set, the node will be created or looked up in the follower FS.
    string FollowerFileSystemId = 12;
}

message TCreateHandleResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // IO handle.
    uint64 Handle = 2;

    // Node Attr.
    TNodeAttr NodeAttr = 3;

    // Follower FS id - if the request should be redirected to a follower.
    string FollowerFileSystemId = 4;
    // Node name in the follower FS (under RootNode).
    string FollowerNodeName = 5;

    // Optional response headers.
    TResponseHeaders Headers = 1000;
}

////////////////////////////////////////////////////////////////////////////////
// DestroyHandle request/response

message TDestroyHandleRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;

    // Node.
    uint64 NodeId = 3;

    // IO handle.
    uint64 Handle = 4;
}

message TDestroyHandleResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Optional response headers.
    TResponseHeaders Headers = 1000;
}

////////////////////////////////////////////////////////////////////////////////
// ReadData request/response

message TReadDataRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;

    // Node.
    uint64 NodeId = 3;

    // IO handle.
    uint64 Handle = 4;

    // Starting offset for read.
    uint64 Offset = 5;

    // Number of bytes to read.
    uint64 Length = 6;
}

message TReadDataResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Buffer with bytes read.
    bytes Buffer = 2;

    // Optional response headers.
    TResponseHeaders Headers = 1000;
}

////////////////////////////////////////////////////////////////////////////////
// WriteData request/response

message TWriteDataRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;

    // Node.
    uint64 NodeId = 3;

    // IO handle.
    uint64 Handle = 4;

    // Starting offset for write.
    uint64 Offset = 5;

    // Buffer with bytes to write.
    bytes Buffer = 6;
}

message TWriteDataResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Optional response headers.
    TResponseHeaders Headers = 1000;
}

////////////////////////////////////////////////////////////////////////////////
// AllocateData request/response

message TAllocateDataRequest
{
    enum EFlags
    {
        F_NONE = 0;
        F_KEEP_SIZE = 1;
        F_PUNCH_HOLE = 2;
        F_COLLAPSE_RANGE = 3;
        F_ZERO_RANGE = 4;
        F_INSERT_RANGE = 5;
        F_UNSHARE_RANGE = 6;
    }

    // Optional request headers.
    THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;

    // Node.
    uint64 NodeId = 3;

    // IO handle.
    uint64 Handle = 4;

    // Starting offset for write.
    uint64 Offset = 5;

    // Number of bytes to allocate.
    uint64 Length = 6;

    // Optional linux specific flags.
    uint32 Flags = 7;
}

message TAllocateDataResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Optional response headers.
    TResponseHeaders Headers = 1000;
}

////////////////////////////////////////////////////////////////////////////////
// TruncateData request/response
// XXX unused

message TTruncateDataRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;

    // Node.
    uint64 NodeId = 3;

    // IO handle.
    uint64 Handle = 4;

    // Number of bytes to keep.
    uint64 Length = 6;
}

message TTruncateDataResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Optional response headers.
    TResponseHeaders Headers = 1000;
}

////////////////////////////////////////////////////////////////////////////////
// Fsync request/response

message TFsyncRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;

    // Node.
    uint64 NodeId = 3;

    // IO handle.
    uint64 Handle = 4;

    // If true only the user data should be flushed, not the meta data.
    bool DataSync = 5;
}

message TFsyncResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Optional response headers.
    TResponseHeaders Headers = 1000;
}

////////////////////////////////////////////////////////////////////////////////
// FsyncDir request/response

message TFsyncDirRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;

    // Node.
    uint64 NodeId = 3;

    // If true only the user data should be flushed, not the meta data.
    bool DataSync = 4;
}

message TFsyncDirResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Optional response headers.
    TResponseHeaders Headers = 1000;
}
