syntax = "proto3";

package NCloud.NFileStore.NProto;

import "cloud/filestore/public/api/protos/fs.proto";

////////////////////////////////////////////////////////////////////////////////

enum EAction
{
    // INDEX
    ACTION_CREATE_NODE = 0;
    ACTION_RENAME_NODE = 1;
    ACTION_REMOVE_NODE = 2;
    ACTION_CREATE_HANDLE = 3;
    ACTION_DESTROY_HANDLE = 4;
    // FIXME: should allocate data before locking
    ACTION_ACQUIRE_LOCK = 5;
    ACTION_RELEASE_LOCK = 6;
    ACTION_GET_NODE_ATTR = 7;
    ACTION_ACCESS_NODE = 8;
    ACTION_LIST_NODES = 9;
    ACTION_FLUSH = 10;

    // DATA
    ACTION_WRITE = 101;
    ACTION_READ = 102;
};

message TIndexLoadSpec
{
    message TAction
    {
        EAction Action = 1;
        uint32 Rate = 2;
    }

    repeated TAction Actions = 1;
}

message TDataLoadSpec
{
    message TAction
    {
        EAction Action = 1;
        uint32 Rate = 2;
    }

    uint32 BlockSize = 1;
    uint32 ReadBytes = 2;
    uint32 WriteBytes = 3;
    uint32 AppendPercentage = 4;
    uint64 InitialFileSize = 5;
    bool ValidationEnabled = 6;
    bool Sequential = 7;

    repeated TAction Actions = 8;
}

message TReplaySpec
{
    string FileName = 1;
    string ReplayRoot = 2; // not used in grpc

    // Use profile log messages only with this FileSystemId  
    string FileSystemIdFilter = 3;

    // Skip read operations: AccessNode ReadData GetNodeAttr
    bool SkipRead = 4;

    // Skip write operations: CreateNode CreateHandle Write RenameNode UnlinkNode
    bool SkipWrite = 5;

    // Factor for sleeps for respect timings from log
    // Example: 0: disable sleep; 0.5: try to be 2x faster; 1: keep as in log; 2: 2x times slower; 
    double TimeScale = 7;

    enum EWriteFill
    {
        // Write info about chunk (handle, size, offset, ...)
        Info = 0;
        // Write random data
        Random = 1;
        // Write empty data
        Empty = 2;
    }

    EWriteFill WriteFill = 8;

    enum ECreateOnRead
    {
        // Create not existing file = error
        None = 0;
        // Create and resize to known size
        FullSize = 1;
        // Create empty and resize only when read offset+size bigger than current file size
        Greedy = 2;
    }

    // Create missing files in CreateHandle requests
    ECreateOnRead CreateOnRead = 9;

    // Ignore too long pauses in log, in microseconds
    uint64 MaxSleepUs = 10;
    
    // Add O_DIRECT flag to open call
    bool OpenAddDirectFlag = 11;

    // Synchronize replay with real time, value - seconds for align: use 86400 (day)
    uint64 RealTime = 12;
    int64 RealTimeOffset = 13;

    // Filter log by time, example:
    // ReplayTimeFrom: "2025-03-02T11:30:00"
    // ReplayTimeTill: "2025-03-02T12:30:00"
    string ReplayTimeFrom = 14;
    string ReplayTimeTill = 15;
}

message TMigrationSpec
{
    uint32 MigrationPeriod = 1;
    uint32 StateTransferDelay = 2;
}

message TLoadTest
{
    string Name = 1;

    oneof FileStore
    {
        // Existing filestore name
        string FileSystemId = 2;

        // Create a new one
        TCreateFileStoreRequest CreateFileStoreRequest = 3;
    }

    oneof Specs
    {
        TIndexLoadSpec IndexLoadSpec = 4;
        TDataLoadSpec DataLoadSpec = 5;
        TReplaySpec ReplayFsSpec = 17;
        TReplaySpec ReplayGrpcSpec = 18;
    }

    uint32 IODepth = 10;
    uint32 RequestsCount = 11;
    uint32 TestDuration = 12;
    uint32 SessionPingTimeout = 13;
    uint32 SessionRetryTimeout = 14;

    TMigrationSpec MigrationSpec = 15;

    // disables destruction of the filestore created via CreateFileStoreRequest
    bool KeepFileStore = 16;
}

////////////////////////////////////////////////////////////////////////////////

message TLatency
{
    uint64 P50 = 1;
    uint64 P95 = 2;
    uint64 P90 = 3;
    uint64 P99 = 4;
    uint64 P999 = 5;
    uint64 Min = 6;
    uint64 Max = 7;
    double Mean = 8;
    double StdDeviation = 9;
}

message TTestStats
{
    message TStats
    {
        string Action = 1;
        uint64 Count = 2;
        TLatency Latency = 3;
    }

    string Name = 1;
    bool Success = 2;

    repeated TStats Stats = 3;
}

////////////////////////////////////////////////////////////////////////////////

message TTestGraph
{
    message TTest
    {
        oneof Test
        {
            TLoadTest LoadTest = 1;
        }
    }

    repeated TTest Tests = 1;
}
