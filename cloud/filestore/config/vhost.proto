syntax = "proto2";

package NCloud.NFileStore.NProto;

import "cloud/filestore/config/client.proto";
import "cloud/filestore/config/server.proto";
import "cloud/storage/core/protos/endpoints.proto";

option go_package = "github.com/ydb-platform/nbs/cloud/filestore/config";

////////////////////////////////////////////////////////////////////////////////

message TServiceEndpoint
{
    optional string Name = 1;
    optional TClientConfig ClientConfig = 2;
}

////////////////////////////////////////////////////////////////////////////////

message TVhostServiceConfig
{
    // Endpoints mapping.
    repeated TServiceEndpoint ServiceEndpoints = 1;

    // Endpoint storage options.
    optional string RootKeyringName = 2;
    optional string EndpointsKeyringName = 3;
    optional bool RequireEndpointsKeyring = 4; // Obsolete. Do not use.
    optional NCloud.NProto.EEndpointStorageType EndpointStorageType = 5;
    optional string EndpointStorageDir = 6;

    // Access mode for endpoint socket files
    optional uint32 SocketAccessMode = 7;

    // Causes E_NOT_IMPLEMENTED errors in endpoint storages to be logged.
    optional bool EndpointStorageNotImplementedErrorIsFatal = 8;

    // Causes LocalService to be used if service != null and service != kikimr.
    optional TLocalServiceConfig LocalServiceConfig = 9;

    // Path to the directory where HandleOpsQueue is stored for all sessions.
    // Will create a directory with the filesystemId
    // and a subdirectory with the sessionId if not present.
    optional string HandleOpsQueuePath = 10;

    // Max HandleOpsQueue size in bytes per session.
    optional uint32 HandleOpsQueueSize = 11;

    // Path to the directory where WriteBackCache is stored for all
    // sessions. Will create a directory with filesystem id as name
    // (and a subdirectory with session id as name) if not present.
    optional string WriteBackCachePath = 12;

    // Max WriteBackCache capacity in bytes per session.
    optional uint64 WriteBackCacheCapacity = 13;

    // WriteBackCache automatic flush period (in milliseconds).
    optional uint32 WriteBackCacheAutomaticFlushPeriod = 14;

    // Retry period for failed WriteData operations in Flush (in milliseconds).
    optional uint32 WriteBackCacheFlushRetryPeriod = 15;

    // Maximum size of a single consolidated write request in bytes for flush.
    // If this limit is exceeded, write requests will be split into multiple
    // requests, each not exceeding this limit.
    optional uint32 WriteBackCacheFlushMaxWriteRequestSize = 16;

    // Maximum number of consolidated write requests for a flush operation.
    // If this limit is exceeded, flush will be split into
    // a sequence of multiple flush operations.
    optional uint32 WriteBackCacheFlushMaxWriteRequestsCount = 17;

    // Maximum total size of all WriteData requests in bytes for a flush
    // operation. If this limit is exceeded, flush will be split into
    // a sequence of multiple flush operations.
    optional uint64 WriteBackCacheFlushMaxSumWriteRequestsSize = 18;
}

////////////////////////////////////////////////////////////////////////////////

message TVhostAppConfig
{
    optional TServerConfig ServerConfig = 1;
    optional TVhostServiceConfig VhostServiceConfig = 2;
}
