syntax = "proto2";

package NCloud.NFileStore.NProto;

option go_package = "a.yandex-team.ru/cloud/filestore/config";

import "cloud/storage/core/protos/trace.proto";

////////////////////////////////////////////////////////////////////////////////
// Monitoring URL components

message TMonitoringUrlData
{
    // Monitoring cluster name.
    optional string MonitoringClusterName = 1;
    // Monitoring host url.
    optional string MonitoringUrl = 2;
    // Project name in monitoring.
    optional string MonitoringProject = 3;
};

////////////////////////////////////////////////////////////////////////////////
// Performance profile settings for performance diagnostics (e.g. Suffer metric
// calculation).

message TRequestPerformanceProfile
{
    // Requests per second.
    optional uint64 RPS = 1;
    // Throughput in any kind of units - for Read/Write it should be bytes per
    // second, for ListNodes it can be entries per second, for other requests
    // it can be 0 until we come up with something more useful.
    optional uint64 Throughput = 2;
};

////////////////////////////////////////////////////////////////////////////////
// Performance profile for filesystems / tablets / etc.

message TFileSystemPerformanceProfile
{
    optional TRequestPerformanceProfile Read = 1;
    optional TRequestPerformanceProfile Write = 2;
    optional TRequestPerformanceProfile ListNodes = 3;
    optional TRequestPerformanceProfile GetNodeAttr = 4;
    optional TRequestPerformanceProfile CreateHandle = 5;
    optional TRequestPerformanceProfile DestroyHandle = 6;
    optional TRequestPerformanceProfile CreateNode = 7;
    optional TRequestPerformanceProfile RenameNode = 8;
    optional TRequestPerformanceProfile UnlinkNode = 9;
    optional TRequestPerformanceProfile StatFileStore = 10;
};

////////////////////////////////////////////////////////////////////////////////

message TDiagnosticsConfig
{
    // For proper monpage link generation.
    optional string BastionNameSuffix = 1;

    // [obsolete]
    // optional string SolomonClusterName = 2;

    // [obsolete]
    // optional string SolomonUrl = 3;

    // [obsolete]
    // optional string SolomonProject = 4;

    // Monserver will listen on this port.
    optional uint32 FilestoreMonPort = 5;

    // The tracks of the requests whose processing time in ms exceeds these
    // values have a chance to be logged.
    optional uint32 HDDSlowRequestThreshold = 6;
    optional uint32 SSDSlowRequestThreshold = 7;

    // Sampling rate for request tracking.
    optional uint32 SamplingRate = 8;

    // Sampling rate for requests with processing time above "slow" threshold.
    optional uint32 SlowRequestSamplingRate = 9;

    // Dump profile log data every ProfileLogTimeThreshold ms.
    optional uint32 ProfileLogTimeThreshold = 10;

    // Unified agent endpoint
    optional string TracesUnifiedAgentEndpoint = 11;

    // Traces "syslog" identifier.
    optional string TracesSyslogIdentifier = 12;

    // Number of shuttles in lwtrace pool.
    optional uint32 LWTraceShuttleCount = 13;

    // The tracks of the requests whose processing time in ms exceeds
    // corresponding values have a chance to be logged.
    repeated NCloud.NProto.TLWTraceThreshold RequestThresholds = 14;

    // Used to form path to file with cpu wait counters
    optional string CpuWaitServiceName = 15;

    // Alternatively to CpuWaitServiceName, can be used to explicitly specify
    // the filename of the file with cpu wait counters. If both are specified,
    // CpuWaitFilename is used.
    optional string CpuWaitFilename = 23;

    // Aggregate and write metrics values in Metrics service to monlib counters
    // every MetricsUpdateInterval ms.
    optional uint32 MetricsUpdateInterval = 16;

    // Slow requests threshold for execution time in ms.
    optional uint32 SlowExecutionTimeRequestThreshold = 17;

    // Slow requests threshold for total time in ms.
    optional uint32 SlowTotalTimeRequestThreshold = 18;

    // Predictor's interval window (ms).
    optional uint32 PostponeTimePredictorInterval = 19;

    // Max possible predicted time (ms).
    optional uint32 PostponeTimePredictorMaxTime = 20;

    // Requests percentage in predictor to calculate possible delay [0.0, 1.0].
    optional double PostponeTimePredictorPercentage = 21;

    // Monitoring data necessary for link generation on monpages.
    optional TMonitoringUrlData MonitoringUrlData = 22;

    // Report histogram as a set of manually created counters
    optional bool ReportHistogramAsMultipleCounters = 24;

    // Report histogram as a single counter (THistogramCounter)
    optional bool ReportHistogramAsSingleCounter = 25;

    // Performance profile for HDD filesystems.
    optional TFileSystemPerformanceProfile HDDFileSystemPerformanceProfile = 26;

    // Performance profile for SSD filesystems.
    optional TFileSystemPerformanceProfile SSDFileSystemPerformanceProfile = 27;
}
