syntax = "proto3";

import "cloud/storage/core/protos/error.proto";
import "cloud/storage/core/protos/media.proto";
import "cloud/filestore/public/api/protos/fs.proto";
import "cloud/filestore/public/api/protos/headers.proto";
import "cloud/filestore/public/api/protos/node.proto";
import "cloud/filestore/config/storage.proto";

import "contrib/ydb/core/protos/base.proto";

package NCloud.NFileStore.NProtoPrivate;

option go_package = "github.com/ydb-platform/nbs/cloud/filestore/private/api/protos";

////////////////////////////////////////////////////////////////////////////////
// WaitReady request/response.

message TWaitReadyRequest
{
    // Optional request headers.
    NProto.THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;
}

message TWaitReadyResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;
}

////////////////////////////////////////////////////////////////////////////////
// CreateSession request/response.

message TCreateSessionRequest
{
    // Optional request headers.
    NProto.THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;

    // Checkpoint to work with (read-only access to historic data).
    string CheckpointId = 3;

    // Restore session by client id.
    bool RestoreClientSession = 4;

    bool ReadOnly = 5;

    uint64 MountSeqNumber = 6;
}

message TCreateSessionResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // SessionId (recovered or requested).
    string SessionId = 2;

    // Previous saved state if any.
    bytes SessionState = 3;

    // Filestore description.
    NProto.TFileStore FileStore = 4;
}

////////////////////////////////////////////////////////////////////////////////
// DestroySession request/response.

message TDestroySessionRequest
{
    // Optional request headers.
    NProto.THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;
}

message TDestroySessionResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;
}

////////////////////////////////////////////////////////////////////////////////
// GetStorageStats request/response.

message TCompactionRangeStats
{
    uint32 RangeId = 1;
    uint32 BlobCount = 2;
    uint32 DeletionCount = 3;
    uint32 GarbageBlockCount = 4;
}

message TShardStats
{
    string ShardId = 1;
    uint64 UsedBlocksCount = 2;
    uint64 TotalBlocksCount = 3;
    uint64 CurrentLoad = 4;
    uint32 Suffer = 5;
}

message TStorageStats
{
    // index stats
    uint64 UsedNodesCount = 1;
    uint64 UsedSessionsCount = 2;
    uint64 UsedHandlesCount = 3;
    uint64 UsedLocksCount = 4;
    uint64 UsedBlocksCount = 5;
    uint64 TotalBlocksCount = 6;

    // data stats
    uint64 FreshBlocksCount = 100;
    uint64 MixedBlocksCount = 101;
    uint64 MixedBlobsCount = 102;
    uint64 DeletionMarkersCount = 103;
    uint64 GarbageQueueSize = 104;
    uint64 GarbageBlocksCount = 105;
    uint64 CheckpointNodesCount = 106;
    uint64 CheckpointBlocksCount = 107;
    uint64 CheckpointBlobsCount = 108;
    uint64 FreshBytesCount = 109;
    uint64 AllocatedCompactionRanges = 110;
    uint64 UsedCompactionRanges = 111;
    uint64 LastCollectCommitId = 112;
    uint64 DeletedFreshBytesCount = 113;
    uint64 LargeDeletionMarkersCount = 114;

    // channel stats
    uint64 TabletChannelCount = 1000;
    uint64 ConfigChannelCount = 1001;

    // tx stats
    uint64 TxDeleteGarbageRwCompleted = 2000;

    // compaction map range stats
    repeated TCompactionRangeStats CompactionRangeStats = 3000;

    // background operation states
    uint32 FlushState = 4001;
    uint32 BlobIndexOpState = 4002;
    uint32 CollectGarbageState = 4003;

    // load stats
    uint64 CurrentLoad = 5001;
    uint64 Suffer = 5002;

    // shard stats
    repeated TShardStats ShardStats = 6001;
}

message TGetStorageStatsRequest
{
    // Optional request headers.
    NProto.THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;

    // If nonzero, requests the stats for the top N ranges by compaction score.
    uint32 CompactionRangeCountByCompactionScore = 3;
    // The same but for cleanup score.
    uint32 CompactionRangeCountByCleanupScore = 4;
    // The same but for garbage score.
    uint32 CompactionRangeCountByGarbageScore = 5;

    // Use cached data, don't require up-to-date stats.
    bool AllowCache = 6;

    // Forces shard stats fetching even if this request is itself sent to a
    // shard.
    bool ForceFetchShardStats = 7;
}

message TGetStorageStatsResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Tablet stats.
    TStorageStats Stats = 2;

    // Storage media kind.
    NCloud.NProto.EStorageMediaKind MediaKind = 3;
}

////////////////////////////////////////////////////////////////////////////////
// GetFileSystemConfig request/response.

message TChannelProfile
{
    uint32 DataKind = 1;
    string PoolKind = 2;
}

message TFileSystemConfig
{
    // Config version.
    uint32 Version = 1;

    // Filesystem identifier.
    string FileSystemId = 2;

    // Common  indentifiers.
    string ProjectId = 3;
    string FolderId = 4;
    string CloudId = 5;

    uint32 BlockSize = 6;
    uint64 BlocksCount = 7;
    uint64 NodesCount = 8;

    repeated TChannelProfile ExplicitChannelProfiles = 9;

    uint32 RangeIdHasherType = 10;

    // Storage media kind.
    NCloud.NProto.EStorageMediaKind StorageMediaKind = 11;

    // Performance profile, used for throttling.
    NProto.TFileStorePerformanceProfile PerformanceProfile = 12;
}

message TGetFileSystemConfigRequest
{
    // Optional request headers.
    NProto.THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;
}

message TGetFileSystemConfigResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Storage config.
    TFileSystemConfig Config = 2;
}

////////////////////////////////////////////////////////////////////////////////
// GetStorageConfigFields request/response.

message TGetStorageConfigFieldsRequest
{
    // Optional request headers.
    NProto.THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;

    // Storage config fields to get values for.
    repeated string StorageConfigFields = 3;
}

message TGetStorageConfigFieldsResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Mapping of storage config fields to values.
    map<string, string> StorageConfigFieldsToValues = 2;
}

////////////////////////////////////////////////////////////////////////////////
// ChangeStorageConfig request/response

message TChangeStorageConfigRequest
{
    // Optional request headers.
    NProto.THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;

    // Storage config
    NProto.TStorageConfig StorageConfig = 3;

    // Merge with storage config from tablet database
    optional bool MergeWithStorageConfigFromTabletDB = 4;
}

message TChangeStorageConfigResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Result Storage config.
    NProto.TStorageConfig StorageConfig = 2;
}

////////////////////////////////////////////////////////////////////////////////
// DescribeData request/response.

message TDescribeDataRequest
{
    // Optional request headers.
    NProto.THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;

    // Node.
    uint64 NodeId = 3;

    // IO handle.
    uint64 Handle = 4;

    // Starting offset for read.
    uint64 Offset = 5;

    // Number of bytes to read.
    uint64 Length = 6;
}

// Represents actual data - for the data that is not stored in data channels as
// blobs yet.
message TFreshDataRange
{
    // This offset is relative to the beginning of the inode. Measured in bytes.
    uint64 Offset = 1;
    // Data bytes.
    bytes Content = 2;
}

// Represents a range of consecutive bytes inside some blob.
message TRangeInBlob
{
    // This offset is relative to the beginning of the inode. Measured in bytes.
    uint64 Offset = 1;
    // This offset is relative to the beginning of the blob. Measured in bytes.
    uint32 BlobOffset = 2;
    uint32 Length = 3;
}

// Represents the ranges that need to be read from a single blob.
message TBlobPiece
{
    // Blob id.
    NKikimrProto.TLogoBlobID BlobId = 1;

    // Group id.
    uint32 BSGroupId = 2;

    // Data ranges.
    repeated TRangeInBlob Ranges = 3;
}

message TDescribeDataResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    repeated TFreshDataRange FreshDataRanges = 2;
    repeated TBlobPiece BlobPieces = 3;

    // File size.
    uint64 FileSize = 4;

    // Optional response headers.
    NProto.TResponseHeaders Headers = 1000;
}

////////////////////////////////////////////////////////////////////////////////
// DescribeSessions request/response.

message TDescribeSessionsRequest
{
    // Optional request headers.
    NProto.THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;
}

message TTabletSessionInfo
{
    // A subset of the params stored in TSession in the IndexTablet's DB.
    string SessionId = 1;
    string ClientId = 2;
    bytes SessionState = 3;
    uint64 MaxSeqNo = 4;
    uint64 MaxRwSeqNo = 5;
    bool IsOrphan = 6;
}

message TDescribeSessionsResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // All tablet sessions.
    repeated TTabletSessionInfo Sessions = 2;
}

////////////////////////////////////////////////////////////////////////////////
// GenerateBlobIds request/response.

message TGenerateBlobIdsRequest
{
    // Optional request headers.
    NProto.THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;

    // Node.
    uint64 NodeId = 3;

    // IO handle.
    uint64 Handle = 4;

    // Starting offset for write. Expected to be aligned to the block size.
    uint64 Offset = 5;

    // Length of data to write. Expected to be aligned to the block size.
    uint64 Length = 6;
}

message TGeneratedBlob
{
    // Blob id.
    NKikimrProto.TLogoBlobID BlobId = 1;

    // Offset
    uint64 Offset = 2;

    // Group id.
    uint32 BSGroupId = 3;
}

message TGenerateBlobIdsResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Blob ids, in the same order as in the request.
    repeated TGeneratedBlob Blobs = 2;

    // AcquireCollectBarrier has been executed for this commit id.
    uint64 CommitId = 4;
}

////////////////////////////////////////////////////////////////////////////////

// ThreeStageWrite request/response.

message TAddDataRequest
{
    // Optional request headers.
    NProto.THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;

    // Node.
    uint64 NodeId = 3;

    // IO handle.
    uint64 Handle = 4;

    // Starting offset for write.
    uint64 Offset = 5;

    // Data size.
    uint64 Length = 6;

    // Blob ids to be added. Ordered by the offset in the original data.
    repeated NKikimrProto.TLogoBlobID BlobIds = 7;

    // Commit id.
    uint64 CommitId = 8;

    // Unaligned data parts - supposed to contain unaligned head and tail.
    repeated TFreshDataRange UnalignedDataRanges = 9;

    // StorageStatusFlags for the written blobs' channels.
    repeated uint32 StorageStatusFlags = 10;

    // ApproximateFreeSpace shares for the written blobs' channels.
    repeated double ApproximateFreeSpaceShares = 11;
}

message TAddDataResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;
}

////////////////////////////////////////////////////////////////////////////////
// ForcedOperation[Status] request/response.

message TForcedOperationRequest
{
    enum EForcedOperationType
    {
        E_COMPACTION = 0;
        E_CLEANUP = 1;
        E_DELETE_EMPTY_RANGES = 2;
    };

    // Optional request headers.
    NProto.THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;

    // Operation type.
    EForcedOperationType OpType = 3;

    // Enables processing of all ranges - even the ranges whose compaction
    // stats are zero.
    bool ProcessAllRanges = 4;

    // Starts from the min RangeId whose value is >= MinRangeId.
    uint32 MinRangeId = 5;
}

message TForcedOperationResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Affected range count.
    uint64 RangeCount = 2;

    // Can be used to query operation status.
    string OperationId = 3;
}

message TForcedOperationStatusRequest
{
    // Optional request headers.
    NProto.THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;

    // Operation id.
    string OperationId = 3;
}

message TForcedOperationStatusResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Affected range count.
    uint64 RangeCount = 2;

    // Processed range count.
    uint64 ProcessedRangeCount = 3;

    // Last processed range id. Can be used to skip processed range ids upon
    // operation restart via the MinRangeId parameter.
    uint32 LastProcessedRangeId = 4;
}

////////////////////////////////////////////////////////////////////////////////
// ConfigureShards request/response.

message TConfigureShardsRequest
{
    // FileSystem identifier.
    string FileSystemId = 1;

    // Shard FileSystem identifiers.
    repeated string ShardFileSystemIds = 2;

    // Override shard list validation.
    bool Force = 3;
}

message TConfigureShardsResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;
}

////////////////////////////////////////////////////////////////////////////////
// ConfigureShards request/response.

message TConfigureAsShardRequest
{
    // FileSystem identifier.
    string FileSystemId = 1;

    // ShardNo (will be used for the high bits of NodeId and HandleId)
    uint32 ShardNo = 2;

    // Shard FileSystem identifiers and main FileSystem identifier (manages
    // RootNode). Needed for directory creation in shards.
    repeated string ShardFileSystemIds = 3;
    string MainFileSystemId = 4;
}

message TConfigureAsShardResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;
}

////////////////////////////////////////////////////////////////////////////////
// GetStorageConfig request/response.

message TGetStorageConfigRequest
{
    // Optional request headers.
    NProto.THeaders Headers = 1;

    // FileSystem identifier to query its storage config. Or empty to
    // query server storage config.
    string FileSystemId = 2;
}

message TGetStorageConfigResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Result Storage config.
    NProto.TStorageConfig StorageConfig = 2;
}

////////////////////////////////////////////////////////////////////////////////
// GetNodeAttrBatch request/response.

message TGetNodeAttrBatchRequest
{
    // Optional request headers.
    NProto.THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;

    // Parent.
    uint64 NodeId = 3;

    // Nodes.
    repeated bytes Names = 4;
}

message TGetNodeAttrBatchResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Individual node responses.
    repeated NProto.TGetNodeAttrResponse Responses = 2;
}

////////////////////////////////////////////////////////////////////////////////
// WriteCompactionMap request/response.

message TWriteCompactionMapRequest
{
    string FileSystemId = 1;
    repeated TCompactionRangeStats Ranges = 2;
}

message TWriteCompactionMapResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;
}

////////////////////////////////////////////////////////////////////////////////
// Direct inode manipulation.

message TUnsafeDeleteNodeRequest
{
    string FileSystemId = 1;
    uint64 Id = 2;
}

message TUnsafeDeleteNodeResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;
}

message TUnsafeUpdateNodeRequest
{
    string FileSystemId = 1;
    NProto.TNodeAttr Node = 2;
}

message TUnsafeUpdateNodeResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;
}

message TUnsafeGetNodeRequest
{
    string FileSystemId = 1;
    uint64 Id = 2;
}

message TUnsafeGetNodeResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;
    NProto.TNodeAttr Node = 2;
}

////////////////////////////////////////////////////////////////////////////////
// GetFileSystemTopology request/response.

message TGetFileSystemTopologyRequest
{
    // Optional request headers.
    NProto.THeaders Headers = 1;

    // FileSystem identifier to query its topology.
    string FileSystemId = 2;
}

message TGetFileSystemTopologyResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Shard FileSystem identifiers.
    repeated string ShardFileSystemIds = 2;

    // Shard no (if this fs is a shard itself).
    uint32 ShardNo = 3;
}

////////////////////////////////////////////////////////////////////////////////
// RestartTablet request/response.

message TRestartTabletRequest
{
    // FileSystem identifier.
    string FileSystemId = 1;
}

message TRestartTabletResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;
}

////////////////////////////////////////////////////////////////////////////////
// RenameNodeInDestination request/response

message TRenameNodeInDestinationRequest
{
    enum EFlags
    {
        F_NONE = 0;
        F_EXCHANGE = 1;
        F_NOREPLACE = 2;
    }

    // Optional request headers.
    NProto.THeaders Headers = 1;

    // FileSystem identifier.
    string FileSystemId = 2;

    // New parent Node
    uint64 NewParentId = 3;

    // New node name.
    bytes NewName = 4;

    // Optional linux specific flags.
    uint32 Flags = 5;

    // Source node info.
    string SourceNodeShardId = 6;
    string SourceNodeShardNodeName = 7;

    // Passing the whole original request might be an overkill but it actually
    // may help with debugging.
    NProto.TRenameNodeRequest OriginalRequest = 8;
}

message TRenameNodeInDestinationResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Needed if F_EXCHANGE flag is used.
    string OldTargetNodeShardId = 2;
    string OldTargetNodeShardNodeName = 3;

    // Optional response headers.
    NProto.TResponseHeaders Headers = 1000;
}
