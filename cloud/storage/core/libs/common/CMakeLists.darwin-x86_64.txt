# This file was generated by the YaTool build system (https://github.com/yandex/yatool),
# from a source YaTool build configuration provided in ya.make files.
#
# If the repository supports both CMake and ya build configurations, please modify both of them.
#
# If only CMake build configuration is supported then modify only CMake files and note that only
# simple modifications are allowed like adding source-files to targets or adding simple properties
# like target_include_directories. These modifications will be ported to original ya.make files
# by maintainers. Any complex modifications which can't be easily ported back to the ya build
# system may be rejected.
#
# Please refer to the build instructions in the repository for more information about manual
# changes in this file.

get_built_tool_path(
  TOOL_enum_parser_bin
  TOOL_enum_parser_dependency
  tools/enum_parser/enum_parser
  enum_parser
)

add_subdirectory(ut)
add_subdirectory(bench)

add_library(core-libs-common)


target_link_libraries(core-libs-common PUBLIC
  contrib-libs-cxxsupp
  yutil
  tools-enum_parser-enum_serialization_runtime
  storage-core-protos
  cpp-deprecated-atomic
  cpp-digest-crc32c
  cpp-json-writer
  library-cpp-logger
  library-cpp-lwtrace
  cpp-protobuf-util
  cpp-threading-future
  library-actors-prof
)

target_sources(core-libs-common PRIVATE
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/affinity.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/aligned_buffer.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/alloc.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/backoff_delay_provider.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/block_buffer.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/block_data_ref.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/byte_vector.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/compressed_bitmap.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/concurrent_queue.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/context.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/error.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/file_io_service.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/file_ring_buffer.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/format.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/guarded_sglist.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/helpers.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/history.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/lru_cache.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/media.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/page_size.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/persistent_table.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/proto_helpers.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/random.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/ring_buffer.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/scheduler.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/scheduler_test.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/scoped_handle.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/sglist_block_range.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/sglist.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/sglist_iter.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/sglist_test.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/startable.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/task_queue.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/thread.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/thread_park.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/thread_pool.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/timer.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/timer_test.cpp
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/verify.cpp
)


generate_enum_serilization(core-libs-common
  ${PROJECT_SOURCE_DIR}/cloud/storage/core/libs/common/error.h
  INCLUDE_HEADERS
  cloud/storage/core/libs/common/error.h
)
