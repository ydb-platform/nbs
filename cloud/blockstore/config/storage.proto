syntax = "proto2";

package NCloud.NBlockStore.NProto;

import "cloud/storage/core/protos/authorization_mode.proto";
import "cloud/storage/core/protos/certificate.proto";
import "cloud/storage/core/protos/config_dispatcher_settings.proto";

option go_package = "github.com/ydb-platform/nbs/cloud/blockstore/config";

////////////////////////////////////////////////////////////////////////////////

enum EChannelAllocationMode
{
    // [obsolete]
    // Send NumChannels+ChannelProfileId settings to schemeshard in CreateVolume
    // and AlterVolume requests
    // CA_IMPLICIT = 0;

    // [obsolete]
    // Send ExplicitChannelProfiles alongside NumChannels+ChannelProfileId
    // CA_BOTH = 1;

    // Send only ExplicitChannelProfiles
    CA_EXPLICIT = 2;
}

////////////////////////////////////////////////////////////////////////////////

enum ECompactionType
{
    // RangeScore = BlobCount
    CT_DEFAULT = 0;
    // RangeScore = blobstorage load reduction in seconds
    CT_LOAD = 1;
}

////////////////////////////////////////////////////////////////////////////////

enum EVolumePreemptionType
{
    // Do not preempt volumes when host is overloaded
    PREEMPTION_NONE = 0;
    // Move most resource consuming disk
    PREEMPTION_MOVE_MOST_HEAVY = 1;
    // Move least resource consumig disk
    PREEMPTION_MOVE_LEAST_HEAVY = 2;
}

////////////////////////////////////////////////////////////////////////////////
//
//  !!!IMPORTANT!!!
//  Even though StorageServiceConfig is usually stored in textual format, it may
//  be overridden for some tablets and in this case it's stored in binary format
//  in the tablet's localdb. So binary backward-compatibility should be
//  maintained.
//
////////////////////////////////////////////////////////////////////////////////

message TStorageServiceConfig
{
    // Tablet channel profiles to use (legacy, see NBS-458).
    // optional uint32 ChannelsProfile = 1; // obsolete
    // optional uint32 ChannelsProfileSSD = 2; // obsolete
    // optional uint32 ChannelsProfileHybrid = 3; // obsolete

    // Schemeshard directory for volumes.
    optional string SchemeShardDir = 4;

    // Minimum blob size (in bytes) that lets compaction materialize zero blocks
    // and add this blob to the merged index.
    // optional uint32 WriteMergedBlobThreshold = 5; // obsolete

    // Minimum write request size (in bytes) that lets us write the data directly
    // to blobstorage (as a merged blob).
    optional uint32 WriteBlobThreshold = 6;

    // The size of data (in bytes) in the fresh blocks table that triggers flushing.
    optional uint32 FlushThreshold = 7;

    // Maximum number of fresh blocks to keep.
    // optional uint32 MaxFreshBlocks = 8; // obsolete

    // Number of overlapped blobs.
    // optional uint32 CompactionThreshold = 9; // obsolete

    // Number of blobs queued for cleanup.
    optional uint32 CleanupThreshold = 10;

    // Number of blobs queued for collect.
    optional uint32 CollectGarbageThreshold = 11;

    // Timeout for hive locks (in milliseconds).
    optional uint32 HiveLockExpireTimeout = 12;

    // Cooldown time between tablet reboots (in milliseconds).
    optional uint32 TabletRebootCoolDownIncrement = 13;
    optional uint32 TabletRebootCoolDownMax = 14;

    // Should local service be started or not.
    optional bool DisableLocalService = 15;

    // Number of reties before pipe client reports failure.
    optional uint32 PipeClientRetryCount = 16;

    // Mimimum timeout before pipe client reconnect attempt.
    optional uint32 PipeClientMinRetryTime = 17;

    // Maximum timeout before pipe client reconnect attempt.
    optional uint32 PipeClientMaxRetryTime = 18;

    // Fresh data will be chunked into blobs of such size (in bytes) during flushing.
    optional uint32 FlushBlobSizeThreshold = 19;

    // Period to write usage stats to log (in milliseconds).
    // optional uint32 UsageStatsLogPeriod = 20;  // obsolete

    // Retry timeout for compaction started from monitoring (in milliseconds).
    optional uint32 CompactionRetryTimeout = 21;

    // Number of deletions before starting an update process.
    optional uint32 UpdateBlobsThreshold = 22;

    // File to write metering data.
    // optional string MeteringFilename = 23;  // obsolete

    // Number of garbage blocks before start compaction.
    optional uint32 CompactionGarbageThreshold = 24;

    // Maximum request size in bytes.
    optional uint64 MaxReadWriteRangeSize = 25;

    // Maximum blob range size (in bytes).
    optional uint32 MaxBlobRangeSize = 26;

    // Timeout for considering client inactive after mounting (in milliseconds).
    optional uint32 InactiveClientsTimeout = 27;

    // Allow the service to unmount inactive clients.
    // optional bool UnmountInactiveClients = 28;  // obsolete

    // Allow multiple clients to mount the same volume (with access restrictions).
    // optional bool MultipleMountAllowed = 29;    // obsolete

    // Maximum allowed requests in-progress.
    optional uint32 MaxIORequestsInFlight = 30;
    optional uint32 MaxIORequestsInFlightSSD = 31;

    // Allow setting Version field in ModifyScheme request.
    optional bool AllowVersionInModifyScheme = 32;

    // Require mounting volume by any client willing to submit read/write/zero blocks requests.
    // optional bool MountRequired = 33;   // obsolete

    // Service version info.
    optional string ServiceVersionInfo = 34;

    // Size of allocation unit for SSD drives (in GiB).
    optional uint32 AllocationUnitSSD = 35;

    // Size of allocation unit for HDD drives (in GiB).
    optional uint32 AllocationUnitHDD = 36;

    // Throttling feature flags.
    optional bool ThrottlingEnabled = 37;
    optional bool ThrottlingEnabledSSD = 38;

    // Volumes stats upload to db period.
    optional uint32 StatsUploadInterval = 39;

    // Default throttling settings.
    optional uint32 ThrottlingBurstPercentage = 40;
    optional uint64 ThrottlingMaxPostponedWeight = 41;   // in bytes
    optional uint32 ThrottlingBoostTime = 42;            // in milliseconds
    optional uint32 ThrottlingBoostRefillTime = 43;      // in milliseconds

    // Disk boost rate corresponds to the following unit count.
    optional uint32 ThrottlingSSDBoostUnits = 44;
    optional uint32 ThrottlingHDDBoostUnits = 45;

    // Performance per allocation unit.
    optional uint32 SSDUnitReadBandwidth = 46;   // in MiB/s
    optional uint32 SSDUnitWriteBandwidth = 47;  // in MiB/s
    optional uint32 SSDMaxReadBandwidth = 48;    // in MiB/s
    optional uint32 SSDMaxWriteBandwidth = 49;   // in MiB/s
    optional uint32 SSDUnitReadIops = 50;
    optional uint32 SSDUnitWriteIops = 51;
    optional uint32 SSDMaxReadIops = 52;
    optional uint32 SSDMaxWriteIops = 53;
    optional uint32 HDDUnitReadBandwidth = 54;   // in MiB/s
    optional uint32 HDDUnitWriteBandwidth = 55;  // in MiB/s
    optional uint32 HDDMaxReadBandwidth = 56;    // in MiB/s
    optional uint32 HDDMaxWriteBandwidth = 57;   // in MiB/s
    optional uint32 HDDUnitReadIops = 58;
    optional uint32 HDDUnitWriteIops = 59;
    optional uint32 HDDMaxReadIops = 60;
    optional uint32 HDDMaxWriteIops = 61;

    optional NCloud.NProto.EAuthorizationMode AuthorizationMode = 62;

    // Throttler postpone/reject threshold in milliseconds.
    optional uint32 MaxThrottlerDelay = 63;

    // Partition backpressure feature calculation settings.
    optional uint32 CompactionScoreLimitForBackpressure = 64;
    optional uint32 CompactionScoreThresholdForBackpressure = 65;
    optional uint32 CompactionScoreFeatureMaxValue = 66;
    optional uint32 FreshByteCountLimitForBackpressure = 67;
    optional uint32 FreshByteCountThresholdForBackpressure = 68;
    optional uint32 FreshByteCountFeatureMaxValue = 69;
    optional uint64 CleanupQueueBytesLimitForBackpressure = 311;
    optional uint64 CleanupQueueBytesThresholdForBackpressure = 312;
    optional uint32 CleanupQueueBytesFeatureMaxValue = 313;

    // Max write request cost multiplier due to backpressure.
    optional uint32 MaxWriteCostMultiplier = 70;

    // Timeout to register client at volume.
    optional uint32 InitialAddClientTimeout = 71;

    // Timeout to register client after tablet local start.
    optional uint32 LocalStartAddClientTimeout = 72;

    // Channel configuration.
    optional string HDDSystemChannelPoolKind = 73;
    optional string HDDLogChannelPoolKind = 74;
    optional string HDDIndexChannelPoolKind = 75;
    optional string HDDMixedChannelPoolKind = 76;
    optional string HDDMergedChannelPoolKind = 77;
    optional string SSDSystemChannelPoolKind = 78;
    optional string SSDLogChannelPoolKind = 79;
    optional string SSDIndexChannelPoolKind = 80;
    optional string SSDMixedChannelPoolKind = 81;
    optional string SSDMergedChannelPoolKind = 82;
    optional string HybridSystemChannelPoolKind = 83;
    optional string HybridLogChannelPoolKind = 84;
    optional string HybridIndexChannelPoolKind = 85;
    optional string HybridMixedChannelPoolKind = 86;
    optional string HybridMergedChannelPoolKind = 87;

    // [obsolete] Channel allocation mode for schemeshard.
    // we always use explicit channel profiles.
    // optional EChannelAllocationMode ChannelAllocationMode = 88;

    // Scatters new volumes across multiple schemeshard directories
    // optional bool ScatterVolumesInSchemeShard = 89; // obsolete

    // FolderId of this NBS instance. Used for authorization.
    optional string FolderId = 90;

    // Enables allocation of special channels for Mixed blobs.
    optional bool AllocateSeparateMixedChannels = 91;

    // Retry timeout for cleanup started from monitoring (in milliseconds).
    optional uint32 CleanupRetryTimeout = 92;

    // Channel free space threshold - used for write request balancing.
    optional uint32 ChannelFreeSpaceThreshold = 93;
    // Channel min free space - used for write request balancing.
    optional uint32 ChannelMinFreeSpace = 94;

    // Minimum number of channels per partition.
    optional uint32 MinChannelCount = 95;

    // Weight of read/zero/describe requests in throttler's postponed request
    // queue, bytes.
    optional uint32 DefaultPostponedRequestWeight = 96;

    // Timeout for client to send ping (in milliseconds).
    optional uint32 ClientRemountPeriod = 97;

    // Index caching parameters (only for partition2).
    optional uint32 ZoneBlockCount = 98;
    optional uint32 HotZoneRequestCountFactor = 99;
    optional uint32 ColdZoneRequestCountFactor = 100;

    // Enables/disables write request batching.
    optional bool WriteRequestBatchingEnabled = 101;

    // BlockList cache size (only for partition2).
    optional uint32 BlockListCacheSizePercentage = 102;

    // Max blobs to process in a single Cleanup op run.
    optional uint32 MaxBlobsToCleanup = 103;

    // Blob size limit in bytes.
    optional uint32 MaxBlobSize = 104;

    // Size of allocation unit for non-replicated SSD drives (in GiB).
    optional uint32 AllocationUnitNonReplicatedSSD = 105;

    // Performance per allocation unit for nonreplicated volumes.
    optional uint32 NonReplicatedSSDUnitReadBandwidth = 106;    // in MiB/s
    optional uint32 NonReplicatedSSDUnitWriteBandwidth = 107;   // in MiB/s
    optional uint32 NonReplicatedSSDMaxReadBandwidth = 108;     // in MiB/s
    optional uint32 NonReplicatedSSDMaxWriteBandwidth = 109;    // in MiB/s
    optional uint32 NonReplicatedSSDUnitReadIops = 110;
    optional uint32 NonReplicatedSSDUnitWriteIops = 111;
    optional uint32 NonReplicatedSSDMaxReadIops = 112;
    optional uint32 NonReplicatedSSDMaxWriteIops = 113;

    // Compaction type.
    optional ECompactionType SSDCompactionType = 114;
    optional ECompactionType HDDCompactionType = 115;

    // Enables approximate garbage compaction for partition v1.
    optional bool V1GarbageCompactionEnabled = 116;

    // Enables digest calculation & logging for some blocks.
    optional bool BlockDigestsEnabled = 117;

    // Partition2 index structures conversion attempt time interval (in ms).
    optional uint32 IndexStructuresConversionAttemptInterval = 118;

    // Calculate block digests for the following percentage of blocks in each
    // block group.
    optional uint32 DigestedBlocksPercentage = 119;

    // If there is more garbage in some range than this limit, compact it.
    // Measured in percents (similar to CompactionGarbageThreshold).
    optional uint32 CompactionRangeGarbageThreshold = 120;

    // Limits the number of affected blocks sent from compaction to addblobs.
    optional uint32 MaxAffectedBlocksPerCompaction = 121;

    // Real performance per allocation unit.
    optional uint32 RealSSDUnitReadBandwidth = 122;     // in MiB/s
    optional uint32 RealSSDUnitWriteBandwidth = 123;    // in MiB/s
    optional uint32 RealSSDUnitReadIops = 124;
    optional uint32 RealSSDUnitWriteIops = 125;
    optional uint32 RealHDDUnitReadBandwidth = 126;     // in MiB/s
    optional uint32 RealHDDUnitWriteBandwidth = 127;    // in MiB/s
    optional uint32 RealHDDUnitReadIops = 128;
    optional uint32 RealHDDUnitWriteIops = 129;

    // Period (in milliseconds) between recycling retired nonreplicated disks.
    optional uint32 NonReplicatedDiskRecyclingPeriod = 130;

    // Compaction delay settings.
    optional uint32 MaxCompactionDelay = 131;   // in ms
    optional uint32 MinCompactionDelay = 132;   // in ms
    optional uint32 CompactionScoreHistorySize = 133;

    // Volume preemption strategy.
    optional EVolumePreemptionType VolumePreemptionType = 134;

    // CPU load percentage to move volumes from host.
    optional uint32 PreemptionPushPercentage = 135;

    // CPU load percentage to move volumes to host.
    optional uint32 PreemptionPullPercentage = 136;

    // Partition tablet version to be used for new volumes.
    optional uint32 DefaultTabletVersion = 137;

    // Max number of intervals stored in RangeMap for each blob (v2 only).
    optional uint32 MaxRangesPerBlob = 138;

    // Cleanup delay settings.
    optional uint32 MaxCleanupDelay = 139;  // in ms
    optional uint32 MinCleanupDelay = 140;  // in ms
    optional uint32 CleanupScoreHistorySize = 141;

    // Allow to change channel pool kinds upon volume resizing.
    optional bool PoolKindChangeAllowed = 142;

    // If set, service/volume will acquire devices for mounted volumes.
    optional bool AcquireNonReplicatedDevices = 143;

    // Inflight limit for IO requests.
    optional uint32 NonReplicatedInflightLimit = 144;

    // Max disks per placement group.
    optional uint32 MaxDisksInPlacementGroup = 145;

    // Max placement partitions per group.
    optional uint32 MaxPlacementPartitionCount = 295;

    // Max disks per placement group with partition placement strategy.
    optional uint32 MaxDisksInPartitionPlacementGroup = 296;

    // Overrides WriteBlobThreshold for SSD volumes.
    optional uint32 WriteBlobThresholdSSD = 146;

    // DiskRegistry destroys broken disks after this period of time.
    optional uint32 BrokenDiskDestructionDelay = 147;   // in ms

    // Volume mount history duration.
    optional uint32 VolumeHistoryDuration = 148;    // in ms

    // Number of maximum blob count per range.
    optional uint32 SSDMaxBlobsPerRange = 149;
    optional uint32 HDDMaxBlobsPerRange = 150;

    // Just drop fresh blocks upon Flush, don't save them as blobs (debug flag).
    optional bool FlushToDevNull = 151;

    // Max Compaction/Cleanup exec time per second.
    optional uint32 MaxCompactionExecTimePerSecond = 152;   // in ms
    optional uint32 MaxCleanupExecTimePerSecond = 153;  // in ms

    // Don't automatically enqueue garbage collection upon partition startup.
    optional bool DontEnqueueCollectGarbageUponPartitionStartup = 154;

    optional uint32 NonReplicatedDiskRepairTimeout = 155;

    // New volumes will be created with partition count proportional to their size.
    optional uint64 BytesPerPartition = 156;

    // Bytes per stripe (applicable for multipartition volumes).
    optional uint32 BytesPerStripe = 157;

    // Max partitions per volume.
    optional uint32 MaxPartitionsPerVolume = 158;

    // Min timeout for agent to restore connection (in milliseconds).
    optional uint32 NonReplicatedAgentMinTimeout = 159;

    // Timeout for DR -> DA requests (in milliseconds).
    optional uint32 AgentRequestTimeout = 160;

    // Timeout before allowing infra to withdraw our agents/devices.
    optional uint32 NonReplicatedInfraTimeout = 161;

    // Timeout for nonrepl partition -> DA requests.
    // optional uint32 NonReplicatedRequestTimeout = 162; // obsolete

    // CompactionScore limit after which compaction throttling is disabled.
    optional uint32 CompactionScoreLimitForThrottling = 163;

    // CleanupQueueBytes limit after which cleanup throttling is disabled.
    optional uint64 CleanupQueueBytesLimitForThrottling = 164;

    // The desired byte count read/written by a compaction run.
    optional uint64 TargetCompactionBytesPerOp = 165;

    // Max skipped blobs during range compaction.
    optional uint32 MaxSkippedBlobsDuringCompaction = 166;

    // MaxBlobsPerRange overrides for partition v2.
    optional uint32 SSDV2MaxBlobsPerRange = 167;
    optional uint32 HDDV2MaxBlobsPerRange = 168;

    // Enables incremental compaction for v1 tablets.
    optional bool IncrementalCompactionEnabled = 169;
    // Compaction in partition v1 will generate sparse merged blobs instead of
    // mixed blobs if this flag is set.
    // optional bool UseSparseMergedBlobs = 170; // obsolete

    // Enables some optimizations for small requests (affects partition v2 only).
    optional bool OptimizeForShortRanges = 171;

    // Consecutive timeout limit after which nr device is considered unavailable.
    // optional uint32 MaxConsecutiveDeviceTimeouts = 172; // obsolete

    // Max blobs and blocks processed by a single v2 garbage compaction iteration.
    optional uint32 CompactionGarbageBlobLimit = 173;
    optional uint32 CompactionGarbageBlockLimit = 174;

    // User data may be dumped on some monitoring pages if this flag is set.
    // See NBS-1726
    optional bool UserDataDebugDumpAllowed = 175;

    // Fresh channels configuration.
    optional string HDDFreshChannelPoolKind = 176;
    optional string SSDFreshChannelPoolKind = 177;
    optional string HybridFreshChannelPoolKind = 178;

    // Number of fresh channels per partition.
    optional uint32 FreshChannelCount = 179;

    // Enables fresh channel write requests.
    optional bool FreshChannelWriteRequestsEnabled = 180;

    // Min timeout for nonrepl partition -> DA SSD requests.
    optional uint32 NonReplicatedMinRequestTimeoutSSD = 181;

    // Max timeout for nonrepl partition -> DA SSD requests.
    optional uint32 NonReplicatedMaxRequestTimeoutSSD = 182;

    // Max timed out state duration after which nr device is considered unavailable.
    optional uint32 MaxTimedOutDeviceStateDuration = 183;

    // Run GC barriers for all channels in tablet history.
    // optional bool CleanupPartitionChannelsAtStartup = 184; // obsolete

    // Run GC soft barriers for all channels in tablet history (v2 only).
    optional bool RunV2SoftGcAtStartup = 185;

    // Lifetime of deleted checkpoint in checkpoints history.
    optional uint32 DeletedCheckpointHistoryLifetime = 186;

    // Enables creation of multipartition volumes.
    optional bool MultipartitionVolumesEnabled = 187;

    // Allow to start migration for non-replicated SSD drives.
    optional bool NonReplicatedMigrationStartAllowed = 188;

    // Current migration index will be saved every N blocks.
    // Affects only nonrepl volumes.
    optional uint32 MigrationIndexCachingInterval = 189;

    // Flush threshold for fresh blobs count in fresh channel.
    optional uint32 FreshBlobCountFlushThreshold = 190;

    // Max bandwidth used by migration in MiB/s (actual bandwidth is x2 due to
    // the need to read and write).
    optional uint32 MaxMigrationBandwidth = 191;

    // Expected DiskAgent size in AUs. Used to throttle migration proportionally
    // to the agent share allocated to the volume that's being migrated.
    optional uint32 ExpectedDiskAgentSize = 192;

    // Overrides BytesPerPartition for network-ssd volumes.
    optional uint64 BytesPerPartitionSSD = 193;

    // Period after which E_IO becomes silent.
    // optional uint32 NonReplicatedIOFadingDuration = 194; // obsolete

    // Placement group alert period.
    optional uint32 PlacementGroupAlertPeriod = 195;

    // Sets initial binding to REMOTE to avoid starting all volumes at once
    // upon server restart. Local volumes will be restarted locally one by one
    // after initial mount.
    // optional bool TwoStageLocalMountEnabled = 196; // obsolete

    // Allow to create load actor.
    optional bool EnableLoadActor = 197;

    // CpuMatBenchNs system pool threshold for volume balancer.
    optional uint64 CpuMatBenchNsSystemThreshold = 198;

    // CpuMatBenchNs user pool threshold for volume balancer.
    optional uint64 CpuMatBenchNsUserThreshold = 199;

    // Disables NRD migration in volume actor.
    optional bool NonReplicatedVolumeMigrationDisabled = 200;

    // Maximum number of migrations running in parallel.
    // Max value is selected between this limit and
    // MaxNonReplicatedDeviceMigrationPercentageInProgress * deviceCount.
    optional uint32 MaxNonReplicatedDeviceMigrationsInProgress = 201;

    // Enables extra diagnostics by dumping block commitIds.
    optional bool DumpBlockCommitIdsIntoProfileLog = 203;

    // Uses the first 4 bytes of the block as its digest.
    optional bool UseTestBlockDigestGenerator = 204;

    // Enables conversion of rangeMap into mixedIndex for partition v2.
    optional bool EnableConversionIntoMixedIndexV2 = 205;

    // Number of disks to be reported to YDB in a single request.
    optional uint32 StatsUploadDiskCount = 206;

    // Retry timeout for YDB stats.
    optional uint32 StatsUploadRetryTimeout = 207;

    // Number of volume history records per monitoring page.
    optional uint32 VolumeHistoryCacheSize = 208;

    // Duration of two stage local mount after start.
    // optional uint32 TwoStageLocalMountDuration = 209; // obsolete

    // Start all mounted volumes remotely.
    optional bool RemoteMountOnly = 210;

    // Max number of volumes started locally.
    optional uint32 MaxLocalVolumes = 211;

    // Flush threshold for fresh blob byte count.
    optional uint32 FreshBlobByteCountFlushThreshold = 212;

    // Max block count in one transaction for updating logicalUsedBlocks.
    optional uint32 LogicalUsedBlocksUpdateBlockCount = 213;

    // Grace period before making next attempt to update volume config
    optional uint32 DiskRegistryVolumeConfigUpdatePeriod = 214;

    // Enables extra diagnostics by dumping blob updates.
    optional bool DumpBlobUpdatesIntoProfileLog = 215;

    // Reassign request retry timeout in milliseconds.
    optional uint32 ReassignRequestRetryTimeout = 216;

    // Parameters used for calculating the metrics
    // Maximum bandwidth on group
    // for SSD
    optional string CommonSSDPoolKind = 217;
    optional uint64 MaxSSDGroupWriteIops = 218;
    optional uint64 MaxSSDGroupWriteBandwidth = 219;
    optional uint64 MaxSSDGroupReadIops = 220;
    optional uint64 MaxSSDGroupReadBandwidth = 221;
    // for HDD
    optional string CommonHDDPoolKind = 222;
    optional uint64 MaxHDDGroupWriteIops = 223;
    optional uint64 MaxHDDGroupWriteBandwidth = 224;
    optional uint64 MaxHDDGroupReadIops = 225;
    optional uint64 MaxHDDGroupReadBandwidth = 226;
    // for OverlayDisk
    optional string CommonOverlayPrefixPoolKind = 227;

    // Enables mixed index cache for partition v1.
    optional bool MixedIndexCacheV1Enabled = 228;

    // Maximum number of compaction ranges to cache for partition v1 network-ssd.
    optional uint32 MixedIndexCacheV1SizeSSD = 229;

    // Size of allocation unit for mirror2 SSD drives (in GiB).
    optional uint32 AllocationUnitMirror2SSD = 230;

    // Performance per allocation unit for mirror2 volumes.
    optional uint32 Mirror2SSDUnitReadBandwidth = 231;    // in MiB/s
    optional uint32 Mirror2SSDUnitWriteBandwidth = 232;   // in MiB/s
    optional uint32 Mirror2SSDMaxReadBandwidth = 233;     // in MiB/s
    optional uint32 Mirror2SSDMaxWriteBandwidth = 234;    // in MiB/s
    optional uint32 Mirror2SSDUnitReadIops = 235;
    optional uint32 Mirror2SSDUnitWriteIops = 236;
    optional uint32 Mirror2SSDMaxReadIops = 237;
    optional uint32 Mirror2SSDMaxWriteIops = 238;

    // Number of replicas for mirror2 disks.
    optional uint32 Mirror2DiskReplicaCount = 239;

    optional uint32 MaxReadBlobErrorsBeforeSuicide = 240;

    // Interval between throttler state updates in local db (in milliseconds).
    optional uint32 ThrottlerStateWriteInterval = 241;

    // Reject mount instead of trying to start volume locally
    // when AddClient request times out.
    optional bool RejectMountOnAddClientTimeout = 242;

    // Timeout for notify disks request (in milliseconds).
    optional uint32 NonReplicatedVolumeNotificationTimeout = 243;

    // Enables persistent backup for tablet boot infos.
    optional string TabletBootInfoBackupFilePath = 244;
    // In fallback mode, all requests to Hive are served from backup.
    optional bool HiveProxyFallbackMode = 245;
    // Enables persistent backup for tablet path descriptions.
    optional string PathDescriptionBackupFilePath = 246;
    // In fallback mode, all requests to SchemeShard are served from backup.
    optional bool SSProxyFallbackMode = 247;

    // Max acceptable number of cpus we are waiting for (measured in %).
    // If excceeded. balancer starts pushing volumes to svms.
    optional uint32 CpuLackThreshold = 248;

    // Initial pull timeout for preempted volumes.
    optional uint32 InitialPullDelay = 249;

    // Size of allocation unit for local SSD (in GiB).
    // optional uint32 AllocationUnitLocalSSD = 250; // obsolete

    // Rdma port @ DiskAgent.
    optional uint32 RdmaTargetPort = 251;

    // Use rdma for main NRD datapath.
    optional bool UseNonreplicatedRdmaActor = 252;

    // Size of allocation unit for mirror3 SSD drives (in GiB).
    optional uint32 AllocationUnitMirror3SSD = 253;

    // Performance per allocation unit for mirror3 volumes.
    optional uint32 Mirror3SSDUnitReadBandwidth = 254;    // in MiB/s
    optional uint32 Mirror3SSDUnitWriteBandwidth = 255;   // in MiB/s
    optional uint32 Mirror3SSDMaxReadBandwidth = 256;     // in MiB/s
    optional uint32 Mirror3SSDMaxWriteBandwidth = 257;    // in MiB/s
    optional uint32 Mirror3SSDUnitReadIops = 258;
    optional uint32 Mirror3SSDUnitWriteIops = 259;
    optional uint32 Mirror3SSDMaxReadIops = 260;
    optional uint32 Mirror3SSDMaxWriteIops = 261;

    // Number of replicas for mirror3 disks.
    optional uint32 Mirror3DiskReplicaCount = 262;

    // Timeout for secure erase (in milliseconds).
    optional uint32 NonReplicatedSecureEraseTimeout = 263;

    // Number of ranges to process in a single Compaction run.
    optional uint32 CompactionRangeCountPerRun = 264;

    // Specifies whether to use CompactionRangeCountPerRun.
    optional bool BatchCompactionEnabled = 265;

    // Timeout before allowing infra to withdraw our unavailable agents.
    optional uint32 NonReplicatedInfraUnavailableAgentTimeout = 266;

    // Use rdma in volumes by default.
    optional bool UseRdma = 267;

    // Hive min timeout for tablet boot requests.
    optional uint32 MinExternalBootRequestTimeout = 268;

    // Hive timeout increment for tablet boot requests.
    optional uint32 ExternalBootRequestTimeoutIncrement = 269;

    // Hive max timeout for tablet boot requests.
    optional uint32 MaxExternalBootRequestTimeout = 270;

    // Max timeout for agent to restore connection (in milliseconds).
    optional uint32 NonReplicatedAgentMaxTimeout = 271;

    // The time interval after which one agent disconnect is completely
    // recovered in the dynamic reject timeout multiplier.
    optional uint32 NonReplicatedAgentDisconnectRecoveryInterval = 272;

    // The multiplier that controls the growth rate of the dynamic agent reject
    // timeout.
    optional double NonReplicatedAgentTimeoutGrowthFactor = 273;

    // Do not suspend new non default (local ssd etc) devices.
    optional bool NonReplicatedDontSuspendDevices = 274;

    // Timeout increment for resending AddClient during mount.
    optional uint32 AddClientRetryTimeoutIncrement = 275;

    // Enables blob patching during compaction.
    optional bool BlobPatchingEnabled = 276;

    // The number of operations into which the DR
    // will split the restore transaction.
    optional uint32 DiskRegistrySplitTransactionCounter = 277;

    // The time of making backups disk registry in milliseconds.
    optional uint64 DiskRegistryBackupPeriod = 278;

    // Folder for disk registry backups.
    optional string DiskRegistryBackupDirPath = 279;

    // Expected client backoff timeout increment in milliseconds - used to
    // calculate some internal timeouts.
    // optional uint32 ExpectedClientBackoffIncrement = 280; // obsolete

    // Maximum number of pending deallocation requests per one disk.
    optional uint32 MaxNonReplicatedDiskDeallocationRequests = 281;

    // Lifetime of objects in nonrepl metrics cache in milliseconds.
    optional uint64 DiskRegistryMetricsCachePeriod = 282; // deprecated

    // Value for the 'host' label.
    optional string DiskRegistryCountersHost = 283;

    // Maximum allowed fresh byte count after which we start to reject writes.
    optional uint32 FreshByteCountHardLimit = 284;

    // Interval to postpone volume push/pull.
    optional uint32 BalancerActionDelayInterval = 285;

    // Enable resync feature for mirrored partitions.
    optional bool UseMirrorResync = 286;

    // Force resync start for mirrored partitions.
    optional bool ForceMirrorResync = 287;

    // Current resync index will be saved every N blocks.
    // Affects only mirror volumes.
    optional uint32 ResyncIndexCachingInterval = 288;

    // Resync will start upon AddClient / volume reboot after the specified
    // period of client inactivity in milliseconds.
    // Affects only mirror volumes.
    optional uint32 ResyncAfterClientInactivityInterval = 289;

    // File to store the list of volumes preempted from monitoring.
    optional string ManuallyPreemptedVolumesFile = 290;

    // Periodicity of volume liveness check in ManuallyPreemptedVolumesFile in
    // milliseconds.
    optional uint64 ManuallyPreemptedVolumeLivenessCheckPeriod = 291;

    // Half-decay interval for cumulative load counters used for balancing in
    // the discovery component (in milliseconds).
    optional uint32 PingMetricsHalfDecayInterval = 292;

    // Disable manually preempted volumes tracking. Used during
    // nbs restart for NBS2.
    optional bool DisableManuallyPreemptedVolumesTracking = 293;

    // Disable starting partitions for gc at volume start
    optional bool DisableStartPartitionsForGc = 294;

    // Enables adding of unconfirmed blobs to speed up writing.
    optional bool AddingUnconfirmedBlobsEnabled = 297;

    // Blob compression experiment params. See NBS-3949.
    optional uint32 BlobCompressionRate = 298;
    optional string BlobCompressionCodec = 299;

    // If set, writes will be additionally throttled by disk space score
    // backpressure feature.
    optional bool DiskSpaceScoreThrottlingEnabled = 300;

    // Allow to start migration for mirrored SSD drives.
    optional bool MirroredMigrationStartAllowed = 301;

    // Validate S/N
    optional bool SerialNumberValidationEnabled = 302;

    // List of FQDNs of known spare nodes.
    repeated string KnownSpareNodes = 303;

    // Probability (0 .. 100) of being the spare node.
    optional uint32 SpareNodeProbability = 304;

    // Min percentage of reassignable channels after which reassign requests
    // are sent. Does not apply if writes are not allowed because of channel
    // flags.
    optional uint32 ReassignChannelsPercentageThreshold = 305;

    // Max diff percentage for blob patching
    optional uint32 MaxDiffPercentageForBlobPatching = 306;

    // DiskRegistry allows usage of automatically replaced devices after this
    // period of time.
    optional uint32 AutomaticallyReplacedDevicesFreezePeriod = 307; // in ms

    // Defines the rejection behavior for overlapped requests from the past.
    optional bool RejectLateRequestsAtDiskAgentEnabled = 308;

    // Attached disk destruction is allowed after this period of client inactivity (ms).
    optional uint32 AttachedDiskDestructionTimeout = 309;

    // Assign unique identifiers to all zero and write requests in TVolumeActor.
    optional bool AssignIdToWriteAndZeroRequestsEnabled = 310;

    // MaxBlobsPerDisk will be proportional to the disk size.
    optional uint32 SSDMaxBlobsPerUnit = 314;
    optional uint32 HDDMaxBlobsPerUnit = 315;

    // Cleanup interval for disk registry param overrides for agents.
    optional uint32 AgentListExpiredParamsCleanupInterval = 316;

    // Size of allocation unit for non-replicated HDD drives (in GiB).
    optional uint32 AllocationUnitNonReplicatedHDD = 317;

    // Performance per allocation unit for nonreplicated volumes.
    optional uint32 NonReplicatedHDDUnitReadBandwidth = 318;    // in MiB/s
    optional uint32 NonReplicatedHDDUnitWriteBandwidth = 319;   // in MiB/s
    optional uint32 NonReplicatedHDDMaxReadBandwidth = 320;     // in MiB/s
    optional uint32 NonReplicatedHDDMaxWriteBandwidth = 321;    // in MiB/s
    optional uint32 NonReplicatedHDDUnitReadIops = 322;
    optional uint32 NonReplicatedHDDUnitWriteIops = 323;
    optional uint32 NonReplicatedHDDMaxReadIops = 324;
    optional uint32 NonReplicatedHDDMaxWriteIops = 325;

    // DiskRegistry/Agent pool name to use for nonreplicated hdd disks.
    optional string NonReplicatedHDDPoolName = 326;

    // We will allow agent/device maintenance if it breaks no more than this
    // number of placement group partitions in each group.
    optional uint32 MaxBrokenHddPlacementGroupPartitionsAfterDeviceRemoval = 327;

    // Sets maximum number of automatic device replacements per hour. If this
    // limit is reached no more automatic replacements are going to happen -
    // instead the diskId + deviceId pairs will be logged and a critical event
    // will be reported. Current replacement rate is reset upon DiskRegistry
    // tablet restart.
    optional uint32 MaxAutomaticDeviceReplacementsPerHour = 328;

    // Tenant hive tablet id different from root to be used by hive proxy.
    // Should be configured once and for the lifetime of the cluster.
    optional uint64 TenantHiveTabletId = 329;

    // Limits the number of dirty devices per DeviceName that are erased in
    // parallel.
    optional uint32 MaxDevicesToErasePerDeviceNameForDefaultPoolKind = 330;
    optional uint32 MaxDevicesToErasePerDeviceNameForLocalPoolKind = 331;
    optional uint32 MaxDevicesToErasePerDeviceNameForGlobalPoolKind = 332;

    // Percentage for batch compaction size increasing
    optional uint32 CompactionCountPerRunIncreasingThreshold = 333;

    // Percentage for batch compaction size decreasing
    optional uint32 CompactionCountPerRunDecreasingThreshold = 334;

    // Max number of ranges to process in a single Compaction run
    optional uint32 MaxCompactionRangeCountPerRun = 335;

    // Period of compaction changing (in ms)
    optional uint32 CompactionCountPerRunChangingPeriod = 336;

    // Timeout in milliseconds before switching all disks associated
    // with the disconnected agent to read only mode
    optional uint32 NonReplicatedDiskSwitchToReadOnlyTimeout = 337;

    // Min timeout for nonrepl partition -> DA HDD requests.
    optional uint32 NonReplicatedMinRequestTimeoutHDD = 338;

    // Max timeout for nonrepl partition -> DA HDD requests.
    optional uint32 NonReplicatedMaxRequestTimeoutHDD = 339;

    // Placeholders for legacy params that are still used in configs.
    optional uint32 NonReplicatedMinRequestTimeout = 340;
    optional uint32 NonReplicatedMaxRequestTimeout = 341;

    optional uint64 MaxChangedBlocksRangeBlocksCount = 342;

    // Maximum number of migrations running in parallel as a percentage of the
    // devices belonging to the same pool as the source device.
    // Max value is selected between this limit and
    // MaxNonReplicatedDeviceMigrationsInProgress.
    optional uint32 MaxNonReplicatedDeviceMigrationPercentageInProgress = 343;

    // Create shadow disks for checkpoints for DiskRegistry-based disks.
    optional bool UseShadowDisksForNonreplDiskCheckpoints = 344;

    // Calculate crc32c checksums for blocks in the half-interval [0, X) upon
    // write and store these checksums in local db.
    // Affects only blobstorage-based disks.
    optional uint64 DiskPrefixLengthWithBlockChecksumsInBlobs = 345;

    // Read BlobMeta upon ReadBlocks, calculate crc32c checksums for the fetched
    // blocks and compare these checksums to the checksums from BlobMeta.
    //
    // IMPORTANT: Compaction verifies block checksums for the blocks affected by
    // it regardless of this flag!
    optional bool CheckBlockChecksumsInBlobsUponRead = 346;

    // Enables runtime config update tool.
    optional bool ConfigsDispatcherServiceEnabled = 347;

    // Amount of time after which the disk registry will not send cached disk
    // acquire request on the disk agent restart (ms).
    // Note: it should be larger than ClientRemountPeriod, otherwise it's
    // useless.
    optional uint32 CachedAcquireRequestLifetime = 348;

    // Limits unconfirmed (and confirmed but not added to the index) blob count.
    optional uint32 UnconfirmedBlobCountHardLimit = 349;

    // These are duplicates of "CachedConfigPath" and "CachedSessionsPath"
    // fields in the "TDiskAgentConfig" and here just to ease deployment of the
    // caches. Disk agent config has higher priority than storage config.
    optional string CachedDiskAgentConfigPath = 350;
    optional string CachedDiskAgentSessionsPath = 351;

    // Max bandwidth used for shadow disk fill in MiB/s (actual bandwidth is x2
    // due to the need to read and write).
    optional uint32 MaxShadowDiskFillBandwidth = 352;
    // Minimum delay between shadow disk acquire attempts when writes to the
    // source disk are blocked (in ms).
    optional uint32 MinAcquireShadowDiskRetryDelayWhenBlocked = 353;
    // Maximum delay between shadow disk acquire attempts when writes to the
    // source disk are blocked (in ms).
    optional uint32 MaxAcquireShadowDiskRetryDelayWhenBlocked = 354;
    // Minimum delay between shadow disk acquire attempts when writes to the
    // source disk are not blocked (in ms).
    optional uint32 MinAcquireShadowDiskRetryDelayWhenNonBlocked = 355;
    // Maximum delay between shadow disk acquire attempts when writes to the
    // source disk are not blocked (in ms).
    optional uint32 MaxAcquireShadowDiskRetryDelayWhenNonBlocked = 356;
    // Timeout for attempts to acquire the shadow disk when writes to the source
    // disk are blocked (in ms).
    optional uint32 MaxAcquireShadowDiskTotalTimeoutWhenBlocked = 357;
    // Timeout for attempts to acquire the shadow disk when writes to the source
    // disk are not blocked (in ms).
    optional uint32 MaxAcquireShadowDiskTotalTimeoutWhenNonBlocked = 358;

    // Max number of volume MetaHistory records displayed on volume monpage.
    optional uint32 VolumeMetaHistoryDisplayedRecordLimit = 359;

    // Duration of attempts to connect to tablet for cached tablets before
    // switching to describe volume (in ms).
    optional uint32 VolumeProxyCacheRetryDuration = 360;

    // Service actor self ping measurement interval. Used to evaluate
    // service actor load. Set in ms.
    optional uint32 ServiceSelfPingInterval = 361;

    // Max migration io depth.
    optional uint32 MaxMigrationIoDepth = 362;

    // Max shadow disk fill io depth.
    optional uint32 MaxShadowDiskFillIoDepth = 363;

    // Enable data scrubbing for mirrored disks.
    optional bool DataScrubbingEnabled = 364;
    // Interval between scrubbing ranges in milliseconds.
    optional uint32 ScrubbingInterval = 365;

    // Optimize all-zeros blocks transmission over the network.
    optional bool OptimizeVoidBuffersTransferForReadsEnabled = 366;

    // Number of volume history entries to cleanup per run.
    optional uint32 VolumeHistoryCleanupItemCount = 367;

    // The full bandwidth of the server for background operations,
    // which is used for migration and filling of shadow disks.
    // (actual bandwidth is x2 due to the need to read and write).
    optional uint32 BackgroundOperationsTotalBandwidth = 368;

    // Used inside TWaitDependentDisksToSwitchNodeActor to schedule retries.
    // Set in ms.
    optional uint32 WaitDependentDisksRetryRequestDelay = 369;

    // Timeout attempts of scrubbing range, if checksum mismatch was found.
    optional uint32 ScrubbingChecksumMismatchTimeout = 370;

    // Scrubbing bandwidth per 1 TiB in MiB/s.
    optional uint64 ScrubbingBandwidth = 371;

    // Max scrubbing bandwidth in MiB/s.
    optional uint64 MaxScrubbingBandwidth = 372;

    // Min scrubbing bandwidth in MiB/s.
    optional uint64 MinScrubbingBandwidth = 373;

    // Allow destruction only for those disks whose id matches one of the given prefixes.
    repeated string DestructionAllowedOnlyForDisksWithIdPrefixes = 374;

    // CMS actions such as "REMOVE_HOST" and "REMOVE_DEVICE" will attempt to
    // remove devices and the host from DR memory (including persistent storage).
    // optional bool CleanupDRConfigOnCMSActions = 375;  // obsolete

    // Resync range, if scrubbing found a mismatch.
    optional bool ResyncRangeAfterScrubbing = 376;

    // Delay that DR uses to wait unavailable agents to register before allowing
    // infra to deploy a host.
    optional uint32 IdleAgentDeployByCmsDelay = 377;

    // Dynamic node registration params.
    optional uint32 NodeRegistrationMaxAttempts = 378;
    optional uint32 NodeRegistrationTimeout = 379;   // in ms
    optional uint32 NodeRegistrationErrorTimeout = 380;  // in ms

    // auth token for node registration via ydb discovery api.
    optional string NodeRegistrationToken = 381;

    // TLS node registration details.
    optional string NodeRegistrationRootCertsFile = 382;
    optional NCloud.NProto.TCertificate NodeRegistrationCert = 383;

    // Node type
    optional string NodeType = 384;

    // settings for ydb config dispatcher service.
    optional NCloud.NProto.TConfigDispatcherSettings ConfigDispatcherSettings = 385;

    // The volume actor will compare meta before and after reallocation and
    // decide whether a lite reallocation is possible.
    optional bool AllowLiteDiskReallocations = 386;

    // Timeout between disks reallocations.
    optional uint32 DiskRegistryDisksNotificationTimeout = 387;

    // Whether the disk registry is allowed to allocate local disks while agent
    // is in warning state.
    // When enabled, the Disk Registry REMOVE_HOST CMS action will not "forget"
    // agents devices and will not suspend local devices. Instead, PURGE_HOST
    // should be used for these purposes. To override this see
    // "DiskRegistryCleanupConfigOnRemoveHost"
    optional bool DiskRegistryAlwaysAllocatesLocalDisks = 388;

    optional uint32 BlobStorageAsyncGetTimeoutHDD = 389;
    optional uint32 BlobStorageAsyncGetTimeoutSSD = 390;

    // Specifies the minimum number of replicas to read from in a mirrored disk
    // for every read request.
    // Values 0 and 1 mean the same thing - read from 1 replica.
    // Values greater than disk replica count also mean the same thing - read
    // from all replicas.
    optional uint32 MirrorReadReplicaCount = 391;

    // When enabled, the Disk Registry REMOVE_HOST CMS action will "forget"
    // agents devices and suspend local devices.
    optional bool DiskRegistryCleanupConfigOnRemoveHost = 392;

    // Enables the encryption at rest for Disk Registry based disks.
    optional bool EncryptionAtRestForDiskRegistryBasedDisksEnabled = 393;

    // Enabling direct copying of data between disk agents.
    optional bool UseDirectCopyRange = 394;

    // Disables the calculation of the FullPlacementGroups counter.
    optional bool DisableFullPlacementGroupCountCalculation = 395;

    // The percentage of agents that is acceptable to reject at the start.
    // If the number of agents that did not reconnect is higher than this
    // percentage, then the rejection of such agents does not occur - we assume
    // a connectivity failure in the cluster.
    optional double DiskRegistryInitialAgentRejectionThreshold = 396;

    // Enable buttons for agent/device state changing.
    optional bool EnableToChangeStatesFromDiskRegistryMonpage = 397;

    // Enable buttons for device state changing, when they in error state.
    optional bool EnableToChangeErrorStatesFromDiskRegistryMonpage = 398;
}
