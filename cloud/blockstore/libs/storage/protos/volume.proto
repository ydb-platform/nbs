syntax = "proto3";

package NCloud.NBlockStore.NProto;

option go_package = "github.com/ydb-platform/nbs/cloud/blockstore/libs/storage/protos";

import "cloud/blockstore/config/storage.proto";

import "cloud/blockstore/public/api/protos/headers.proto";
import "cloud/blockstore/public/api/protos/volume.proto";

import "cloud/storage/core/protos/error.proto";
import "cloud/storage/core/protos/media.proto";
import "cloud/storage/core/protos/trace.proto";

////////////////////////////////////////////////////////////////////////////////
// Follower volume link update action

enum ELinkAction
{
    LINK_ACTION_CREATE = 0;
    LINK_ACTION_DESTROY = 1;
};

////////////////////////////////////////////////////////////////////////////////
// Volume client info.

message TVolumeClientInfo
{
    // Client identifier.
    string ClientId = 1;

    // Volume access mode.
    EVolumeAccessMode VolumeAccessMode = 2;

    // Volume mount mode.
    EVolumeMountMode VolumeMountMode = 3;

    // Obsolete, use MountFlags.
    bool ThrottlingDisabled = 4;

    // Client disconnect timestamp (0 for active clients).
    uint64 DisconnectTimestamp = 5;

    // Mount seq number.
    uint64 MountSeqNumber = 6;

    // Host the client came from.
    string Host = 7;

    // Mount flags.
    uint32 MountFlags = 8;

    // Last activity timestamp. Valid only for resyncable volumes.
    uint64 LastActivityTimestamp = 9;

    // Instance id (if this client is a VM).
    string InstanceId = 10;

    // Mount sequential number for disk filling.
    // We don't allow clients with old sequential number to mount disk for read/write
    // in order to prevent data corruption during disk filling.
    uint64 FillSeqNumber = 11;

    // We don't allow clients with wrong fill generation to mount disk for read/write
    // in order to prevent data corruption during disk filling.
    uint64 FillGeneration = 12;
}

////////////////////////////////////////////////////////////////////////////////
// Add client to volume request/response.

message TAddClientRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Label of volume to connect to.
    string DiskId = 2;

    // Volume access mode.
    EVolumeAccessMode VolumeAccessMode = 3;

    // Volume mount mode.
    EVolumeMountMode VolumeMountMode = 4;

    // Obsolete, use MountFlags.
    bool ThrottlingDisabled = 5;

    // Expected mount seq number.
    uint64 MountSeqNumber = 6;

    // Host the client came from.
    string Host = 7;

    // Mount flags.
    uint32 MountFlags = 8;

    // Instance id (if this client is a VM).
    string InstanceId = 9;

    // Expected mount seq number for disk filling.
    uint64 FillSeqNumber = 10;

    // Expected fill generation.
    uint64 FillGeneration = 11;
}

message TAddClientResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Volume tablet identifier.
    uint64 TabletId = 2;

    // Client identifier.
    string ClientId = 3;

    // Volume information.
    TVolume Volume = 4;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 5;

    // Expected pipe generation. Deprecated.
    uint32 ExpectedPipeGeneration = 6;

    // Signal that volume tablet should be restarted.
    bool ForceTabletRestart = 7;
}

////////////////////////////////////////////////////////////////////////////////
// Remove client from volume request/response.

message TRemoveClientRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Label of volume to disconnect from.
    string DiskId = 2;

    // Is request coming from monitoring
    bool IsMonRequest = 3;
}

message TRemoveClientResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Volume tablet identifier.
    uint64 TabletId = 2;

    // Label of volume attempted to be connected to.
    string DiskId = 3;

    // Client identifier.
    string ClientId = 4;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 5;
}

////////////////////////////////////////////////////////////////////////////////
// Wait ready request/response.

message TWaitReadyRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Label of volume to wait readiness of.
    string DiskId = 2;
}

message TWaitReadyResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Volume information.
    TVolume Volume = 2;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 3;
}

////////////////////////////////////////////////////////////////////////////////
// GetUsedBlocks request/response

message TGetUsedBlocksRequest {
    // Optional request headers.
    THeaders Headers = 1;

    // Label of volume to get partition info from.
    string DiskId = 2;
}

// Serialized bitmap for this chunk.
message TUsedBlockData {
    uint32 ChunkIdx = 1;
    bytes Data = 2;
}

message TGetUsedBlocksResponse {
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 2;

    repeated TUsedBlockData UsedBlocks = 3;
}
////////////////////////////////////////////////////////////////////////////////
// GetPartitionInfo request/response.

message TGetPartitionInfoRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Label of volume to get partition info from.
    string DiskId = 2;

    // Partition id.
    uint32 PartitionId = 3;
}

message TGetPartitionInfoResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Partition info data in JSON format.
    string Payload = 2;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 3;
}

////////////////////////////////////////////////////////////////////////////////
// CompactRange request/response.

message TCompactRangeRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Label of volume to compact.
    string DiskId = 2;

    // Start block range index.
    uint64 StartIndex = 3;

    // Number of blocks in compaction range.
    uint32 BlocksCount = 4;

    // Additional flags. Do we need it?
    uint32 Flags = 5;

    // Explicitly assigned id by volume in case of multiple partitions.
    string OperationId = 6;
}

message TCompactRangeResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Compact operation reference
    string OperationId = 2;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 3;
}

////////////////////////////////////////////////////////////////////////////////
// CompactStatus request/response.

message TGetCompactionStatusRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Label of volume to compact.
    string DiskId = 2;

    // Compact operation reference.
    string OperationId = 3;

    // Additional flags. Do we need it?
    uint32 Flags = 4;
}

message TGetCompactionStatusResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Number of processed ranges.
    uint32 Progress = 2;

    // Total number of ranges.
    uint32 Total = 3;

    // Flag if operation completed.
    bool IsCompleted = 4;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 5;
}

////////////////////////////////////////////////////////////////////////////////
// ReallocateDisk request/response.

message TReallocateDiskRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Label of volume.
    string DiskId = 2;
}

message TReallocateDiskResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 2;
}

////////////////////////////////////////////////////////////////////////////////
// UpdateUsedBlocks request/response.

message TUpdateUsedBlocksRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Label of volume.
    string DiskId = 2;

    // Blocks.
    repeated uint64 StartIndices = 3;
    repeated uint32 BlockCounts = 4;

    // Set or unset.
    bool Used = 5;
}

message TUpdateUsedBlocksResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 2;
}

////////////////////////////////////////////////////////////////////////////////
// TCachedPartStats

message TCachedPartStats
{
    uint64 MixedBytesCount = 1;
    uint64 MergedBytesCount = 2;
    uint64 FreshBytesCount = 3;
    uint64 UsedBytesCount = 4;
    uint64 BytesCount = 5;
    uint64 CheckpointBytes = 6;
    uint32 CompactionScore = 7;
    uint32 CompactionGarbageScore = 8;
    uint64 CleanupQueueBytes = 9;
    uint64 GarbageQueueBytes = 10;
    uint64 ChannelHistorySize = 11;
    uint64 LogicalUsedBytesCount = 12;
    uint32 UnconfirmedBlobCount = 13;
    uint32 ConfirmedBlobCount = 14;
}

////////////////////////////////////////////////////////////////////////////////
// GetVolumeLoadInfo request/response

enum EVolumeBinding
{
    BINDING_NOT_SET = 0;
    BINDING_LOCAL = 1;
    BINDING_REMOTE = 2;
};

enum EPreemptionSource
{
    SOURCE_BALANCER = 0;
    SOURCE_INITIAL_MOUNT = 1;
    SOURCE_MANUAL = 2;
    SOURCE_NONE = 3;
};

message TVolumeBalancerDiskStats
{
    string DiskId = 1;
    string CloudId = 2;

    uint64 SystemCpu = 3;
    uint64 UserCpu = 4;

    string Host = 5;

    bool IsManuallyPreempted = 6;
    bool IsLocal = 7;

    EPreemptionSource PreemptionSource = 8;

    uint32 NumSystemThreads = 9;
    uint32 NumUserThreads = 10;

    string FolderId = 11;

    NCloud.NProto.EStorageMediaKind StorageMediaKind = 12;
}

message TGetVolumeLoadInfoRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Label of volume.
    string DiskId = 2;
}

message TGetVolumeLoadInfoResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    TVolumeBalancerDiskStats Stats = 2;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 3;
}

////////////////////////////////////////////////////////////////////////////////
// Checkpoint data deletion. Doesn't delete checkpointId->commitId mapping.

message TDeleteCheckpointDataRequest
{
    // Optional request headers.
    NProto.THeaders Headers = 1;

    // Label of the volume to delete checkpoint data from.
    string DiskId = 2;

    // Checkpoint identifier.
    string CheckpointId = 3;
}

message TDeleteCheckpointDataResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 2;
}

////////////////////////////////////////////////////////////////////////////////
// RebuildMetadata request/response.

enum ERebuildMetadataType
{
    USED_BLOCKS = 0;
    BLOCK_COUNT = 1;
}

////////////////////////////////////////////////////////////////////////////////
// RebuildMetadata request/response.

message TRebuildMetadataRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    string DiskId = 2;

    ERebuildMetadataType MetadataType = 3;

    uint32 BatchSize = 4;
}

message TRebuildMetadataResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 2;
}

////////////////////////////////////////////////////////////////////////////////
// GetRebuildMetadataStatus request/response.

message TMetadataRebuildProgress
{
    // Number of units processed so far.
    uint64 Processed = 1;

    // Total number of units to process.
    uint64 Total = 2;

    // Is operation completed.
    bool IsCompleted = 3;
}

message TGetRebuildMetadataStatusRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    string DiskId = 2;
}

message TGetRebuildMetadataStatusResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    TMetadataRebuildProgress Progress = 2;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 3;
}

////////////////////////////////////////////////////////////////////////////////
// ScanDisk request/response.

message TScanDiskRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Label of volume.
    string DiskId = 2;

    // Number of blobs per batch.
    uint32 BatchSize = 3;
}

message TScanDiskResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 2;
}

////////////////////////////////////////////////////////////////////////////////
// GetVolumeInfo request/response.

message TGetVolumeInfoRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Label of volume.
    string DiskId = 2;
}

message TGetVolumeInfoResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 2;

    TVolume Volume = 3;
}

////////////////////////////////////////////////////////////////////////////////
// UpdateVolumeParams request/response.

message TUpdateVolumeParamsMapValue
{
    string Value = 1;

    optional uint64 TtlMs = 2;
}

message TUpdateVolumeParamsRequest
{
    THeaders Headers = 1;

    string DiskId = 2;

    map<string, TUpdateVolumeParamsMapValue> VolumeParams = 3;
}

message TUpdateVolumeParamsResponse
{
    NCloud.NProto.TError Error = 1;

    NCloud.NProto.TTraceInfo Trace = 2;
}

////////////////////////////////////////////////////////////////////////////////
// ChangeStorageConfig request/response

message TChangeStorageConfigRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Label of volume to wait readiness of.
    string DiskId = 2;

    // Storage config
    NProto.TStorageServiceConfig StorageConfig = 3;

    // Merge with storage config from volume database
    optional bool MergeWithStorageConfigFromVolumeDB = 4;
}

message TChangeStorageConfigResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 2;

    // Result Storage config.
    NProto.TStorageServiceConfig StorageConfig = 3;
}

////////////////////////////////////////////////////////////////////////////////
// GetStorageConfig request/response.

message TGetStorageConfigRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Label of volume to query its storage config. Or empty to
    // query server storage config.
    string DiskId = 2;
}

message TGetStorageConfigResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 2;

    // Result Storage config.
    NProto.TStorageServiceConfig StorageConfig = 3;
}

////////////////////////////////////////////////////////////////////////////////
// GracefulShutdown request/response.

message TGracefulShutdownRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Label of volume to shutdown.
    string DiskId = 2;
}

message TGracefulShutdownResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 2;
}

////////////////////////////////////////////////////////////////////////////////
// CheckRange request/response.

message TCheckRangeRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Label of volume.
    string DiskId = 2;

    // First block index.
    uint64 StartIndex = 3;

    // Number of blobs per batch.
    uint64 BlocksCount = 4;

    // Is it necessary to calculate and include checksums in the response
    bool CalculateChecksums = 5;

    // Number of replicas to read from m3 disks.
    uint64 ReplicaCount = 6;
}

message TCheckRangeResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Status of ReadBlocks operation.
    NCloud.NProto.TError Status = 2;

    // Checksums of blocks
    repeated uint32 Checksums = 3;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 4;
}

////////////////////////////////////////////////////////////////////////////////
// Link volume request/response.

message TLinkLeaderVolumeToFollowerRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Leader volume.
    string DiskId = 2;

    // Follower volume.
    string FollowerDiskId = 3;

    // Leader volume shard Id.
    string LeaderShardId = 4;

    // Follower volume shard Id.
    string FollowerShardId = 5;
}

message TLinkLeaderVolumeToFollowerResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Uuid of created link.
    string LinkUUID = 2;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 3;
}

message TUpdateLinkOnFollowerRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Follower volume.
    string DiskId = 2;

    // Uuid of link.
    string LinkUUID = 3;

    // Reason of notification.
    ELinkAction Action = 4;

    // Leader volume.
    string LeaderDiskId = 5;

    // Leader volume shard.
    string LeaderShardId = 6;

    // Follower volume shard.
    string FollowerShardId = 7;
}

message TUpdateLinkOnFollowerResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 3;
}


////////////////////////////////////////////////////////////////////////////////
// Unlink volume request/response.

message TUnlinkLeaderVolumeFromFollowerRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Leader volume.
    string DiskId = 2;

    // Follower volume.
    string FollowerDiskId = 3;

    // Leader volume shard Id.
    string LeaderShardId = 4;

    // Follower volume shard Id.
    string FollowerShardId = 5;
}

message TUnlinkLeaderVolumeFromFollowerResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 2;
}
