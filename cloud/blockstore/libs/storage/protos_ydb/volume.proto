syntax = "proto3";

package NCloud.NBlockStore.NProto;

import "cloud/blockstore/libs/storage/protos/disk.proto";
import "cloud/blockstore/libs/storage/protos/part.proto";
import "cloud/blockstore/libs/storage/protos/volume.proto";
import "cloud/blockstore/public/api/protos/headers.proto";
import "cloud/blockstore/public/api/protos/volume.proto";
import "cloud/storage/core/protos/error.proto";
import "cloud/storage/core/protos/trace.proto";

import "contrib/ydb/core/protos/base.proto";
import "contrib/ydb/core/protos/blockstore_config.proto";

////////////////////////////////////////////////////////////////////////////////
// Volume config.

message TVolumeMeta
{
    // Partition configuration.
    TPartitionConfig Config = 1;

    // Partition tablets.
    repeated uint64 Partitions = 2;

    // Volume config received from schemeshard.
    NKikimrBlockStore.TVolumeConfig VolumeConfig = 3;

    // Volume config version.
    uint32 Version = 4;

    // Partition tablet version.
    uint32 TabletVersion = 5;

    // Devices for nonreplicated disks.
    repeated TDeviceConfig Devices = 6;

    // IO state.
    EVolumeIOMode IOMode = 7;

    // Nonreplicated migration configuration.
    repeated TDeviceMigration Migrations = 8;

    // Migration proceeded at least up to this index.
    uint64 MigrationIndex = 9;

    // IO state timestamp.
    uint64 IOModeTs = 10;

    // Mute IO errors after a while
    bool MuteIOErrors = 11;

    // Replicas for mirrored disks.
    repeated TReplica Replicas = 12;

    // Ids of recent replacement devices.
    repeated string FreshDeviceIds = 13;

    // Resync proceeded at least up to this index.
    uint64 ResyncIndex = 14;

    // Is resync needed.
    bool ResyncNeeded = 15;

    // Mount sequential number for disk filling.
    // We don't allow clients with old sequential number to mount disk for read/write
    // in order to prevent data corruption during disk filling.
    uint64 FillSeqNumber = 16;

    // A list of agents that lagging behind on writes. Used only for mirror
    // disks. An agent can exit this state if it starts to respond to requests,
    // or if the volume has been restarted/reallocated (i.e. the partition has
    // restarted), or if the DR has replaced all lagging devices.
    TLaggingAgentsInfo LaggingAgentsInfo = 17;

    // Whether active resync should emit critical events for found mismatches.
    bool AlertResyncChecksumMismatch = 18;

    // Ids of devices lost by disk agent or devices with unavailable agent.
    repeated string UnavailableDeviceIds = 19;
}

////////////////////////////////////////////////////////////////////////////////
// DescribeBlocks request/response.

message TDescribeBlocksRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Label of volume to describe from.
    string DiskId = 2;

    // Starting block index.
    uint32 StartIndex = 3;

    // Number of blocks to describe.
    uint32 BlocksCount = 4;

    // Checkpoint identifier.
    string CheckpointId = 5;

    // Optional count of blocks which overlay disk is going to read.
    // Used for throttling.
    // Pass zero if request should not be throttled.
    uint32 BlocksCountToRead = 6;

    // Additional flags. Do we need it?
    uint32 Flags = 7;
}

// Represents blocks range with content.
message TFreshBlockRange
{
    uint32 StartIndex = 1;
    uint32 BlocksCount = 2;
    bytes BlocksContent = 3;
}

// Represents range of consecutive blocks inside some blob.
message TRangeInBlob
{
    // Offset of blocks with respect to blob.
    uint32 BlobOffset = 1;
    uint32 BlockIndex = 2;
    uint32 BlocksCount = 3;
}

// Represents collection of blocks inside some blob.
message TBlobPiece
{
    // Required blob id.
    NKikimrProto.TLogoBlobID BlobId = 1;

    // Required Blob Storage Group id.
    uint32 BSGroupId = 2;

    // Ranges of consecutive blocks contained in this blob.
    // Required field.
    repeated TRangeInBlob Ranges = 3;
}

message TDescribeBlocksResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    repeated TFreshBlockRange FreshBlockRanges = 2;
    repeated TBlobPiece BlobPieces = 3;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 4;

    // Throttler delay.
    uint64 ThrottlerDelay = 5;
}

////////////////////////////////////////////////////////////////////////////////
// TRemoveOperation

message TRemoveClientOperation
{
    string ClientId = 1;
    string Reason = 2;
}

////////////////////////////////////////////////////////////////////////////////
// TRequesterInfo

message TRequesterInfo
{
    string LocalPipeServerId = 1;
    string SenderActorId = 2;
}

////////////////////////////////////////////////////////////////////////////////
// TVolumeOperation

message TVolumeOperation
{
    NCloud.NProto.TError Error = 1;

    oneof Operation {
        TVolumeClientInfo Add = 2;
        TRemoveClientOperation Remove = 3;
        TVolumeMeta UpdateVolumeMeta = 4;
    }

    TRequesterInfo RequesterInfo = 5;

    // FQDN of the host where the tablet got message.
    string TabletHost = 6;
}

////////////////////////////////////////////////////////////////////////////////
// GetScanDiskStatus request/response.

message TScanDiskProgress
{
    // Number of blobs processed so far.
    uint64 Processed = 1;

    // Total number of blobs to process.
    uint64 Total = 2;

    // Is operation completed.
    bool IsCompleted = 3;

    // Blobs processed with error
    repeated NKikimrProto.TLogoBlobID BrokenBlobs = 4;
}

message TGetScanDiskStatusRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    string DiskId = 2;
}

message TGetScanDiskStatusResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    TScanDiskProgress Progress = 2;

    // Request traces.
    NCloud.NProto.TTraceInfo Trace = 3;
}
