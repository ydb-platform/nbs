syntax = "proto3";

import "cloud/blockstore/public/api/protos/client.proto";
import "cloud/blockstore/public/api/protos/encryption.proto";
import "cloud/blockstore/public/api/protos/headers.proto";
import "cloud/blockstore/public/api/protos/mount.proto";
import "cloud/blockstore/public/api/protos/volume.proto";
import "cloud/storage/core/protos/error.proto";

package NCloud.NBlockStore.NProto;

option go_package = "github.com/ydb-platform/nbs/cloud/blockstore/public/api/protos";

////////////////////////////////////////////////////////////////////////////////
// Start volume endpoint

message TStartEndpointRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Unix-socket path.
    string UnixSocketPath = 2;

    // Label of volume to mount.
    string DiskId = 3;

    // VM information.
    string InstanceId = 4;

    // Volume access mode.
    EVolumeAccessMode VolumeAccessMode = 5;

    // Volume mount mode.
    EVolumeMountMode VolumeMountMode = 6;

    // IPC type used by client.
    EClientIpcType IpcType = 7;

    // Client version info.
    string ClientVersionInfo = 8;

    // Obsolete, use MountFlags instead.
    bool ThrottlingDisabled = 9;

    // Volume generation.
    uint64 MountSeqNumber = 10;

    // Client identifier.
    string ClientId = 11;

    // Client profile
    TClientProfile ClientProfile = 12;

    // Client performance profile
    TClientPerformanceProfile ClientPerformanceProfile = 13;

    // Vhost queues count.
    uint32 VhostQueuesCount = 14;

    // Request timeout for a single request attempt (in milliseconds).
    uint32 RequestTimeout = 15;

    // Total request timeout - for all attempts plus total backoff time (in milliseconds).
    uint32 RetryTimeout = 16;

    // Backoff time increment for each attempt (in milliseconds).
    uint32 RetryTimeoutIncrement = 17;

    // Unaligned request support can be explicitly disabled.
    bool UnalignedRequestsDisabled = 18;

    // Volume encryption spec.
    TEncryptionSpec EncryptionSpec = 19;

    // Send MinBlockSize to NBD-client (NBS-2250).
    bool SendNbdMinBlockSize = 20;

    // Mount flags.
    uint32 MountFlags = 21;

    // Device name for vhost endpoints.
    string DeviceName = 22;

    // Client's cgroups
    repeated string ClientCGroups = 23;

    // Restore endpoint after restart
    bool Persistent = 24;

    oneof NbdDevice {
        // The device file (e.g. "/dev/nbd0") which nbd-client will connect to.
        string NbdDeviceFile = 25;

        // Use any free nbd device file which nbd-client will connect to.
        bool UseFreeNbdDeviceFile = 26;
    }
}

message TStartEndpointResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Volume information.
    TVolume Volume = 2;

    // The device file (e.g. "/dev/nbd0") which nbd-client connected to.
    string NbdDeviceFile = 3;
}

////////////////////////////////////////////////////////////////////////////////
// Stop volume endpoint

message TStopEndpointRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Unix-socket path.
    string UnixSocketPath = 2;
}

message TStopEndpointResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;
}

////////////////////////////////////////////////////////////////////////////////
// List volume endpoints

message TListEndpointsRequest
{
    // Optional request headers.
    THeaders Headers = 1;
}

message TListEndpointsResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // List of endpoints.
    repeated TStartEndpointRequest Endpoints = 2;

    // Endpoints restoring status.
    bool EndpointsWereRestored = 3;
}

////////////////////////////////////////////////////////////////////////////////
// Kick volume endpoint

message TKickEndpointRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Keyring identifier.
    uint32 KeyringId = 2;
}

message TKickEndpointResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;
}

////////////////////////////////////////////////////////////////////////////////
// List keyring endpoints

message TListKeyringsRequest
{
    // Optional request headers.
    THeaders Headers = 1;
}

message TListKeyringsResponse
{
    message TKeyringEndpoint
    {
        string KeyringId = 1;
        TStartEndpointRequest Request = 2;
    }

    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // List of keyring endpoints.
    repeated TKeyringEndpoint Endpoints = 2;
}

////////////////////////////////////////////////////////////////////////////////
// Describe endpoint

message TDescribeEndpointRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Unix-socket path.
    string UnixSocketPath = 2;
}

message TDescribeEndpointResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Client performance profile.
    TClientPerformanceProfile PerformanceProfile = 2;
}

////////////////////////////////////////////////////////////////////////////////
// Refresh endpoint

message TRefreshEndpointRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Unix-socket path.
    string UnixSocketPath = 2;
}

message TRefreshEndpointResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;
}

////////////////////////////////////////////////////////////////////////////////
// Proxy endpoint

message TStartProxyEndpointRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // BlockStore unix-socket path.
    string UnixSocketPath = 2;

    // NBD device to proxy requests from.
    string NbdDevice = 3;

    // NBD StorageOptions.
    uint32 BlockSize = 4;
    uint64 BlocksCount = 5;
}

message TStartProxyEndpointResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Selected internal socket used for communication with the kernel.
    string InternalUnixSocketPath = 2;
}

message TStopProxyEndpointRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // BlockStore unix-socket path.
    string UnixSocketPath = 2;
}

message TStopProxyEndpointResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Selected internal socket used for communication with the kernel.
    string InternalUnixSocketPath = 2;

    // The device associated with this endpoint.
    string NbdDevice = 3;
}

message TListProxyEndpointsRequest
{
    // Optional request headers.
    THeaders Headers = 1;
}

message TListProxyEndpointsResponse
{
    message TErrorKindStats
    {
        string ErrorKindName = 1;
        uint64 Count = 2;
    }

    message TRequestTypeStats
    {
        string RequestName = 1;
        uint64 Count = 2;
        uint64 RequestBytes = 3;
        uint64 Inflight = 4;
        uint64 InflightBytes = 5;
        repeated TErrorKindStats ErrorKindStats = 6;
    }

    message TProxyEndpointStats
    {
        repeated TRequestTypeStats RequestTypeStats = 1;
    }

    message TProxyEndpoint
    {
        // BlockStore unix-socket path.
        string UnixSocketPath = 1;

        // Selected internal socket used for communication with the kernel.
        string InternalUnixSocketPath = 2;

        // NBD device to proxy requests from.
        string NbdDevice = 3;

        // NBD StorageOptions.
        uint32 BlockSize = 4;
        uint64 BlocksCount = 5;

        // Stats.
        TProxyEndpointStats Stats = 6;
    }

    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // List of proxy endpoints.
    repeated TProxyEndpoint Endpoints = 2;
}

message TResizeProxyDeviceRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Unix socket path of the endpoint associated with the device being resized
    string UnixSocketPath = 2;

    // New size in bytes.
    uint64 DeviceSizeInBytes = 3;
}

message TResizeProxyDeviceResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;
}
