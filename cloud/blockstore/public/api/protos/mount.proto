syntax = "proto3";

import "cloud/blockstore/public/api/protos/encryption.proto";
import "cloud/blockstore/public/api/protos/headers.proto";
import "cloud/blockstore/public/api/protos/volume.proto";
import "cloud/storage/core/protos/error.proto";

package NCloud.NBlockStore.NProto;

option go_package = "github.com/ydb-platform/nbs/cloud/blockstore/public/api/protos";

////////////////////////////////////////////////////////////////////////////////
// Client IPC type

enum EClientIpcType
{
    IPC_GRPC = 0;
    IPC_VHOST = 1;
    IPC_NBD = 2;
    IPC_NVME = 3;
    IPC_SCSI = 4;
    IPC_RDMA = 5;
}

////////////////////////////////////////////////////////////////////////////////
// Mount Flags

enum EMountFlag
{
    MF_NONE = 0;
    MF_THROTTLING_DISABLED = 1;
    MF_FORCE_WRITE = 2;
    MF_FILL = 3; // TODO: NBS-4488. Remove this Mount flag.
}

////////////////////////////////////////////////////////////////////////////////
// Volume mount request/response.

message TMountVolumeRequest
{
    reserved 13;

    // Optional request headers.
    THeaders Headers = 1;

    // Label of volume to mount.
    string DiskId = 2;

    // VM information.
    string InstanceId = 3;

    // VM token.
    string Token = 4;

    // Volume access mode.
    EVolumeAccessMode VolumeAccessMode = 6;

    // Volume mount mode.
    EVolumeMountMode VolumeMountMode = 7;

    // IPC type used by client (only for monitoring).
    EClientIpcType IpcType = 8;

    // Client version info.
    string ClientVersionInfo = 10;

    // Obsolete, use MountFlags instead.
    bool ThrottlingDisabled = 11;

    // Volume generation.
    uint64 MountSeqNumber = 12;

    // Mount flags.
    uint32 MountFlags = 14;

    // Encryption spec.
    TEncryptionSpec EncryptionSpec = 15;

    // Mount sequential number for disk filling.
    // We don't allow clients with old sequential number to mount disk for read/write
    // in order to prevent data corruption during disk filling.
    uint64 FillSeqNumber = 16;

    // We don't allow clients with wrong fill generation to mount disk for read/write
    // in order to prevent data corruption during disk filling.
    uint64 FillGeneration = 17;

    // Forces MountVolume handler to ignore encryption spec.
    bool DisableEncryption = 18;
}

message TMountVolumeResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // Volume information.
    TVolume Volume = 2;

    // Session identifier.
    string SessionId = 3;

    // Inactive clients timeout (in milliseconds).
    uint32 InactiveClientsTimeout = 4;

    // Service version information.
    string ServiceVersionInfo = 5;
}

////////////////////////////////////////////////////////////////////////////////
// Volume unmount request/response.

message TUnmountVolumeRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Label of volume to unmount.
    string DiskId = 2;

    // VM information.
    string InstanceId = 3;

    // VM token.
    string Token = 4;

    // If unmount shall ignore pending operations. Do we need it?
    bool Force = 5;

    // Session identifier.
    string SessionId = 6;
}

message TUnmountVolumeResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;
}
