syntax = "proto3";

package cloud.disk_manager;

import "cloud/disk_manager/api/disk.proto";
import "cloud/disk_manager/api/operation.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/ydb-platform/nbs/cloud/disk_manager/api;disk_manager";

// Snapshots are stored in global AZ (for redundancy), but are tied to a concrete disk in regional AZ.
// Creating initial snapshot is slow. The following snapshots will be created (generally) faster thanks
// to incremental snapshotting. Also, since we checkpoint the disk, it's possible to resume the VM
// right after we create the checkpoint (very quick operation) and continue data copying in the background.
service SnapshotService {
    // Returns operation with:
    // metadata: CreateSnapshotMetadata
    // response: CreateSnapshotResponse
    rpc Create(CreateSnapshotRequest) returns (Operation);

    // Returns operation with:
    // metadata: DeleteSnapshotMetadata
    // response: DeleteSnapshotResponse
    rpc Delete(DeleteSnapshotRequest) returns (Operation);
}

message CreateSnapshotRequest {
    reserved 4, 5, 6;

    // src's zone ID must be an existing zone ID; using a cell ID will cause
    // a failure.
    DiskId src = 1;
    string snapshot_id = 2;
    string folder_id = 3;
    bool zonal = 7;
}

message CreateSnapshotMetadata {
    double progress = 1;
}

message CreateSnapshotResponse {
    int64 size = 1;
    int64 storage_size = 2;
}

message DeleteSnapshotRequest {
    reserved 2, 3;

    string snapshot_id = 1;
}

message DeleteSnapshotMetadata {
    string snapshot_id = 1;
}

message DeleteSnapshotResponse {
    message ChangedSnapshot {
        string snapshot_id = 1;
        google.protobuf.Timestamp timestamp = 2;
        int64 storage_size = 3;
    }
    repeated ChangedSnapshot changed_snapshots = 1;
}
