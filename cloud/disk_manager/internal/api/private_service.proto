syntax = "proto3";

package api;

import "cloud/disk_manager/api/disk.proto";
import "cloud/disk_manager/api/operation.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/ydb-platform/nbs/cloud/disk_manager/internal/api";

service PrivateService {
    // Schedules blank (no op) operation, used for testing.
    rpc ScheduleBlankOperation(google.protobuf.Empty) returns (cloud.disk_manager.Operation);

    rpc RebaseOverlayDisk(RebaseOverlayDiskRequest) returns (cloud.disk_manager.Operation);

    rpc RetireBaseDisk(RetireBaseDiskRequest) returns (cloud.disk_manager.Operation);

    rpc RetireBaseDisks(RetireBaseDisksRequest) returns (cloud.disk_manager.Operation);

    rpc OptimizeBaseDisks(google.protobuf.Empty) returns (cloud.disk_manager.Operation);

    rpc ConfigurePool(ConfigurePoolRequest) returns (cloud.disk_manager.Operation);

    rpc DeletePool(DeletePoolRequest) returns (cloud.disk_manager.Operation);

    // Lists all existing disk ids in specified |folder_id|.
    // Lists all existing disk ids if |folder_id| is not set.
    rpc ListDisks(ListDisksRequest) returns (ListDisksResponse);

    // Lists all existing image ids in specified |folder_id|.
    // Lists all existing image ids if |folder_id| is not set.
    rpc ListImages(ListImagesRequest) returns (ListImagesResponse);

    // Lists all existing snapshot ids in specified |folder_id|.
    // Lists all existing snapshot ids if |folder_id| is not set.
    rpc ListSnapshots(ListSnapshotsRequest) returns (ListSnapshotsResponse);

    // Lists all existing filesystem ids in specified |folder_id|.
    // Lists all existing filesystem ids if |folder_id| is not set.
    rpc ListFilesystems(ListFilesystemsRequest) returns (ListFilesystemsResponse);

    // Lists all existing placement group ids in specified |folder_id|.
    // Lists all existing placement group ids if |folder_id| is not set.
    rpc ListPlacementGroups(ListPlacementGroupsRequest) returns (ListPlacementGroupsResponse);

    // Get all nodes that are alive and can process tasks.
    // This endpoint is used for client task balancing.
    rpc GetAliveNodes(google.protobuf.Empty) returns (GetAliveNodesResponse);
}

message RebaseOverlayDiskRequest {
    cloud.disk_manager.DiskId disk_id = 1;
    string base_disk_id = 4;
    string target_base_disk_id = 2;
    uint64 slot_generation = 3;
}

message RetireBaseDiskRequest {
    reserved 3;

    string base_disk_id = 1;
    cloud.disk_manager.DiskId src_disk_id = 2;
}

message RetireBaseDisksRequest {
    string image_id = 1;
    string zone_id = 2;
    bool use_base_disk_as_src = 3;
    uint64 use_image_size = 4;
}

message ConfigurePoolRequest {
    reserved 3;

    string image_id = 1;
    string zone_id = 2;
    int64 capacity = 4;
    bool use_image_size = 5; // NBS-2005
}

message DeletePoolRequest {
    string image_id = 1;
    string zone_id = 2;
}

message ListDisksRequest {
    string folder_id = 1;
    google.protobuf.Timestamp creating_before = 2;
}

message ListDisksResponse {
    repeated string disk_ids = 1;
}

message ListImagesRequest {
    string folder_id = 1;
    google.protobuf.Timestamp creating_before = 2;
}

message ListImagesResponse {
    repeated string image_ids = 1;
}

message ListSnapshotsRequest {
    string folder_id = 1;
    google.protobuf.Timestamp creating_before = 2;
}

message ListSnapshotsResponse {
    repeated string snapshot_ids = 1;
}

message ListFilesystemsRequest {
    string folder_id = 1;
    google.protobuf.Timestamp creating_before = 2;
}

message ListFilesystemsResponse {
    repeated string filesystem_ids = 1;
}

message ListPlacementGroupsRequest {
    string folder_id = 1;
    google.protobuf.Timestamp creating_before = 2;
}

message ListPlacementGroupsResponse {
    repeated string placement_group_ids = 1;
}

message GetAliveNodesResponse {
    message Node {
        string host = 1;
        google.protobuf.Timestamp last_heartbeat = 2;
        uint32 inflight_task_count = 3;
    }
    repeated Node nodes = 1;
}
