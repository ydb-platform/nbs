name: Check if we have label and it was created by member
description: Check whether
inputs:
  label:
    required: true
    default: "ok-to-test"
    description: "label to check"
  comment:
    required: true
    default: "true"
    description: "Do we leave comment or not"
  comment_text:
    required: false
    default: "Hi! Thank you for contributing!\nThe tests on this PR will run after a maintainer adds an `ok-to-test` label to this PR manually. Thank you for your patience!"
    description: "comment"
  remove_label:
    required: true
    default: "true"
    description: "set to true, to remove label afterwards"
outputs:
  membership:
    value: ${{ steps.check-ownership-membership.outputs.result }}
    description: "Check for membership result"
  labeled:
    value: ${{ steps.check-ownership-membership.outputs.result }}
    description: "Check for membership result"
runs:
  using: composite
  steps:
  - name: Check if running tests is allowed
    id: check-ownership-membership
    uses: actions/github-script@v6
    with:
      github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      script: |
        // How to interpret membership status code:
        // https://docs.github.com/en/rest/orgs/members?apiVersion=2022-11-28#check-organization-membership-for-a-user
        const userLogin = context.payload.pull_request.user.login;
        const label = core.getInput('label');

        const isOrgMember = async function () {
          try {
            const response = await github.rest.orgs.checkMembershipForUser({
              org: context.payload.organization.login,
              username: userLogin,
            });
            return response.status == 204;
          } catch (error) {
            if (error.status && error.status == 404) {
              return false;
            }
            throw error;
          }
        }

        if (context.payload.repository.owner.login == userLogin) {
          console.log('User is repo owner')
          return false;
        }

        if (await isOrgMember()) {
          console.log('User is member')
          return false;
        }
  - name: check-if-label-exists
    uses: actions/github-script@v6
    with:
      script: |
        const labels = context.payload.pull_request.labels;
        const labelsFind = labels.find(
          label => label.name == label
        );
        return labelsFind !== undefined;
  - name: comment-if-waiting-on-ok
    if: steps.check-ownership-membership.outputs.result == 'false' &&
        github.event.action == 'opened' && inputs.comment == 'true'
    uses: actions/github-script@v6
    with:
      script: |
        github.rest.issues.createComment({
          issue_number: context.issue.number,
          owner: context.repo.owner,
          repo: context.repo.repo,
          body: core.getInput('comment_text')
        });
  - name: cleanup-test-label
    uses: actions/github-script@v6
    if: inputs.remove_label == 'true'
    with:
      script: |
        const { owner, repo } = context.repo;
        const prNumber = context.payload.pull_request.number;
        const labelToRemove = core.getInput('label');
        try {
          const result = await github.rest.issues.removeLabel({
            owner,
            repo,
            issue_number: prNumber,
            name: labelToRemove
          });
        } catch(e) {
          // ignore the 404 error that arises
          // when the label did not exist for the
          // organization member
          console.log(e);
        }

