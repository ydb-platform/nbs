name: Build (ya make)
description: Build targets
inputs:
  build_target:
    required: false
    description: "build target"
  build_preset:
    required: true
    default: "relwithdebinfo"
    description: "relwithdebinfo, release-asan, release-tsan, release-msan, release-ubsan"
  cache_update:
    required: true
    description: "bazel-remote upload results"
    default: "false"
  bazel_remote_uri:
    required: false
    description: "bazel-remote endpoint"
  bazel_remote_username:
    required: false
    description: "bazel-remote username"
  bazel_remote_password:
    required: false
    description: "bazel-remote password"
  build_threads:
    required: false
    default: "60"
    description: "build threads count"
  link_threads:
    required: false
    default: "8"
    description: "link threads count"
  clean_ya_dir:
    required: false
    default: "no"
    description: "clean ya dir"
  use_network_cache:
    required: false
    default: "yes"
    description: "use network cache"


runs:
  using: composite
  steps:
    - name: Init
      id: init
      shell: bash --noprofile --norc -eo pipefail -x {0}
      run: |
        export TMP_DIR=/home/github/tmp_build
        echo "TMP_DIR=$TMP_DIR" >> $GITHUB_ENV
        rm -rf $TMP_DIR && mkdir $TMP_DIR && chown -R github:github $TMP_DIR $GITHUB_WORKSPACE

        # shellcheck disable=SC2193
        if [ "${{ inputs.clean_ya_dir }}" == "yes" ] && [ -d /home/github/.ya/ ]; then
          echo "Cleaning ya dir"
          rm -rf /home/github/.ya/
        fi

    - name: build
      shell: bash --noprofile --norc -eo pipefail -x {0}
      run: |
        function grep_ya_tc() {
          ps aux | grep "[y]a-tc" || true
        }

        extra_params=()

        # shellcheck disable=SC2157
        if [ -n "${{ inputs.build_target }}" ]; then
          readarray -d ',' -t targets < <(printf "%s" "${{ inputs.build_target }}")
          for target in "${targets[@]}"; do
            extra_params+=(--target="${target}")
          done
        fi

        # shellcheck disable=SC2157,SC2193
        if [ "${{ inputs.use_network_cache }}" == "yes" ]; then
          if [ -n "${{ inputs.bazel_remote_uri }}" ]; then
            extra_params+=(--bazel-remote-store)
            extra_params+=(--bazel-remote-base-uri "${{ inputs.bazel_remote_uri }}")
          fi

          # shellcheck disable=SC2157
          if [ -n "${{ inputs.bazel_remote_username }}" ]; then
            extra_params+=(--bazel-remote-username "${{ inputs.bazel_remote_username }}")
            extra_params+=(--bazel-remote-password "${{ inputs.bazel_remote_password }}")
            extra_params+=(--add-result .o)
          fi

          # shellcheck disable=SC2193
          if [ "${{ inputs.cache_update }}" == "true" ]; then
            extra_params+=(--bazel-remote-put)
          fi
        fi

        # shellcheck disable=SC2195
        case "${{ inputs.build_preset }}" in
          debug)
            build_type=debug
            ;;
          relwithdebinfo)
            build_type=relwithdebinfo
            ;;
          release-asan)
            build_type=release
            extra_params+=(--sanitize="address")
            extra_params+=(-DSKIP_JUNK -DUSE_EAT_MY_DATA -DDEBUGINFO_LINES_ONLY)
            ;;
          release-tsan)
            build_type=release
            extra_params+=(--sanitize="thread")
            extra_params+=(-DSKIP_JUNK -DUSE_EAT_MY_DATA -DDEBUGINFO_LINES_ONLY)
            ;;
          release-msan)
            build_type=release
            extra_params+=(--sanitize="memory")
            extra_params+=(-DSKIP_JUNK -DUSE_EAT_MY_DATA -DDEBUGINFO_LINES_ONLY)
            ;;
          release-ubsan)
            build_type=release
            extra_params+=(--sanitize="undefined")
            extra_params+=(-DSKIP_JUNK -DUSE_EAT_MY_DATA -DDEBUGINFO_LINES_ONLY)
            ;;
          *)
            echo "Invalid preset: ${{ inputs.build_preset }}"
            exit 1
            ;;
        esac


        if [ -d /home/github/.ya/tools/ ]; then
          ya_bin_path=$(find /home/github/.ya/tools/ -type f -name "ya-bin")
          if [ ! -s "$ya_bin_path" ]; then
            echo "ya-bin exists but is empty, lets look for ya-tc process and kill it if it's running somehow."
            ps auxf | grep -vE "]$"
            ls -lsha "$ya_bin_path"
            du -h -d 1 /home/github/.ya/

            process_name="ya-tc"
            # by default ya-tc should terminate within 5 minutes
            timeout=360
            start_time=$(date +%s)

            while true; do
              pgrep -x "$process_name" && {
                  echo "$process_name is still running."
                  grep_ya_tc
              } || {
                  echo "$process_name is not running."
                  grep_ya_tc
                  break
              }

              current_time=$(date +%s)
              elapsed_time=$((current_time - start_time))

              if [ "$elapsed_time" -ge "$timeout" ]; then
                  echo "Timeout reached. $process_name is still running. killing it"
                  grep_ya_tc
                  pkill -f $process_name || true
                  grep_ya_tc
                  break
              fi

              sleep 5
            done

            echo "ya-bin exists but is empty, recovering by removing it."
            ls -lsha "$ya_bin_path"
            ps auxf | grep -vE "]$"
            rm -rf $ya_bin_path
          fi
        else
          echo "/home/github/.ya/tools/ not found"
        fi
        date
        sudo -E -H -u github ./ya make -k -j${{ inputs.build_threads }} --build "${build_type}" --force-build-depends -T --stat  \
          --log-file "$TMP_DIR/ya_log.txt" --evlog-file "$TMP_DIR/ya_evlog.jsonl" \
          --dump-graph --dump-graph-to-file "$TMP_DIR/ya_graph.json" \
          --cache-size 512G --link-threads "${{ inputs.link_threads }}" \
          "${extra_params[@]}"
        date

    - name: Sync logs to S3
      if: always()
      shell: bash
      run: |
        echo "::group::s3-sync"
        sudo -E -H -u github s3cmd sync --acl-private --no-progress --stats --no-check-md5 "$TMP_DIR/" "$S3_BUCKET_PATH/build_logs/"
        echo "::endgroup::"

    - name: Create directory listing on s3
      if: always()
      shell: bash
      run: |
        echo "::group::generate-listing"
        sudo -E -H -u github python3 .github/scripts/index.py "$S3_BUCKET_PATH" --generate-indexes --apply
        echo "::endgroup::"

    - name: show free space
      if: always()
      shell: bash
      run: df -h
