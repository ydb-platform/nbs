name: Build (ya make)
description: Build targets
inputs:
  build_target:
    required: false
    description: "build target"
  build_preset:
    required: true
    default: "relwithdebinfo"
    description: "relwithdebinfo, release-asan, release-tsan, release-msan, release-ubsan"
  cache_update:
    required: true
    description: "bazel-remote upload results"
    default: "false"
  bazel_remote_uri:
    required: false
    description: "bazel-remote endpoint"
  bazel_remote_username:
    required: false
    description: "bazel-remote username"
  bazel_remote_password:
    required: false
    description: "bazel-remote password"
  build_threads:
    required: false
    default: "60"
    description: "build threads count"
  link_threads:
    required: false
    default: "8"
    description: "link threads count"
  clean_ya_dir:
    required: false
    default: "no"
    description: "clean ya dir"
  use_network_cache:
    required: false
    default: "yes"
    description: "use network cache"

runs:
  using: composite
  steps:
    - name: Init
      id: init
      shell: bash --noprofile --norc -eo pipefail -x {0}
      env:
        CLEAN_YA_DIR: ${{ inputs.clean_ya_dir }}
      run: |
        export TMP_DIR=/home/github/tmp_build
        echo "TMP_DIR=$TMP_DIR" >> $GITHUB_ENV
        rm -rf $TMP_DIR && mkdir $TMP_DIR && chown -R github:github $TMP_DIR $GITHUB_WORKSPACE

        
        if [ "$CLEAN_YA_DIR" == "yes" ] && [ -d /home/github/.ya/ ]; then
          echo "Cleaning ya dir"
          rm -rf /home/github/.ya/
        fi

    - name: Setup cache password file
      shell: bash --noprofile --norc -eo pipefail -x {0}
      env:
        BAZEL_REMOTE_PASSWORD: ${{ inputs.bazel_remote_password }}
      run: |
        export BAZEL_REMOTE_PASSWORD_FILE=$(mktemp)
        echo -n "$BAZEL_REMOTE_PASSWORD" > "$BAZEL_REMOTE_PASSWORD_FILE"
        echo "BAZEL_REMOTE_PASSWORD_FILE=$BAZEL_REMOTE_PASSWORD_FILE" >> "$GITHUB_ENV"
        chmod 600 "$BAZEL_REMOTE_PASSWORD_FILE"
        chown github:github "$BAZEL_REMOTE_PASSWORD_FILE"

    - name: build
      shell: bash --noprofile --norc -eo pipefail -x {0}
      env:
        NUMBER_OF_RETRIES: ${{ inputs.number_of_retries }}
        BUILD_PRESET: ${{ inputs.build_preset }}
        BUILD_TARGET: ${{ inputs.build_target }}
        BUILD_THREADS: ${{ inputs.build_threads }}
        LINK_THREADS: ${{ inputs.link_threads }}
        BAZEL_REMOTE_USERNAME: ${{ inputs.bazel_remote_username }}
        BAZEL_REMOTE_URI: ${{ inputs.bazel_remote_uri }}
        USE_NETWORK_CACHE: ${{ inputs.use_network_cache }}
        CACHE_UPDATE: ${{ inputs.cache_update }}
      run: |
        function grep_ya_tc() {
          # shellcheck disable=SC2009
          ps aux | grep "[y]a-tc" || true
        }

        extra_params=(
          --keep-going
          --threads="$BUILD_THREADS"
          --link-threads "${LINK_THREADS}" 
          --force-build-depends
          -T
          --stat
          --log-file "$TMP_DIR/ya_log.txt"
          --evlog-file "$TMP_DIR/ya_evlog.jsonl"
          --dump-graph
          --dump-graph-to-file "$TMP_DIR/ya_graph.json" 
          --cache-size 512G
        )
        # strip quotes from the string
        # TODO: remove it when pr.yaml gets updated
        BUILD_TARGET=${BUILD_TARGET//\"/}

        if [ -n "$BUILD_TARGET" ]; then
          readarray -d ',' -t targets < <(printf "%s" "$BUILD_TARGET")
          for target in "${targets[@]}"; do
            extra_params+=(--target="${target}")
          done
        fi

        if [ "$USE_NETWORK_CACHE" == "yes" ]; then
          if [ -n "$BAZEL_REMOTE_URI" ]; then
            extra_params+=(--bazel-remote-store)
            extra_params+=(--bazel-remote-base-uri "$BAZEL_REMOTE_URI")
          fi

          if [ -n "$BAZEL_REMOTE_USERNAME" ]; then
            extra_params+=(--bazel-remote-username "$BAZEL_REMOTE_USERNAME")
            extra_params+=(--bazel-remote-password-file "$BAZEL_PASSWORD_FILE")
            extra_params+=(--add-result .o)
          fi

          if [ "$CACHE_UPDATE" == "true" ]; then
            extra_params+=(--bazel-remote-put)
          fi
        fi

        case "$BUILD_PRESET" in
          debug)
            extra_params+=(--build "debug")
            ;;
          relwithdebinfo)
            extra_params+=(--build "relwithdebinfo")
            ;;
          release-asan)
            extra_params+=(--build "release")
            extra_params+=(--sanitize="address")
            extra_params+=(-DSKIP_JUNK -DUSE_EAT_MY_DATA -DDEBUGINFO_LINES_ONLY)
            ;;
          release-tsan)
            extra_params+=(--build "release")
            extra_params+=(--sanitize="thread")
            extra_params+=(-DSKIP_JUNK -DUSE_EAT_MY_DATA -DDEBUGINFO_LINES_ONLY)
            ;;
          release-msan)
            extra_params+=(--build "release")
            extra_params+=(--sanitize="memory")
            extra_params+=(-DSKIP_JUNK -DUSE_EAT_MY_DATA -DDEBUGINFO_LINES_ONLY)
            ;;
          release-ubsan)
            extra_params+=(--build "release")
            extra_params+=(--sanitize="undefined")
            extra_params+=(-DSKIP_JUNK -DUSE_EAT_MY_DATA -DDEBUGINFO_LINES_ONLY)
            ;;
          *)
            echo "Invalid preset: $BUILD_PRESET"
            exit 1
            ;;
        esac


        if [ -d /home/github/.ya/tools/ ]; then
          ya_bin_path=$(find /home/github/.ya/tools/ -type f -name "ya-bin")
          if [ ! -s "$ya_bin_path" ]; then
            echo "ya-bin exists but is empty, lets look for ya-tc process and kill it if it's running somehow."
            # shellcheck disable=SC2009
            ps auxf | grep -vE "]$"
            ls -lsha "$ya_bin_path"
            du -h -d 1 /home/github/.ya/

            process_name="ya-tc"
            # by default ya-tc should terminate within 5 minutes
            timeout=360
            start_time=$(date +%s)

            while true; do
              if pgrep -x "$process_name"; then
                  echo "$process_name is still running."
                  grep_ya_tc
              else
                  echo "$process_name is not running."
                  grep_ya_tc
                  break
              fi

              current_time=$(date +%s)
              elapsed_time=$((current_time - start_time))

              if [ "$elapsed_time" -ge "$timeout" ]; then
                  echo "Timeout reached. $process_name is still running. killing it"
                  grep_ya_tc
                  pkill -f $process_name || true
                  grep_ya_tc
                  break
              fi

              sleep 5
            done

            echo "ya-bin exists but is empty, recovering by removing it."
            ls -lsha "$ya_bin_path"
            # shellcheck disable=SC2009
            ps auxf | grep -vE "]$"
            rm -rf $ya_bin_path
          fi
        else
          echo "/home/github/.ya/tools/ not found"
        fi
        date
        sudo -E -H -u github ./ya make "${extra_params[@]}"
        date

    - name: Sync logs to S3
      if: always()
      shell: bash
      run: |
        echo "::group::s3-sync"
        sudo -E -H -u github s3cmd sync --acl-private --no-progress --stats --no-check-md5 "$TMP_DIR/" "$S3_BUCKET_PATH/build_logs/"
        echo "::endgroup::"

    - name: Create directory listing on s3
      if: always()
      shell: bash
      run: |
        echo "::group::generate-listing"
        sudo -E -H -u github python3 .github/scripts/index.py "$S3_BUCKET_PATH" --generate-indexes --apply
        echo "::endgroup::"

    - name: show free space
      if: always()
      shell: bash
      run: df -h
    
    - name: clean up
      if: always()
      shell: bash
      run: |
        echo "::group::cleanup"
        sudo -E -H -u github rm -rf "$TMP_DIR"
        chown -R root:root $GITHUB_WORKSPACE
        echo "::endgroup::"
