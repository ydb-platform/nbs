name: Check github workflow

on:
  pull_request:
    branches:
      - main
    paths:
    - ".github/**"
    types:
      - 'opened'
      - 'synchronize'
      - 'reopened'
      - 'labeled'
  workflow_dispatch:
    inputs:
      allow_downgrade:
        description: 'Allow downgrade'
        required: false
        type: choice
        default: "no"
        options:
          - "yes"
          - "no"
      large_tests:
        description: 'Launch large tests'
        required: false
        type: choice
        default: "no"
        options:
          - "yes"
          - "no"

permissions:
  contents: read
  pull-requests: write
  issues: write

defaults:
  run:
    shell: bash

env:
  allow_downgrade: ${{ vars.GLOBAL_ALLOW_DOWNGRADE == 'yes' || ((github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'allow-downgrade')) || inputs.allow_downgrade == 'yes') }}
  large_tests: ${{ (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'large-tests'))  && 'true' || inputs.large_tests == 'yes' }}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  set-env:
    runs-on: [self-hosted, "self-hosted", "runner_light"]
    outputs:
      allow_downgrade: ${{ env.allow_downgrade == 'false' && 'no' || 'yes' }}
      large_tests: ${{ env.large_tests == 'false' && 'no' || 'yes' }}
    # we don't need anything, but otherwise github will complain
    steps:
      - name: set env
        id: set-env
        run: echo
  check-running-allowed:
    runs-on: [self-hosted, "self-hosted", "runner_light"]
    outputs:
      result: ${{ steps.check-ownership-membership.outputs.result }}
    steps:
      - name: Check if running tests is allowed
        id: check-ownership-membership
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          script: |
            async function isOrgMember(owner, username) {
              core.info(`Checking membership for user: ${username}`);
              try {
                const { data: membership } = await github.rest.orgs.getMembershipForUser({
                  org: owner,
                  username
                });
                if (membership?.state === 'active') {
                  core.info(`${username} is confirmed as an org member`);
                  return true;
                } else {
                  core.info(`${username} is not an active org member (state: ${membership?.state})`);
                  return false;
                }
              } catch (error) {
                // Often the call fails if the user isn't in the org or it's private
                core.error(`Error checking membership for user ${username}: ${error.message}`);
                return false;
              }
            }

            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            const prAuthor = context.payload.pull_request.user.login;

            core.info(`Starting membership check for PR #${prNumber} by @${prAuthor}`);

            const authorIsOrgMember = await isOrgMember(owner, prAuthor);
            if (authorIsOrgMember) {
              core.info(`User @${prAuthor} is org member => authorized`);
              return true;
            }

            core.info(`User @${prAuthor} is NOT an org member; checking for 'ok-to-test' label`);

            let events;
            try {
              const resp = await github.rest.issues.listEvents({
                owner,
                repo,
                issue_number: prNumber
              });
              events = resp.data;
            } catch (error) {
              core.error(`Error fetching issue events: ${error.message}`);
              return false;
            }

            // Find last 'labeled' event for 'ok-to-test'
            const labeledOkToTest = events
              .filter(e => e.event === 'labeled' && e.label?.name === 'ok-to-test')
              .pop();

            if (!labeledOkToTest) {
              core.info("No 'ok-to-test' label found on this PR");
              return false;
            }

            core.info(`Found 'ok-to-test' label event by @${labeledOkToTest.actor.login}, verifying if they are an org member...`);

            const labelerLogin = labeledOkToTest.actor.login;
            const labelerIsOrgMember = await isOrgMember(owner, labelerLogin);
            if (!labelerIsOrgMember) {
              core.info(`User @${labelerLogin} who labeled 'ok-to-test' is not an org member => not authorized`);
              return false;
            }

            core.info(`'ok-to-test' label added by an org member => authorized`);
            return true
      - name: comment-if-waiting-on-ok
        if: steps.check-ownership-membership.outputs.result == 'false' &&
            github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Hi! Thank you for contributing!\nThe tests on this PR will run after a maintainer adds an `ok-to-test` label to this PR manually. Thank you for your patience!'
            });
      - name: cleanup-labels
        uses: actions/github-script@v7
        with:
          script: |
            let labelsToRemove = ['ok-to-test', 'recheck'];
            const prNumber = context.payload.pull_request.number;
            const prLabels = new Set(context.payload.pull_request.labels.map(l => l.name));
            for await (const label of labelsToRemove.filter(l => prLabels.has(l))) {
              core.info(`remove label=${label} for pr=${prNumber}`);
              try {
                const result = await github.rest.issues.removeLabel({
                  ...context.repo,
                  issue_number: prNumber,
                  name: label
                });
              } catch(error) {
                // ignore the 404 error that arises
                // when the label did not exist for the
                // organization member
                if (error.status && error.status != 404) {
                  throw error;
                }
              }
            }
  shell:
    needs: [set-env, check-running-allowed]
    if: needs.check-running-allowed.outputs.result == 'true'
    runs-on: [self-hosted, "self-hosted", "runner_light"]

    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          submodules: false
          sparse-checkout: '.github'

      - name: get reporter name
        uses: haya14busa/action-cond@v1
        id: reporter
        with:
          cond: ${{ github.event_name == 'pull_request' }}
          if_true: "github-pr-review"
          if_false: "github-check"

      - name: set up dependencies
        run: pip install pyyaml

      - name: generate shellscripts from github actions
        run: |
          python3 .github/scripts/shell-extractor.py
          find .temporary/ -type f -name "*.sh";

      - name: shellcheck for .github dir
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: .github
        env:
          SHELLCHECK_OPTS: "-e SC2155,SC2086"


      - name: shellcheck for github actions shell scripts in .temporary dir
        uses: ludeeus/action-shellcheck@master
        env:
          SHELLCHECK_OPTS: "-e SC2155,SC2086"
        with:
          scandir: .temporary

      - name: shfmt
        uses: librarian/action-shfmt@v0.0.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workdir: .github/
          shfmt_flags: "-i 4 -ci -kp -bn -sr"

  python:
    needs: [set-env, check-running-allowed]
    if: needs.check-running-allowed.outputs.result == 'true'
    runs-on: [self-hosted, "self-hosted", "runner_light"]

    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          submodules: false
          sparse-checkout: '.github'

      - name: get reporter name
        uses: haya14busa/action-cond@v1
        id: reporter
        with:
          cond: ${{ github.event_name == 'pull_request' }}
          if_true: "github-pr-review"
          if_false: "github-check"


      - name: set up python environment
        uses: actions/setup-python@v5.0.0
        with:
          python-version: "3.10"

      - name: set up dependencies
        run: pip install flake8 black[jupyter] flake8-docstrings flake8-simplify flake8-unused-arguments flake8-quotes


      - name: flake8
        uses: reviewdog/action-flake8@v3.8.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workdir: .github/
          reporter: ${{ steps.reporter.outputs.value }}
          flake8_args: "--max-line-length 128 --ignore Q000,D100,D101,D102,D103,D104,D105,D106,D107"

      - name: black
        uses: reviewdog/action-black@v3.10.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workdir: .github/
          reporter: ${{ steps.reporter.outputs.value }}

  workflows:
    needs: [set-env, check-running-allowed]
    if: needs.check-running-allowed.outputs.result == 'true'
    runs-on: [self-hosted, "self-hosted", "runner_light"]
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          submodules: false
          sparse-checkout: '.github'

      - name: install action-validator with asdf
        uses: asdf-vm/actions/install@v3
        with:
          tool_versions: |
            action-validator 0.5.4

      - name: check workflows syntax
        id: lint
        run: |
          set -x
          export TMP_OUT=$(mktemp)
          find .github/workflows -type f \( -iname \*.yaml -o -iname \*.yml \) -print0 \
            | xargs -0 -I {} action-validator --verbose {} > $TMP_OUT

          echo "WORKFLOW_LINT=$(cat $TMP_OUT | awk -v ORS='\\n' 1)"
          cat $TMP_OUT >> "$GITHUB_STEP_SUMMARY"
          echo "WORKFLOW_LINT=$(cat $TMP_OUT | awk -v ORS='\\n' 1)" >> "$GITHUB_OUTPUT"

      - name: comment on issue
        uses: actions/github-script@v7.0.1
        if:  ${{ github.event_name == 'pull_request' }}
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '${{ steps.lint.outputs.WORKFLOW_LINT }}'
            })
  nbs-github-actions:
    needs: [set-env, check-running-allowed]
    if: needs.check-running-allowed.outputs.result == 'true'
    name: Launch scripts on test-data
    uses: ./.github/workflows/github_actions_scripts.yaml
    secrets: inherit

  create-and-delete-vm:
    needs: [set-env, check-running-allowed]
    if: needs.check-running-allowed.outputs.result == 'true'
    name: Create and delete VM
    uses: ./.github/workflows/create_and_delete_vm.yaml
    with:
      allow_downgrade: ${{ needs.set-env.outputs.allow_downgrade }}
      large_tests: ${{ needs.set-env.outputs.large_tests }}
      number_of_retries: 3
    secrets: inherit
