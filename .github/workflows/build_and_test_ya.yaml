name: Build and test

on:
  workflow_call:
    inputs:
      build_target:
        type: string
        default: "cloud/blockstore/apps/,cloud/filestore/apps/,cloud/disk_manager/,cloud/tasks/,cloud/storage/"
        description: "limit build to specific target"
      test_target:
        type: string
        default: "cloud/blockstore/,cloud/filestore/,cloud/disk_manager/,cloud/tasks/,cloud/storage/"
        description: "limit test to specific target"
      build_preset:
        type: string
      runner_kind:
        type: string
        required: true
        description: "self-hosted or provisioned"
      runner_label:
        type: string
        default: "linux"
        description: "runner label"
      runner_instance_id:
        type: string
        default: ""
        description: "runner instance id"
      runner_ipv4:
        type: string
        default: ""
        description: "runner ipv4"
      run_build:
        type: boolean
        default: true
        description: "run build"
      run_tests:
        type: boolean
        default: true
        description: "run tests"
      build_threads:
        type: string
        default: '60'
        description: "Build threads count"
      test_threads:
        type: string
        default: '64'
        description: "Test threads count"
      link_threads:
        type: string
        default: '32'
        description: "link threads count"
      sleep_after_tests:
        type: string
        default: "0"
        description: "Amount of time to sleep after tests"
      test_size:
        type: string
        default: "small,medium,large"
      test_type:
        type: string
        default: "unittest,clang_tidy,gtest,py3test,py2test,pytest,flake8,black,py2_flake8,go_test,gofmt"
      folder_prefix:
        type: string
        default: "nebius-"
      cache_update_build:
        type: boolean
        default: false
        description: "Update remote build cache"
      cache_update_tests:
        type: boolean
        default: false
        description: "Update remote build cache"
      upload_ya_dir:
        type: string
        default: "no"
        description: "Upload ya dir to s3"
      clean_ya_dir:
        type: string
        default: "no"
        description: "Clean ya dir from image before building"
      use_network_cache:
        type: string
        default: "yes"
        description: "Use network cache"
      truncate_enabled:
        type: string
        default: "yes"
        description: "Truncate enabled"
      number_of_retries:
        type: string
        default: "1"
        description: "Number of retries for tests"
    outputs:
      sleep_after_tests:
        description: "sleep_after_tests"
        value: ${{ jobs.build-and-test.outputs.sleep_after_tests }}

jobs:
  build-and-test:
    name: Build and test ${{ inputs.build_preset }} [id=${{ inputs.runner_instance_id }} ip=${{ inputs.runner_ipv4 }}]
    runs-on: [ self-hosted, "${{ inputs.runner_kind }}", "${{ inputs.runner_label }}" ]
    outputs:
        sleep_after_tests: ${{ steps.failure.outputs.sleep_after_tests }}
    timeout-minutes: 1440
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      if: github.event.pull_request.head.sha != ''
      with:
        submodules: true
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: ${{ !contains(github.event.pull_request.labels.*.name, 'rebase') && 1 || 0 }}
    - name: Rebase PR
      if: ${{ github.event.pull_request.head.sha != '' && contains(github.event.pull_request.labels.*.name, 'rebase') }}
      shell: bash
      run: |
        git config user.email "robot-nbs@nebius.com"
        git config user.name "Robot NBS"
        git fetch origin ${{ github.event.pull_request.base.ref }}
        git rebase origin/${{ github.event.pull_request.base.ref }}
    - name: Checkout
      uses: actions/checkout@v4
      if: github.event.pull_request.head.sha == ''
      with:
        submodules: true

    - name: Prepare s3cmd
      uses: ./.github/actions/s3cmd
      with:
        s3_bucket: ${{ vars.AWS_BUCKET }}
        s3_endpoint: ${{ vars.NEBIUS_AWS_ENDPOINT }}
        s3_website_suffix: ${{ vars.NEBIUS_AWS_WEBSITE_SUFFIX }}
        s3_key_id: ${{ secrets.NEBIUS_AWS_ACCESS_KEY_ID }}
        s3_key_secret: ${{ secrets.NEBIUS_AWS_SECRET_ACCESS_KEY }}
        folder_prefix: nebius-
        build_preset: ${{ inputs.build_preset }}
        install: false

    - name: Create background process that will adjust oom_score_adj for selection of processes
      shell: bash
      run: |
        set -x
        while true; do
          echo "$(date) done sleeping" | tee -a /tmp/oom_score_adj.log
          for pid in $(pgrep -f ydbd) $(pgrep -f qemu-system-x86_64); do
            # check if process is already having oom_score_adj set to 500 if not then set it
            if [ "$(cat /proc/$pid/oom_score_adj)" != "1000" ]; then
              echo 1000 | sudo tee /proc/$pid/oom_score_adj
              echo "set oom_score_adj=1000 for pid: $pid" | tee -a /tmp/oom_score_adj.log
            fi
          done
          echo "$(date) sleeping for 30s" | tee -a /tmp/oom_score_adj.log
          sleep 30
        done &

    - name: Build
      uses: ./.github/actions/build
      if: inputs.run_build
      with:
        build_target: ${{ inputs.build_target }}
        build_preset: ${{ inputs.build_preset }}
        cache_update: ${{ inputs.cache_update_build }}
        bazel_remote_uri: ${{ vars.NEBIUS_BAZEL_REMOTE_CACHE_URL }}
        bazel_remote_username: ${{ secrets.REMOTE_CACHE_USERNAME }}
        bazel_remote_password: ${{ secrets.REMOTE_CACHE_PASSWORD }}
        build_threads: ${{ inputs.build_threads }}
        link_threads: ${{ inputs.link_threads }}
        clean_ya_dir: ${{ inputs.clean_ya_dir }}
        use_network_cache: ${{ inputs.use_network_cache }}

    - name: Run tests
      uses: ./.github/actions/test
      if: inputs.run_tests
      with:
        test_target: ${{ inputs.test_target }}
        build_preset: ${{ inputs.build_preset }}
        test_size: ${{ inputs.test_size }}
        test_type: ${{ inputs.test_type }}
        cache_update: ${{ inputs.cache_update_tests }}
        bazel_remote_uri: ${{ vars.NEBIUS_BAZEL_REMOTE_CACHE_URL }}
        bazel_remote_username: ${{ secrets.REMOTE_CACHE_USERNAME }}
        bazel_remote_password: ${{ secrets.REMOTE_CACHE_PASSWORD }}
        link_threads: ${{ inputs.link_threads }}
        test_threads: ${{ inputs.test_threads }}
        sync_to_s3: ${{ vars.SYNC_TO_S3 }}
        upload_ya_dir: ${{ inputs.upload_ya_dir }}
        clean_ya_dir: ${{ inputs.run_build && 'no' || inputs.clean_ya_dir }}
        use_network_cache: ${{ inputs.use_network_cache }}
        number_of_retries: ${{ inputs.number_of_retries }}
        truncate_enabled: ${{ inputs.truncate_enabled }}
    - id: failure
      name: set sleep_after_tests in case of failure
      if: failure()
      uses: ./.github/actions/sleep
      with:
        sleep_after_tests: ${{ inputs.sleep_after_tests != '0' && inputs.sleep_after_tests || '7200' }}
