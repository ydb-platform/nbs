name: Build and test NBS on demand

on:
  workflow_dispatch:
    inputs:
      ref:
        type: string
        default: ""
        description: "Ref to build/test"
      build_target:
        type: string
        default: "cloud/blockstore/apps/,cloud/filestore/apps/,cloud/disk_manager/,cloud/tasks/,cloud/storage/"
        description: "limit build to specific target"
      test_target:
        type: string
        default: "cloud/blockstore/,cloud/filestore/,cloud/disk_manager/,cloud/tasks/,cloud/storage/"
        description: "limit test to specific target"
      build_preset:
        type: choice
        default: "relwithdebinfo"
        description: "Build preset"
        options:
          - debug
          - relwithdebinfo
          - release-asan
          - release-tsan
          - release-msan
          - release-ubsan
      cache_update:
        type: boolean
        default: false
        description: "Update build cache for build and test cache"
      test_size:
        type: choice
        default: "small"
        description: "test size to run"
        options:
          - small
          - small,medium
          - small,medium,large
      test_type:
        type: choice
        default: "unittest"
        description: "type of tests to run"
        options:
          - unittest,clang_tidy,gtest
          - py3test,py2test,pytest,flake8,black,py2_flake8
          - go_test,gofmt
          - unittest,clang_tidy,gtest,py3test,py2test,pytest,flake8,black,py2_flake8,go_test,gofmt
      sleep_after_tests:
        type: string
        default: "0"
        description: "Amount of seconds to sleep after tests"
      
  workflow_call:
    inputs:
      ref:
        type: string
        default: ""
        description: "Ref to build"
      build_target:
        type: string
        default: "cloud/blockstore/apps/,cloud/filestore/apps/,cloud/disk_manager/,cloud/tasks/,cloud/storage/"
        description: "limit build to specific target"
      test_target:
        type: string
        default: "cloud/blockstore/,cloud/filestore/,cloud/disk_manager/,cloud/tasks/,cloud/storage/"
        description: "limit test to specific target"
      build_preset:
        type: string
        default: "relwithdebinfo"
      vm_name_suffix:
        type: string
        default: ""
      test_size:
        type: string
        default: "small,medium,large"
      test_type:
        type: string
        default: "unittest,clang_tidy,gtest,py3test,py2test,pytest,flake8,black,py2_flake8,go_test,gofmt"
      sleep_after_tests:
        type: string
        default: "0"
        description: "Amount of seconds to sleep after tests"
      cache_update:
        type: boolean
        default: false
        description: "Update cache"
      upload_ya_dir:
        type: string
        default: "no"
        description: "Upload ya dir to s3"
      clean_ya_dir:
        type: string
        default: "no"
        description: "Clean ya dir from image before building"
      use_network_cache:
        type: string
        default: "yes"
        description: "Use network cache"
      disk_type:
        type: string
        default: "network-ssd-nonreplicated"
        description: "Disk type for VM"
      allow_downgrade:
        type: string
        default: "no"
        description: "Allow downgrade of VM"

env:
  allow_downgrade: ${{ vars.GLOBAL_ALLOW_DOWNGRADE == 'yes' || ((github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'allow-downgrade')) || inputs.allow_downgrade == 'yes') }}

jobs:
  provide-runner:
    name: Start self-hosted runner (${{ inputs.build_preset }})
    timeout-minutes: 60
    if: always()
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-runner.outputs.label }}
      instance-id: ${{ steps.start-runner.outputs.instance-id }}
      runner_ipv4: ${{ steps.start-runner.outputs.external-ipv4 }}
      runner_local_ipv4: ${{ steps.start-runner.outputs.local-ipv4 }}
      build_threads: ${{ steps.calculate-threads.outputs.build_threads || '60' }}
      test_threads: ${{ steps.calculate-threads.outputs.test_threads || '32' }}
      link_threads: ${{ steps.calculate-threads.outputs.link_threads || '24' }}
    steps:
      - name: checkout PR
        uses: actions/checkout@v4
        if: github.event.pull_request.head.sha != ''
        with:
          submodules: false
          sparse-checkout: '.github'
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: ${{ !contains(github.event.pull_request.labels.*.name, 'rebase') && 1 || 0 }}
      - name: rebase PR
        if: ${{ github.event.pull_request.head.sha != '' && contains(github.event.pull_request.labels.*.name, 'rebase') }}
        shell: bash
        run: |
          git config user.email "robot-nbs@nebius.com"
          git config user.name "Robot NBS"
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git rebase origin/${{ github.event.pull_request.base.ref }}
      - name: checkout
        uses: actions/checkout@v4
        if: github.event.pull_request.head.sha == ''
        with:
          submodules: false
          ref: ${{ inputs.ref != '' && inputs.ref || github.ref }}
          sparse-checkout: '.github'
      - name: Start runner
        id: start-runner
        if: always()
        uses: ./.github/actions/nebius_runner_create
        timeout-minutes: 60
        with:
          org: ydb-platform
          team: nbs
          repo_owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          service_account_key: ${{ secrets.NEW_NEBIUS_SA_JSON_CREDENTIALS }}
          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          vm_parent_id: ${{ vars.NEBIUS_PARENT_ID }}
          vm_name: ${{ github.event.pull_request.number && format('pr-{0}{1}-{2}-{3}', github.event.pull_request.number, inputs.vm_name_suffix, github.run_id, github.run_attempt) || format('run-{0}-{1}', github.run_id, github.run_attempt) }}
          vm_platform_id: ${{ vars.NEBIUS_PLATFORM_ID }}
          vm_preset: ${{ vars.NEBIUS_VM_PRESET }}
          vm_disk_type: ${{ inputs.disk_type || 'network-ssd-nonreplicated' }}
          vm_disk_size: 1023
          vm_subnet: ${{ vars.NEBIUS_SUBNET_ID }}
          vm_image: ${{ vars.NEBIUS_IMAGE_ID_2204 }}
          vm_labels: ${{ github.event.pull_request.number && format('pr={0},run={1}-{2},repo={3},owner={4}', github.event.pull_request.number, github.run_id, github.run_attempt, github.event.repository.name, github.repository_owner) || format('run={0}-{1},repo={2},owner={3}', github.run_id, github.run_attempt, github.event.repository.name, github.repository_owner) }}
          vm_user_passwd: ${{ secrets.VM_USER_PASSWD }}
          vm_allow_downgrade: ${{ env.allow_downgrade == 'true' && 'yes' || 'no' }}
      - name: Calculate threads
        id: calculate-threads
        if: always()
        uses: ./.github/actions/nebius_threads_calculator
        with:
          vm_preset: ${{ steps.start-runner.outputs.vm-preset }}
          tests_size: ${{ inputs.test_size }}

  build-and-test:
    name: Build and test NBS (${{ inputs.build_preset }}) [id=${{ needs.provide-runner.outputs.instance-id }} local_ip=${{ needs.provide-runner.outputs.runner_local_ipv4 }} ip=${{ needs.provide-runner.outputs.runner_ipv4 }}]
    uses: ./.github/workflows/build_and_test_ya.yaml
    needs:
      - provide-runner
    with:
      ref: ${{ github.event.pull_request.head.sha != '' && github.event.pull_request.head.sha || inputs.ref != '' && inputs.ref || github.ref }}
      runner_kind: self-hosted
      runner_label: ${{ needs.provide-runner.outputs.label }}
      runner_instance_id: ${{ needs.provide-runner.outputs.instance-id }}
      runner_ipv4: ${{ needs.provide-runner.outputs.runner_ipv4 }}
      build_target: ${{ inputs.build_target }}
      test_target: ${{ inputs.test_target }}
      build_preset: ${{ inputs.build_preset }}
      run_build: true
      run_tests: true
      test_size: ${{ inputs.test_size }}
      test_type: ${{ inputs.test_type }}
      build_threads: ${{ needs.provide-runner.outputs.build_threads || '60' }}
      link_threads: ${{ needs.provide-runner.outputs.link_threads || '24' }}
      test_threads: ${{ needs.provide-runner.outputs.test_threads || '12' }}
      sleep_after_tests: ${{ inputs.sleep_after_tests }}
      cache_update_build: ${{ inputs.cache_update }}
      # if you enable cache_update_tests it will break flake8/gofmt tests
      cache_update_tests: false
      upload_ya_dir: ${{ github.event_name == 'workflow_dispatch' && 'no' || inputs.upload_ya_dir}}
      clean_ya_dir: ${{ github.event_name == 'workflow_dispatch' && 'no' || inputs.clean_ya_dir }}
      use_network_cache: ${{ github.event_name == 'workflow_dispatch' && 'yes'|| inputs.use_network_cache }}
      truncate_enabled: ${{ contains(github.event.pull_request.labels.*.name, 'disable_truncate') && 'no' || 'yes' }}
    secrets: inherit

  sleep-if-needed:
    name: Sleep ${{ needs.build-and-test.outputs.sleep_after_tests || '0' }}s if build failed
    if: ${{ !cancelled() }}
    needs:
      - provide-runner # required to get output from the start-runner job
      - build-and-test # required to wait when the main job is done
    runs-on: ubuntu-latest
    steps:
      - name: Sleep ${{ needs.build-and-test.outputs.sleep_after_tests  || '0' }}s if build failed
        shell: bash
        if: ${{ needs.build-and-test.outputs.sleep_after_tests && needs.build-and-test.outputs.sleep_after_tests != '0'  }}
        # we need to use binary because builting doesn't produce process
        # which we can kill to stop the vm before it's done
        run: |
          echo "sleeping ${{ needs.build-and-test.outputs.sleep_after_tests }}s"
          /usr/bin/sleep ${{ needs.build-and-test.outputs.sleep_after_tests }}

  release-runner:
    name: Release self-hosted runner (${{ inputs.build_preset }}) [id=${{ needs.provide-runner.outputs.instance-id }} local_ip=${{ needs.provide-runner.outputs.runner_local_ipv4 }} ip=${{ needs.provide-runner.outputs.runner_ipv4 }}]
    needs:
      - provide-runner  # required to get output from the start-runner job
      - build-and-test  # required to wait when the main job is done
      - sleep-if-needed # required to wait until all debug is done
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: checkout PR
        uses: actions/checkout@v4
        if: github.event.pull_request.head.sha != ''
        with:
          submodules: false
          sparse-checkout: '.github'
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: ${{ !contains(github.event.pull_request.labels.*.name, 'rebase') && 1 || 0 }}
      - name: rebase PR
        if: ${{ github.event.pull_request.head.sha != '' && contains(github.event.pull_request.labels.*.name, 'rebase') }}
        shell: bash
        run: |
          git config user.email "robot-nbs@nebius.com"
          git config user.name "Robot NBS"
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git rebase origin/${{ github.event.pull_request.base.ref }}
      - name: checkout
        uses: actions/checkout@v4
        if: github.event.pull_request.head.sha == ''
        with:
          submodules: false
          ref: ${{ inputs.ref != '' && inputs.ref || github.ref }}
          sparse-checkout: '.github'
      - name: Stop runner
        uses: ./.github/actions/nebius_runner_remove
        if: always()
        timeout-minutes: 60
        with:
          service_account_key: ${{ secrets.NEW_NEBIUS_SA_JSON_CREDENTIALS }}
          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          repo_owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          vm_parent_id: ${{ vars.NEBIUS_PARENT_ID }}
          vm_id: ${{ needs.provide-runner.outputs.instance-id }}
