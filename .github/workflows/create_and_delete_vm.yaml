name: Create and delete VM
on:
  workflow_dispatch:
    inputs:
      vm_name_suffix:
        type: string
        default: ""
        description: "Suffix to append to VM name"
      vm_image:
        type: string
        default: ""
        description: "VM image to use"
      disk_type:
        type: string
        default: ""
        description: "Disk type for VM"
      allow_downgrade:
        type: choice
        default: "no"
        description: "Allow downgrade"
        options:
          - "yes"
          - "no"
      large_tests:
        type: choice
        default: "no"
        description: "Launch large tests"
        options:
          - "yes"
          - "no"
      number_of_retries:
        type: number
        default: 1
        description: "Number of retries for the tests"
  workflow_call:
    inputs:
      vm_name_suffix:
        type: string
        default: ""
        description: "Suffix to append to VM name"
      vm_image:
        type: string
        default: ""
        description: "VM image to use"
      disk_type:
        type: string
        default: "network-ssd-nonreplicated"
        description: "Disk type for VM"
      allow_downgrade:
        type: string
        default: "no"
        description: "Allow downgrade"
      large_tests:
        type: string
        default: "no"
        description: "Launch large tests"
      number_of_retries:
        type: number
        default: 1
        description: "Number of retries for the tests"

env:
  allow_downgrade: ${{ vars.GLOBAL_ALLOW_DOWNGRADE == 'yes' || ((github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'allow-downgrade')) || inputs.allow_downgrade == 'yes') }}
  large_tests: ${{ (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'large-tests'))  && 'true' || inputs.large_tests == 'yes' }}


jobs:
  provide-runner:
    name: Create runner 
    timeout-minutes: 60
    if: always()
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-runner.outputs.LABEL }}
      instance-id: ${{ steps.start-runner.outputs.INSTANCE_ID }}
      allow_downgrade: ${{ env.allow_downgrade == 'false' && 'no' || 'yes' }}
      large_tests: ${{ env.large_tests == 'false' && 'no' || 'yes' }}
    steps:
      - name: checkout PR
        uses: actions/checkout@v4
        if: github.event.pull_request.head.sha != ''
        with:
          submodules: false
          sparse-checkout: '.github'
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: ${{ !contains(github.event.pull_request.labels.*.name, 'rebase') && 1 || 0 }}
      - name: rebase PR
        if: ${{ github.event.pull_request.head.sha != '' && contains(github.event.pull_request.labels.*.name, 'rebase') }}
        shell: bash
        run: |
          git config user.email "robot-nbs@nebius.com"
          git config user.name "Robot NBS"
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git rebase origin/${{ github.event.pull_request.base.ref }}
      - name: checkout
        uses: actions/checkout@v4
        if: github.event.pull_request.head.sha == ''
        with:
          submodules: false
          sparse-checkout: '.github'
      - name: Create VM
        id: start-runner
        uses: ./.github/actions/nebius_runner_create
        timeout-minutes: 60
        with:
          org: ydb-platform
          team: nbs
          repo_owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          service_account_key: ${{ secrets.NEW_NEBIUS_SA_JSON_CREDENTIALS }}
          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          vm_parent_id: ${{ vars.NEBIUS_PARENT_ID }}
          vm_name: ${{ github.event.pull_request.number && format('pr-{0}{1}-{2}-{3}', github.event.pull_request.number, inputs.vm_name_suffix, github.run_id, github.run_attempt) || format('run-{0}-{1}', github.run_id, github.run_attempt) }}
          vm_platform_id: ${{ vars.NEBIUS_PLATFORM_ID }}
          vm_preset: ${{ env.large_tests == 'true' && '80vcpu-320gb' || '16vcpu-64gb' }}
          vm_disk_type: ${{ inputs.disk_type == '' && 'network-ssd-nonreplicated' || inputs.disk_type }}
          vm_disk_size: 1023
          vm_subnet: ${{ vars.NEBIUS_SUBNET_ID }}
          vm_image: ${{ inputs.vm_image == '' && vars.NEBIUS_IMAGE_ID_2204 || inputs.vm_image }}
          vm_labels: ${{ github.event.pull_request.number && format('pr={0},run={1}-{2},repo={3},owner={4}', github.event.pull_request.number, github.run_id, github.run_attempt, github.event.repository.name, github.repository_owner) || format('run={0}-{1},repo={2},owner={3}', github.run_id, github.run_attempt, github.event.repository.name, github.repository_owner) }}
          vm_flavor: "none"
          vm_user_passwd: ${{ secrets.VM_USER_PASSWD }}
          vm_allow_downgrade: 'no'

  build-and-test:
    name: Build and test NBS (relwithdebinfo)
    uses: ./.github/workflows/build_and_test_ya.yaml
    needs:
      - provide-runner
    with:
      runner_kind: self-hosted
      runner_flavor: "none"
      runner_label: ${{ needs.provide-runner.outputs.label }}
      build_target: ${{ needs.provide-runner.outputs.large_tests == 'yes' && 'cloud/blockstore/apps/,cloud/filestore/apps/,cloud/disk_manager/,cloud/tasks/,cloud/storage/' || 'cloud/tasks' }}
      test_target:  ${{ needs.provide-runner.outputs.large_tests == 'yes' && 'cloud/blockstore/,cloud/filestore/,cloud/disk_manager/,cloud/tasks/,cloud/storage/' || 'cloud/tasks' }}
      build_preset: "relwithdebinfo"
      run_build: true
      run_tests: true
      test_size: ${{ needs.provide-runner.outputs.large_tests == 'yes' && 'small,medium,large' || 'small' }}
      test_type: ${{ needs.provide-runner.outputs.large_tests == 'yes' && 'unittest,clang_tidy,gtest,py3test,py2test,pytest,flake8,black,py2_flake8,gofmt' || 'go_test' }}
      sleep_after_tests: ${{ contains(github.event.pull_request.labels.*.name, 'sleep') && '7200' || '1' }}
      cache_update_build: false
      cache_update_tests: false
      upload_ya_dir: "no"
      clean_ya_dir: "no"
      use_network_cache: "yes"
      number_of_retries: ${{ inputs.number_of_retries }}
      truncate_enabled: ${{ contains(github.event.pull_request.labels.*.name, 'disable_truncate') && 'no' || 'yes' }}
    secrets: inherit

  release-runner:
    name: Release self-hosted runner
    needs:
      - provide-runner  # required to get output from the start-runner job
      - build-and-test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: checkout PR
        uses: actions/checkout@v4
        if: github.event.pull_request.head.sha != ''
        with:
          submodules: false
          sparse-checkout: '.github'
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: ${{ !contains(github.event.pull_request.labels.*.name, 'rebase') && 1 || 0 }}
      - name: rebase PR
        if: ${{ github.event.pull_request.head.sha != '' && contains(github.event.pull_request.labels.*.name, 'rebase') }}
        shell: bash
        run: |
          git config user.email "robot-nbs@nebius.com"
          git config user.name "Robot NBS"
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git rebase origin/${{ github.event.pull_request.base.ref }}
      - name: checkout
        uses: actions/checkout@v4
        if: github.event.pull_request.head.sha == ''
        with:
          submodules: false
          sparse-checkout: '.github'
      - name: Release VM
        id: release
        uses: ./.github/actions/nebius_runner_remove
        with:
          service_account_key: ${{ secrets.NEW_NEBIUS_SA_JSON_CREDENTIALS }}
          vm_id: ${{ needs.provide-runner.outputs.instance-id }}
          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          repo_owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          vm_parent_id: ${{ vars.NEBIUS_PARENT_ID }}
  
