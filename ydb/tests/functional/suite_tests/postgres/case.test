--
-- CASE
-- Test the case statement
--

statement ok
CREATE TABLE CASE_TBL (
  i integer,
  f double,
  primary key(i)
);

statement ok
CREATE TABLE CASE2_TBL (
  i integer,
  j integer,
  primary key(i, j)
);

statement ok
INSERT INTO CASE_TBL (i, f) VALUES (1, 10.1);

statement ok
INSERT INTO CASE_TBL (i, f) VALUES (2, 20.2);

statement ok
INSERT INTO CASE_TBL (i, f) VALUES (3, -30.3);

statement ok
INSERT INTO CASE_TBL (i, f) VALUES (4, NULL);

statement ok
INSERT INTO CASE2_TBL (i, j) VALUES (1, -1);

statement ok
INSERT INTO CASE2_TBL (i, j) VALUES (2, -2);

statement ok
INSERT INTO CASE2_TBL (i, j) VALUES (3, -3);

statement ok
INSERT INTO CASE2_TBL (i, j) VALUES (2, -4);

statement ok
INSERT INTO CASE2_TBL (i, j) VALUES (1, NULL);

statement ok
INSERT INTO CASE2_TBL (i, j) VALUES (NULL, -6);

--
-- Simplest examples without tables
--

statement skipped YQL-2961
SELECT '3' AS "One",
  CASE
    WHEN 1 < 2 THEN 3
  END AS "Simple WHEN";
-------------------
 One | Simple WHEN
-----+-------------
 3  |           3

statement skipped YQL-2961
SELECT '<NULL>' AS "One",
  CASE
    WHEN 1 > 2 THEN 3
  END AS "Simple default";
-------------------------
  One   | Simple default
--------+----------------
 <NULL> |

statement query
SELECT 3 AS `One`,
  CASE
    WHEN 1 < 2 THEN 3
    ELSE 4
  END AS `Simple_ELSE`;

statement query
SELECT 4 AS `One`,
  CASE
    WHEN 1 > 2 THEN 3
    ELSE 4
  END AS `ELSE_default`;

statement query
SELECT 6 AS `One`,
  CASE
    WHEN 1 > 2 THEN 3
    WHEN 4 < 5 THEN 6
    ELSE 7
  END AS `Two_WHEN_with_default`;

statement skipped YQL-2961
SELECT '7' AS "NonR",
   CASE WHEN random() < 0 THEN 1
   END AS "NULL_on_no_matches";
---------------------------
 NonR | NULL_on_no_matches
------+--------------------
 7    |

statement query
SELECT 7 AS `NonR`,
   CASE
    WHEN random(1) < 0 THEN 1
    ELSE Null
   END AS `NULL_on_no_matches`;


-- Constant-expression folding shouldn't evaluate unreachable subexpressions

statement query
SELECT CASE WHEN 1=0 THEN 1/0 WHEN 1=1 THEN 1 ELSE 2/0 END;

statement query
SELECT CASE 1 WHEN 0 THEN 1/0 WHEN 1 THEN 1 ELSE 2/0 END;

-- However we do not currently suppress folding of potentially
-- reachable subexpressions
-- but in yql it works fine

statement query
SELECT CASE WHEN i > 100 THEN 1/0 ELSE 0 END FROM CASE_TBL;

statement query
SELECT 2 as ft, CASE WHEN i > 0 THEN 1/0 ELSE 0 END FROM CASE_TBL;


statement query
SELECT CASE 'a' WHEN 'a' THEN 1 ELSE 2 END;

statement query
SELECT 1 AS `Five`,
  CASE
    WHEN i >= 3 THEN i
    ELSE Null
  END AS `Greater_3_or_Null`
  FROM CASE_TBL;

statement query
SELECT 1 AS `Five`,
  CASE WHEN i >= 3 THEN (i + i)
       ELSE i
  END AS `Simplest_Math`
  FROM CASE_TBL
  ORDER By Simplest_Math

statement query
SELECT 1 AS `Five`, i AS `Value`,
  CASE WHEN (i < 0) THEN 'small'
       WHEN (i = 0) THEN 'zero'
       WHEN (i = 1) THEN 'one'
       WHEN (i = 2) THEN 'two'
       ELSE 'big'
  END AS `Category`
  FROM CASE_TBL;

statement query
SELECT 1 AS `Five`,
  CASE WHEN ((i < 0) or (i < 0)) THEN 'small'
       WHEN ((i = 0) or (i = 0)) THEN 'zero'
       WHEN ((i = 1) or (i = 1)) THEN 'one'
       WHEN ((i = 2) or (i = 2)) THEN 'two'
       ELSE 'big'
  END AS `Category`
  FROM CASE_TBL;

--
-- Examples of qualifications involving tables
--
--
-- NULLIF() and COALESCE()
-- Shorthand forms for typical CASE constructs
--  defined in the SQL standard.
--

statement query
SELECT i, f FROM CASE_TBL WHERE COALESCE(f,i) = 4;

statement skipped NULLIF ??
SELECT i, f FROM CASE_TBL WHERE NULLIF(f,i) = 2;
-------
 i | f
---+---


statement skipped
SELECT '' AS Five, NULLIF(a.i,b.i) AS "NULLIF(a.i,b.i)",
  NULLIF(b.i, 4) AS "NULLIF(b.i,4)"
  FROM CASE_TBL a, CASE2_TBL b;
 five | NULLIF(a.i,b.i) | NULLIF(b.i,4)
------+-----------------+---------------
      |                 |             1
      |               2 |             1
      |               3 |             1
      |               4 |             1
      |               1 |             2
      |                 |             2
      |               3 |             2
      |               4 |             2
      |               1 |             3
      |               2 |             3
      |                 |             3
      |               4 |             3
      |               1 |             2
      |                 |             2
      |               3 |             2
      |               4 |             2
      |                 |             1
      |               2 |             1
      |               3 |             1
      |               4 |             1
      |               1 |
      |               2 |
      |               3 |
      |               4 |

statement skipped
SELECT '' AS "Two", *
  FROM CASE_TBL a, CASE2_TBL b
  WHERE COALESCE(f,b.i) = 2;
 Two | i | f | i | j
-----+---+---+---+----
     | 4 |   | 2 | -2
     | 4 |   | 2 | -4

--
-- Examples of updates involving tables
--
UPDATE CASE_TBL
  SET i = CASE WHEN i >= 3 THEN (- i)
                ELSE (2 * i) END;
SELECT * FROM CASE_TBL;
 i  |   f
----+-------
  2 |  10.1
  4 |  20.2
 -3 | -30.3
 -4 |
(4 rows)

UPDATE CASE_TBL
  SET i = CASE WHEN i >= 2 THEN (2 * i)
                ELSE (3 * i) END;
SELECT * FROM CASE_TBL;
  i  |   f
-----+-------
   4 |  10.1
   8 |  20.2
  -9 | -30.3
 -12 |
(4 rows)

UPDATE CASE_TBL
  SET i = CASE WHEN b.i >= 2 THEN (2 * j)
                ELSE (3 * j) END
  FROM CASE2_TBL b
  WHERE j = -CASE_TBL.i;
SELECT * FROM CASE_TBL;
  i  |   f
-----+-------
   8 |  20.2
  -9 | -30.3
 -12 |
  -8 |  10.1
(4 rows)

--
-- Nested CASE expressions
--
-- This test exercises a bug caused by aliasing econtext->caseValue_isNull
-- with the isNull argument of the inner CASE's CaseExpr evaluation.  After
-- evaluating the vol(null) expression in the inner CASE's second WHEN-clause,
-- the isNull flag for the case test value incorrectly became true, causing
-- the third WHEN-clause not to match.  The volatile function calls are needed
-- to prevent constant-folding in the planner, which would hide the bug.
-- Wrap this in a single transaction so the transient '=' operator doesn't
-- cause problems in concurrent sessions
BEGIN;
CREATE FUNCTION vol(text) returns text as
  'begin return $1; end' language plpgsql volatile;
SELECT CASE
  (CASE vol('bar')
    WHEN 'foo' THEN 'it was foo!'
    WHEN vol(null) THEN 'null input'
    WHEN 'bar' THEN 'it was bar!' END
  )
  WHEN 'it was foo!' THEN 'foo recognized'
  WHEN 'it was bar!' THEN 'bar recognized'
  ELSE 'unrecognized' END;
      case
----------------
 bar recognized
(1 row)

-- In this case, we can't inline the SQL function without confusing things.
CREATE DOMAIN foodomain AS text;
CREATE FUNCTION volfoo(text) returns foodomain as
  'begin return $1::foodomain; end' language plpgsql volatile;
CREATE FUNCTION inline_eq(foodomain, foodomain) returns boolean as
  'SELECT CASE $2::text WHEN $1::text THEN true ELSE false END' language sql;
CREATE OPERATOR = (procedure = inline_eq,
                   leftarg = foodomain, rightarg = foodomain);
SELECT CASE volfoo('bar') WHEN 'foo'::foodomain THEN 'is foo' ELSE 'is not foo' END;
    case
------------
 is not foo
(1 row)

ROLLBACK;
-- Test multiple evaluation of a CASE arg that is a read/write object (#14472)
-- Wrap this in a single transaction so the transient '=' operator doesn't
-- cause problems in concurrent sessions
BEGIN;
CREATE DOMAIN arrdomain AS int[];
CREATE FUNCTION make_ad(int,int) returns arrdomain as
  'declare x arrdomain;
   begin
     x := array[$1,$2];
     return x;
   end' language plpgsql volatile;
CREATE FUNCTION ad_eq(arrdomain, arrdomain) returns boolean as
  'begin return array_eq($1, $2); end' language plpgsql;
CREATE OPERATOR = (procedure = ad_eq,
                   leftarg = arrdomain, rightarg = arrdomain);
SELECT CASE make_ad(1,2)
  WHEN array[2,4]::arrdomain THEN 'wrong'
  WHEN array[2,5]::arrdomain THEN 'still wrong'
  WHEN array[1,2]::arrdomain THEN 'right'
  END;
 case
-------
 right
(1 row)

ROLLBACK;
--
-- Clean up
--
DROP TABLE CASE_TBL;
DROP TABLE CASE2_TBL;
