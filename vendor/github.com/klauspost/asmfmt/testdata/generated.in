TEXT Â·main-0x8f40(SB),0,$0
    // lea 0x91664c(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4c; BYTE $0x66; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa36ac9(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc9; BYTE $0x6a; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ R15
    PUSHQ R14
    MOVQ SI, R14
    PUSHQ R13
    MOVQ DI, R13
    PUSHQ R12
    XORL R12, R12
    PUSHQ BP
    PUSHQ BX
    SUBQ $0x18, SP
    LEAQ 0xf(SP), R15
_L71fa1c:
    CMPQ R12, R14
    JE _L71fa88
    MOVQ 0x0(R13)(R12*8), BX
_L71fa26:
    TESTQ BX, BX
    JE _L71fa7a
    MOVQ (BX), AX
    MOVQ 0x8(BX), BP
    LEAQ -0x18(AX), DI
    // cmp 0xec6343(%rip),%rdi
    BYTE $0x48; BYTE $0x3b; BYTE $0x3d; BYTE $0x43; BYTE $0x63; BYTE $0xec; BYTE $0x00
    JE _L71fa6d
    // cmpq $0x0,0xec64c9(%rip)
    BYTE $0x48; BYTE $0x83; BYTE $0x3d; BYTE $0xc9; BYTE $0x64; BYTE $0xec; BYTE $0x00; BYTE $0x00
    LEAQ 0x10(DI), DX
    JE _L71fa56
    ORL $0xffffffff, AX
    // lock xadd
    BYTE $0xf0; BYTE $0x0f; BYTE $0xc1; BYTE $0x02
    JMP _L71fa61
_L71fa56:
    MOVL -0x8(AX), DX
    LEAL -0x1(DX), CX
    MOVL CX, -0x8(AX)
    MOVL DX, AX
_L71fa61:
    TESTL AX, AX
    // jg 71fa6d
    BYTE $0x7f; BYTE $0x08
    MOVQ R15, SI
    CALL _L71f310
_L71fa6d:
    MOVQ BX, DI
    MOVQ BP, BX
    CALL _L71ebe0
    JMP _L71fa26
_L71fa7a:
    MOVQ $0x0, 0x0(R13)(R12*8)
    INCQ R12
    JMP _L71fa1c
_L71fa88:
    ADDQ $0x18, SP
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    POPQ R14
    POPQ R15
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L71facb
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L71facb:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x916717(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x17; BYTE $0x67; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x9165a3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa3; BYTE $0x65; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9165ca(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xca; BYTE $0x65; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x919b59(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x59; BYTE $0x9b; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9196b9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb9; BYTE $0x96; BYTE $0x91; BYTE $0x00
    // lea 0x919542(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x42; BYTE $0x95; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L71fb3f
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L71fb3f:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x916862(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x62; BYTE $0x68; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    // lea 0x919c9f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x9f; BYTE $0x9c; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91965f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x5f; BYTE $0x96; BYTE $0x91; BYTE $0x00
    // lea 0x9194e8(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe8; BYTE $0x94; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L71fb99
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L71fb99:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L71fbc1
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L71fbc1:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x91af22(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x22; BYTE $0xaf; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3424, DI
    CALL _Lcf1360
    // lea 0x91b851(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x51; BYTE $0xb8; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91a959(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x59; BYTE $0xa9; BYTE $0x91; BYTE $0x00
    // lea 0x91943a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x3a; BYTE $0x94; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x91b7d1(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xd1; BYTE $0xb7; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x919591(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x91; BYTE $0x95; BYTE $0x91; BYTE $0x00
    // lea 0x91941a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x1a; BYTE $0x94; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x91b5f1(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xf1; BYTE $0xb5; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x919571(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x71; BYTE $0x95; BYTE $0x91; BYTE $0x00
    // lea 0x9193fa(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xfa; BYTE $0x93; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x91652c(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x2c; BYTE $0x65; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x916542(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x42; BYTE $0x65; BYTE $0x91; BYTE $0x00
    MOVL $0x11f, DX
    CALL _Lcf1800
    NOP
    // lea 0x916fdf(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xdf; BYTE $0x6f; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91947d(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x7d; BYTE $0x94; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x9164b1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb1; BYTE $0x64; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9165fd(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xfd; BYTE $0x65; BYTE $0x91; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    // lea 0x91ae72(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x72; BYTE $0xae; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x93ec8d(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x8d; BYTE $0xec; BYTE $0x93; BYTE $0x00
    MOVL $0x1f0, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x916505(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x05; BYTE $0x65; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x916391(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x91; BYTE $0x63; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9163b8(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb8; BYTE $0x63; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x91c4e7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe7; BYTE $0xc4; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91a84f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4f; BYTE $0xa8; BYTE $0x91; BYTE $0x00
    // lea 0x919330(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x30; BYTE $0x93; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x91c287(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x87; BYTE $0xc2; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91a82f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x2f; BYTE $0xa8; BYTE $0x91; BYTE $0x00
    // lea 0x919310(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x10; BYTE $0x93; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x91c187(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x87; BYTE $0xc1; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91a80f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x0f; BYTE $0xa8; BYTE $0x91; BYTE $0x00
    // lea 0x9192f0(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf0; BYTE $0x92; BYTE $0x91; BYTE $0x00
    MOVL $0x281, DX
    CALL _L71deb0
    // lea 0x916422(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x22; BYTE $0x64; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x916437(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x37; BYTE $0x64; BYTE $0x91; BYTE $0x00
    MOVL $0xb1, DX
    CALL _Lcf1800
    NOP
    // lea 0x916ed5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd5; BYTE $0x6e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x919373(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x73; BYTE $0x93; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x916604(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x04; BYTE $0x66; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x91a663(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x63; BYTE $0xa6; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x2afc, DI
    CALL _Lcf1360
    // lea 0x9163b4(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb4; BYTE $0x63; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9163ca(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xca; BYTE $0x63; BYTE $0x91; BYTE $0x00
    MOVL $0x11f, DX
    CALL _Lcf1800
    NOP
    // lea 0x916e67(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x67; BYTE $0x6e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x919305(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x05; BYTE $0x93; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x916596(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x96; BYTE $0x65; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x91acdc(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xdc; BYTE $0xac; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3424, DI
    CALL _Lcf1360
    // lea 0x91dd4b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x4b; BYTE $0xdd; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91a713(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x13; BYTE $0xa7; BYTE $0x91; BYTE $0x00
    // lea 0x9191f4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf4; BYTE $0x91; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x91dc6b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x6b; BYTE $0xdc; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91a6f3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf3; BYTE $0xa6; BYTE $0x91; BYTE $0x00
    // lea 0x9191d4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xd4; BYTE $0x91; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x91db8b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x8b; BYTE $0xdb; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91a6d3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd3; BYTE $0xa6; BYTE $0x91; BYTE $0x00
    // lea 0x9191b4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb4; BYTE $0x91; BYTE $0x91; BYTE $0x00
    MOVL $0x281, DX
    CALL _L71deb0
    // lea 0x91d84b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x4b; BYTE $0xd8; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91930b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x0b; BYTE $0x93; BYTE $0x91; BYTE $0x00
    // lea 0x919194(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x94; BYTE $0x91; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x91d76b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x6b; BYTE $0xd7; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9192eb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xeb; BYTE $0x92; BYTE $0x91; BYTE $0x00
    // lea 0x919174(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x74; BYTE $0x91; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x916d73(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x73; BYTE $0x6d; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x919211(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x11; BYTE $0x92; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x916da9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa9; BYTE $0x6d; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91644a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x4a; BYTE $0x64; BYTE $0x91; BYTE $0x00
    MOVL $0x56, DX
    CALL _Lcf1800
    NOP
    // lea 0x916488(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x88; BYTE $0x64; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x91f44f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x4f; BYTE $0xf4; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x917bdf(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xdf; BYTE $0x7b; BYTE $0x91; BYTE $0x00
    // lea 0x917c18(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x18; BYTE $0x7c; BYTE $0x91; BYTE $0x00
    MOVL $0x8e, DX
    CALL _L71deb0
    // lea 0x916281(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x81; BYTE $0x62; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x91610d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x0d; BYTE $0x61; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x916134(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x34; BYTE $0x61; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x91f0e3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe3; BYTE $0xf0; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91e1c3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc3; BYTE $0xe1; BYTE $0x91; BYTE $0x00
    // lea 0x9190ac(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xac; BYTE $0x90; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    // lea 0x91ef63(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x63; BYTE $0xef; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91e1a3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa3; BYTE $0xe1; BYTE $0x91; BYTE $0x00
    // lea 0x91908c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x8c; BYTE $0x90; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    // lea 0x916c8b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8b; BYTE $0x6c; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x919129(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x29; BYTE $0x91; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x9163ba(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xba; BYTE $0x63; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ BX
    MOVQ 0x8(DI), BX
    TESTQ BX, BX
    JE _L720045
_L72000c:
    MOVQ BX, DI
    CALL _L71ddc0
    CMPL AX, $0x4
    JE _L72000c
    TESTL AX, AX
    JE _L72003c
    // lea 0x91eb9c(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x9c; BYTE $0xeb; BYTE $0x91; BYTE $0x00
    // lea 0x91680d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x0d; BYTE $0x68; BYTE $0x91; BYTE $0x00
    // lea 0x91981e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x1e; BYTE $0x98; BYTE $0x91; BYTE $0x00
    MOVL $0xc0, DX
    CALL _L71deb0
_L72003c:
    MOVQ BX, DI
    POPQ BX
    JMP _L71ebe0
_L720045:
    POPQ BX
    RET
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L720067
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L720067:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x920133(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x33; BYTE $0x01; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x919133(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x33; BYTE $0x91; BYTE $0x91; BYTE $0x00
    // lea 0x918fbc(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xbc; BYTE $0x8f; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x916ba5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa5; BYTE $0x6b; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x919043(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x43; BYTE $0x90; BYTE $0x91; BYTE $0x00
    MOVL $0x59, DX
    CALL _Lcf1800
    NOP
    // lea 0x9212c3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xc3; BYTE $0x12; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x9190e3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe3; BYTE $0x90; BYTE $0x91; BYTE $0x00
    // lea 0x918f6c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x6c; BYTE $0x8f; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x9213e3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe3; BYTE $0x13; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x9190c3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc3; BYTE $0x90; BYTE $0x91; BYTE $0x00
    // lea 0x918f4c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x4c; BYTE $0x8f; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x916b4b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4b; BYTE $0x6b; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x918fe9(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe9; BYTE $0x8f; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x921b93(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x93; BYTE $0x1b; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x919073(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x73; BYTE $0x90; BYTE $0x91; BYTE $0x00
    // lea 0x918efc(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xfc; BYTE $0x8e; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x921bd3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xd3; BYTE $0x1b; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x919053(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x53; BYTE $0x90; BYTE $0x91; BYTE $0x00
    // lea 0x918edc(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xdc; BYTE $0x8e; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x921c13(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x13; BYTE $0x1c; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x919033(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x33; BYTE $0x90; BYTE $0x91; BYTE $0x00
    // lea 0x918ebc(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xbc; BYTE $0x8e; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x92245d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x5d; BYTE $0x24; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x918ffd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xfd; BYTE $0x8f; BYTE $0x91; BYTE $0x00
    // lea 0x918e86(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x86; BYTE $0x8e; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x916a85(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x85; BYTE $0x6a; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x918f23(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x23; BYTE $0x8f; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x9161b4(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb4; BYTE $0x61; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ R14
    MOVQ SI, R14
    PUSHQ R13
    MOVQ DI, R13
    PUSHQ R12
    XORL R12, R12
    PUSHQ BP
    PUSHQ BX
_L720219:
    CMPQ R12, R14
    JE _L72024f
    MOVQ 0x0(R13)(R12*8), BX
_L720223:
    TESTQ BX, BX
    JE _L720241
    MOVQ 0x28(BX), BP
    MOVQ BX, DI
    CALL _L8037b0
    MOVQ BX, DI
    CALL _L71ebe0
    MOVQ BP, BX
    JMP _L720223
_L720241:
    MOVQ $0x0, 0x0(R13)(R12*8)
    INCQ R12
    JMP _L720219
_L72024f:
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    POPQ R14
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L72028d
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L72028d:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x923063(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x63; BYTE $0x30; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x918f23(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x23; BYTE $0x8f; BYTE $0x91; BYTE $0x00
    // lea 0x918dac(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xac; BYTE $0x8d; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x916995(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x95; BYTE $0x69; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x918e33(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x33; BYTE $0x8e; BYTE $0x91; BYTE $0x00
    MOVL $0x59, DX
    CALL _Lcf1800
    NOP
    // lea 0x91697b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x7b; BYTE $0x69; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x918e19(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x19; BYTE $0x8e; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x916961(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x61; BYTE $0x69; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x918dff(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xff; BYTE $0x8d; BYTE $0x91; BYTE $0x00
    MOVL $0x59, DX
    CALL _Lcf1800
    NOP
    // lea 0x916947(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x47; BYTE $0x69; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x918de5(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe5; BYTE $0x8d; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x923fc5(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xc5; BYTE $0x3f; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x91de25(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x25; BYTE $0xde; BYTE $0x91; BYTE $0x00
    // lea 0x918d0e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x0e; BYTE $0x8d; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x924839(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x39; BYTE $0x48; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x9177a9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa9; BYTE $0x77; BYTE $0x91; BYTE $0x00
    // lea 0x917a0e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x0e; BYTE $0x7a; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    // lea 0x915e4b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4b; BYTE $0x5e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x915cd7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd7; BYTE $0x5c; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x915cfe(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xfe; BYTE $0x5c; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x92454d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x4d; BYTE $0x45; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x918ded(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xed; BYTE $0x8d; BYTE $0x91; BYTE $0x00
    // lea 0x918c76(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x76; BYTE $0x8c; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x9245ed(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xed; BYTE $0x45; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x918dcd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcd; BYTE $0x8d; BYTE $0x91; BYTE $0x00
    // lea 0x91a884(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x84; BYTE $0xa8; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x9248d5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd5; BYTE $0x48; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x924a36(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x36; BYTE $0x4a; BYTE $0x92; BYTE $0x00
    MOVL $0x41, DX
    CALL _Lcf0bd0
    NOP
    // lea 0x924bd3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xd3; BYTE $0x4b; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x918d93(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x93; BYTE $0x8d; BYTE $0x91; BYTE $0x00
    // lea 0x918c1c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x1c; BYTE $0x8c; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x92529d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x9d; BYTE $0x52; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x91dcfd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xfd; BYTE $0xdc; BYTE $0x91; BYTE $0x00
    // lea 0x918be6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe6; BYTE $0x8b; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    // lea 0x9167e5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe5; BYTE $0x67; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x918c83(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x83; BYTE $0x8c; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x91681b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x1b; BYTE $0x68; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x915ebc(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xbc; BYTE $0x5e; BYTE $0x91; BYTE $0x00
    MOVL $0x56, DX
    CALL _Lcf1800
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x915d11(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x11; BYTE $0x5d; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x915b9d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x9d; BYTE $0x5b; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x915bc4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc4; BYTE $0x5b; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x926373(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x73; BYTE $0x63; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x917623(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x23; BYTE $0x76; BYTE $0x91; BYTE $0x00
    // lea 0x917888(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x88; BYTE $0x78; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    // lea 0x915af6(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf6; BYTE $0x5a; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa35f73(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x73; BYTE $0x5f; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    NOP
    // lea 0x916721(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x21; BYTE $0x67; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x918bbf(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xbf; BYTE $0x8b; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    // lea 0x92698b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x8b; BYTE $0x69; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x9175bb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xbb; BYTE $0x75; BYTE $0x91; BYTE $0x00
    // lea 0x917820(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x20; BYTE $0x78; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    // lea 0x915a8e(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8e; BYTE $0x5a; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa35f0b(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x0b; BYTE $0x5f; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9271fb(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xfb; BYTE $0x71; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x918bfb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xfb; BYTE $0x8b; BYTE $0x91; BYTE $0x00
    // lea 0x91a6b2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb2; BYTE $0xa6; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x92717b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x7b; BYTE $0x71; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x918bdb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xdb; BYTE $0x8b; BYTE $0x91; BYTE $0x00
    // lea 0x91a692(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x92; BYTE $0xa6; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x916663(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x63; BYTE $0x66; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x918b01(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x01; BYTE $0x8b; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x9278e1(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe1; BYTE $0x78; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x917511(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x11; BYTE $0x75; BYTE $0x91; BYTE $0x00
    // lea 0x917776(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x76; BYTE $0x77; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    // lea 0x9159e4(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe4; BYTE $0x59; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa35e61(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x61; BYTE $0x5e; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    NOP
    // lea 0x927707(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x07; BYTE $0x77; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x918b67(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x67; BYTE $0x8b; BYTE $0x91; BYTE $0x00
    // lea 0x91a61e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x1e; BYTE $0xa6; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x92853b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x3b; BYTE $0x85; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x918b1b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x1b; BYTE $0x8b; BYTE $0x91; BYTE $0x00
    // lea 0x91a5d2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xd2; BYTE $0xa5; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x9165a3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa3; BYTE $0x65; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x918a41(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x41; BYTE $0x8a; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x915cd2(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd2; BYTE $0x5c; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x916561(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x61; BYTE $0x65; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9189ff(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xff; BYTE $0x89; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x928e89(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x89; BYTE $0x8e; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x918a89(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x89; BYTE $0x8a; BYTE $0x91; BYTE $0x00
    // lea 0x918912(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x12; BYTE $0x89; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L72076f
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L72076f:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9293f5(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xf5; BYTE $0x93; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x919dbd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xbd; BYTE $0x9d; BYTE $0x91; BYTE $0x00
    // lea 0x91889e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x9e; BYTE $0x88; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x915be6(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe6; BYTE $0x5b; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    // lea 0x915831(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x31; BYTE $0x58; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa35cae(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xae; BYTE $0x5c; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L720823
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L720823:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x929aed(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xed; BYTE $0x9a; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x91898d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8d; BYTE $0x89; BYTE $0x91; BYTE $0x00
    // lea 0x918816(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x16; BYTE $0x88; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x916415(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x15; BYTE $0x64; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9188b3(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb3; BYTE $0x88; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    // lea 0x9157b7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb7; BYTE $0x57; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa35c34(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x34; BYTE $0x5c; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    // lea 0x91596d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x6d; BYTE $0x59; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x9157f9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf9; BYTE $0x57; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x915820(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x20; BYTE $0x58; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    // lea 0x91575e(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x5e; BYTE $0x57; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa35bdb(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xdb; BYTE $0x5b; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L7208f7
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L7208f7:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x91634b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4b; BYTE $0x63; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9187e9(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe9; BYTE $0x87; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x91581d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x1d; BYTE $0x58; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x915969(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x69; BYTE $0x59; BYTE $0x91; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    // lea 0x915a60(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x60; BYTE $0x5a; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9243a7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa7; BYTE $0x43; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x9243c7(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc7; BYTE $0x43; BYTE $0x92; BYTE $0x00
    MOVL $0xa4, DX
    CALL _Lcf1800
    NOP
    // lea 0x92438d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8d; BYTE $0x43; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x9243d5(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xd5; BYTE $0x43; BYTE $0x92; BYTE $0x00
    MOVL $0xa8, DX
    CALL _Lcf1800
    NOP
    // lea 0x924373(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x73; BYTE $0x43; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x9243db(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xdb; BYTE $0x43; BYTE $0x92; BYTE $0x00
    MOVL $0xa9, DX
    CALL _Lcf1800
    NOP
    // lea 0x9162a1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa1; BYTE $0x62; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91873f(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x3f; BYTE $0x87; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    // lea 0x91562e(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x2e; BYTE $0x56; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa35aab(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xab; BYTE $0x5a; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9157cd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcd; BYTE $0x57; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x92b8bb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xbb; BYTE $0xb8; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x92b8db(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xdb; BYTE $0xb8; BYTE $0x92; BYTE $0x00
    MOVL $0x98, DX
    CALL _Lcf1800
    NOP
    // lea 0x92bf59(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x59; BYTE $0xbf; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x918759(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x59; BYTE $0x87; BYTE $0x91; BYTE $0x00
    // lea 0x9185e2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe2; BYTE $0x85; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x92be79(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x79; BYTE $0xbe; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x92b8c9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc9; BYTE $0xb8; BYTE $0x92; BYTE $0x00
    // lea 0x92bc31(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x31; BYTE $0xbc; BYTE $0x92; BYTE $0x00
    MOVL $0x3e9, DX
    CALL _L71deb0
    // lea 0x92bd99(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x99; BYTE $0xbd; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x92b8a9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa9; BYTE $0xb8; BYTE $0x92; BYTE $0x00
    // lea 0x92bc11(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x11; BYTE $0xbc; BYTE $0x92; BYTE $0x00
    MOVL $0x3df, DX
    CALL _L71deb0
    // lea 0x9161a1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa1; BYTE $0x61; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91863f(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x3f; BYTE $0x86; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x91615d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x5d; BYTE $0x61; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9185fb(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xfb; BYTE $0x85; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x91562f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x2f; BYTE $0x56; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91577b(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x7b; BYTE $0x57; BYTE $0x91; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x91569d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x9d; BYTE $0x56; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x915529(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x29; BYTE $0x55; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x915550(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x50; BYTE $0x55; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    // lea 0x9154a3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa3; BYTE $0x54; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa35920(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x20; BYTE $0x59; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    // lea 0x92daa7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xa7; BYTE $0xda; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x918627(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x27; BYTE $0x86; BYTE $0x91; BYTE $0x00
    // lea 0x9184b0(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb0; BYTE $0x84; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x92d387(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x87; BYTE $0xd3; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x9199af(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xaf; BYTE $0x99; BYTE $0x91; BYTE $0x00
    // lea 0x918490(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x90; BYTE $0x84; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x92d527(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x27; BYTE $0xd5; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x91998f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8f; BYTE $0x99; BYTE $0x91; BYTE $0x00
    // lea 0x918470(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x70; BYTE $0x84; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x92d767(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x67; BYTE $0xd7; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x9185c7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc7; BYTE $0x85; BYTE $0x91; BYTE $0x00
    // lea 0x91a07e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x7e; BYTE $0xa0; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x92d8a7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xa7; BYTE $0xd8; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x9185a7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa7; BYTE $0x85; BYTE $0x91; BYTE $0x00
    // lea 0x91a05e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x5e; BYTE $0xa0; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x91602f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x2f; BYTE $0x60; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9184cd(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xcd; BYTE $0x84; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x916065(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x65; BYTE $0x60; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x915706(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x06; BYTE $0x57; BYTE $0x91; BYTE $0x00
    MOVL $0x56, DX
    CALL _Lcf1800
    NOP
    // lea 0x915744(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x44; BYTE $0x57; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L720c97
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L720c97:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x915fab(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xab; BYTE $0x5f; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x918449(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x49; BYTE $0x84; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x92e6f3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xf3; BYTE $0xe6; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x92e3ab(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xab; BYTE $0xe3; BYTE $0x92; BYTE $0x00
    // lea 0x91835c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x5c; BYTE $0x83; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x92e933(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x33; BYTE $0xe9; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x92e38b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8b; BYTE $0xe3; BYTE $0x92; BYTE $0x00
    // lea 0x91833c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x3c; BYTE $0x83; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x92e713(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x13; BYTE $0xe7; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x91983b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x3b; BYTE $0x98; BYTE $0x91; BYTE $0x00
    // lea 0x91831c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x1c; BYTE $0x83; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x92e633(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x33; BYTE $0xe6; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x918473(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x73; BYTE $0x84; BYTE $0x91; BYTE $0x00
    // lea 0x9182fc(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xfc; BYTE $0x82; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x92e793(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x93; BYTE $0xe7; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x92b5e3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe3; BYTE $0xb5; BYTE $0x92; BYTE $0x00
    // lea 0x92b94b(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x4b; BYTE $0xb9; BYTE $0x92; BYTE $0x00
    MOVL $0x3e0, DX
    CALL _L71deb0
    // lea 0x92e813(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x13; BYTE $0xe8; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x92b5c3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc3; BYTE $0xb5; BYTE $0x92; BYTE $0x00
    // lea 0x92b92b(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x2b; BYTE $0xb9; BYTE $0x92; BYTE $0x00
    MOVL $0x3ea, DX
    CALL _L71deb0
    // lea 0x915604(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x04; BYTE $0x56; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    // lea 0x92ee01(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x01; BYTE $0xee; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x918401(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x01; BYTE $0x84; BYTE $0x91; BYTE $0x00
    // lea 0x91828a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x8a; BYTE $0x82; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x92eea1(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xa1; BYTE $0xee; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x9183e1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe1; BYTE $0x83; BYTE $0x91; BYTE $0x00
    // lea 0x91826a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x6a; BYTE $0x82; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x92eee1(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe1; BYTE $0xee; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x9183c1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc1; BYTE $0x83; BYTE $0x91; BYTE $0x00
    // lea 0x91824a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x4a; BYTE $0x82; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x92ee01(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x01; BYTE $0xee; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x9183a1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa1; BYTE $0x83; BYTE $0x91; BYTE $0x00
    // lea 0x91822a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x2a; BYTE $0x82; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x92ec81(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x81; BYTE $0xec; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x92b511(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x11; BYTE $0xb5; BYTE $0x92; BYTE $0x00
    // lea 0x92b879(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x79; BYTE $0xb8; BYTE $0x92; BYTE $0x00
    MOVL $0x3df, DX
    CALL _L71deb0
    // lea 0x92f0e1(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe1; BYTE $0xf0; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x918361(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x61; BYTE $0x83; BYTE $0x91; BYTE $0x00
    // lea 0x9181ea(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xea; BYTE $0x81; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x915de9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe9; BYTE $0x5d; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x918287(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x87; BYTE $0x82; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x915e1f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x1f; BYTE $0x5e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9154c0(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc0; BYTE $0x54; BYTE $0x91; BYTE $0x00
    MOVL $0x56, DX
    CALL _Lcf1800
    NOP
    // lea 0x9154fe(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xfe; BYTE $0x54; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x92fbc5(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xc5; BYTE $0xfb; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x9182e5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe5; BYTE $0x82; BYTE $0x91; BYTE $0x00
    // lea 0x91816e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x6e; BYTE $0x81; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x9154b6(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb6; BYTE $0x54; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    // lea 0x915101(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x01; BYTE $0x51; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa3557e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x7e; BYTE $0x55; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x930f2f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x2f; BYTE $0x0f; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x91826f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x6f; BYTE $0x82; BYTE $0x91; BYTE $0x00
    // lea 0x9180f8(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf8; BYTE $0x80; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x915440(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x40; BYTE $0x54; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x915418(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x18; BYTE $0x54; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    // lea 0x915063(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x63; BYTE $0x50; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa354e0(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe0; BYTE $0x54; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    // lea 0x9320e7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe7; BYTE $0x20; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x9181e7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe7; BYTE $0x81; BYTE $0x91; BYTE $0x00
    // lea 0x918070(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x70; BYTE $0x80; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x931fe7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe7; BYTE $0x1f; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x91956f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x6f; BYTE $0x95; BYTE $0x91; BYTE $0x00
    // lea 0x918050(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x50; BYTE $0x80; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x931e47(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x47; BYTE $0x1e; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x9181a7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa7; BYTE $0x81; BYTE $0x91; BYTE $0x00
    // lea 0x918030(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x30; BYTE $0x80; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x931ee7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe7; BYTE $0x1e; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x918187(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x87; BYTE $0x81; BYTE $0x91; BYTE $0x00
    // lea 0x919c3e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x3e; BYTE $0x9c; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x931f27(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x27; BYTE $0x1f; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x918167(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x67; BYTE $0x81; BYTE $0x91; BYTE $0x00
    // lea 0x919c1e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x1e; BYTE $0x9c; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x915bef(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xef; BYTE $0x5b; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91808d(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x8d; BYTE $0x80; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9152f4(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf4; BYTE $0x52; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x932bfb(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xfb; BYTE $0x2b; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x916a4b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4b; BYTE $0x6a; BYTE $0x91; BYTE $0x00
    // lea 0x916cb0(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb0; BYTE $0x6c; BYTE $0x91; BYTE $0x00
    MOVL $0x150, DX
    CALL _L71deb0
    // lea 0x923c1b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x1b; BYTE $0x3c; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x923c63(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x63; BYTE $0x3c; BYTE $0x92; BYTE $0x00
    MOVL $0xa8, DX
    CALL _Lcf1800
    NOP
    // lea 0x923c01(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x01; BYTE $0x3c; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x923c69(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x69; BYTE $0x3c; BYTE $0x92; BYTE $0x00
    MOVL $0xa9, DX
    CALL _Lcf1800
    // lea 0x914eeb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xeb; BYTE $0x4e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa35368(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x68; BYTE $0x53; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    // lea 0x9329ef(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xef; BYTE $0x29; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x91d00f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x0f; BYTE $0xd0; BYTE $0x91; BYTE $0x00
    // lea 0x917ef8(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf8; BYTE $0x7e; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    // lea 0x932baf(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xaf; BYTE $0x2b; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x91804f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4f; BYTE $0x80; BYTE $0x91; BYTE $0x00
    // lea 0x919b06(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x06; BYTE $0x9b; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x91504b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4b; BYTE $0x50; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x914ed7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd7; BYTE $0x4e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x914eec(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xec; BYTE $0x4e; BYTE $0x91; BYTE $0x00
    MOVL $0x14d, DX
    CALL _Lcf1800
    NOP
    // lea 0x914ebd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xbd; BYTE $0x4e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x914ee4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe4; BYTE $0x4e; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    // lea 0x914e37(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x37; BYTE $0x4e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa352b4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb4; BYTE $0x52; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    // lea 0x9341fb(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xfb; BYTE $0x41; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917fbb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xbb; BYTE $0x7f; BYTE $0x91; BYTE $0x00
    // lea 0x919a72(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x72; BYTE $0x9a; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x915a43(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x43; BYTE $0x5a; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x917ee1(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe1; BYTE $0x7e; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x915172(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x72; BYTE $0x51; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x91514a(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4a; BYTE $0x51; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    // lea 0x914d95(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x95; BYTE $0x4d; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa35212(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x12; BYTE $0x52; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    // lea 0x9159c1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc1; BYTE $0x59; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x917e5f(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x5f; BYTE $0x7e; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x9150f0(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf0; BYTE $0x50; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    // lea 0x9159e5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe5; BYTE $0x59; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x915086(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x86; BYTE $0x50; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L72131b
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L72131b:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x934ebd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xbd; BYTE $0x4e; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    MOVL $0x48ca, DI
    CALL _Lcf1360
    // lea 0x914e5e(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x5e; BYTE $0x4e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x914e73(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x73; BYTE $0x4e; BYTE $0x91; BYTE $0x00
    MOVL $0xb1, DX
    CALL _Lcf1800
    NOP
    // lea 0x91aae8(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe8; BYTE $0xaa; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x33d9, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    // lea 0x914ca5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa5; BYTE $0x4c; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa35122(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x22; BYTE $0x51; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    // lea 0x914c77(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x77; BYTE $0x4c; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa350f4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf4; BYTE $0x50; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x937ac5(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xc5; BYTE $0x7a; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x916715(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x15; BYTE $0x67; BYTE $0x91; BYTE $0x00
    // lea 0x91697a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x7a; BYTE $0x69; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    PUSHQ AX
    MOVL $0x8, DI
    CALL _L71e370
    // lea 0xe87eda(%rip),%rdx
    BYTE $0x48; BYTE $0x8d; BYTE $0x15; BYTE $0xda; BYTE $0x7e; BYTE $0xe8; BYTE $0x00
    // lea 0xe87e33(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x33; BYTE $0x7e; BYTE $0xe8; BYTE $0x00
    MOVQ AX, DI
    ADDQ $0x10, DX
    MOVQ DX, (AX)
    // lea 0x1e81c2(%rip),%rdx
    BYTE $0x48; BYTE $0x8d; BYTE $0x15; BYTE $0xc2; BYTE $0x81; BYTE $0x1e; BYTE $0x00
    CALL _L71e950
    NOP
    // lea 0x9377b5(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xb5; BYTE $0x77; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x9190fd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xfd; BYTE $0x90; BYTE $0x91; BYTE $0x00
    // lea 0x917bde(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xde; BYTE $0x7b; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x937675(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x75; BYTE $0x76; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x9190dd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xdd; BYTE $0x90; BYTE $0x91; BYTE $0x00
    // lea 0x917bbe(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xbe; BYTE $0x7b; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    PUSHQ BX
    MOVQ DI, BX
    MOVQ $0x200, 0x14(DI)
    MOVL $0x200, DI
    CALL _L71eda0
    TESTQ AX, AX
    MOVQ AX, 0x8(BX)
    JNE _L7214d3
    // lea 0x914b70(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x70; BYTE $0x4b; BYTE $0x91; BYTE $0x00
    MOVL $0x2710, DI
    CALL _Lcf1500
_L7214d3:
    MOVQ $0x0, 0x10(BX)
    POPQ BX
    RET
    PUSHQ R13
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    PUSHQ R12
    PUSHQ BP
    MOVQ DI, BP
    PUSHQ BX
    MOVQ SI, BX
    PUSHQ DX
    MOVQ (SI), DI
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(SI)
    MOVL 0x10(BP), R13
    LEAL 0x0(R13)(CX*1), R12
    CMPL R12, 0x14(BP)
    JLE _L721518
    MOVL R12, SI
    MOVQ BP, DI
    CALL _L75d9f0
_L721518:
    MOVL R12, 0x10(BP)
    // movslq %r13d,%rdx
    BYTE $0x49; BYTE $0x63; BYTE $0xd5
    ADDQ 0x8(BP), DX
    CMPQ 0x8(BX), $0xffffffffffffffff
    MOVQ (BX), SI
    JNE _L721542
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    MOVQ SI, DI
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(BX)
_L721542:
    MOVQ 0x8(BX), CX
    MOVQ DX, DI
    // rep movsb
    BYTE $0xf3; BYTE $0xa4
    POPQ AX
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x936c1b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x1b; BYTE $0x6c; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x936c33(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x33; BYTE $0x6c; BYTE $0x93; BYTE $0x00
    MOVL $0x66, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVL $0x8, DI
    CALL _L71e370
    // lea 0xe87d76(%rip),%rdx
    BYTE $0x48; BYTE $0x8d; BYTE $0x15; BYTE $0x76; BYTE $0x7d; BYTE $0xe8; BYTE $0x00
    // lea 0xe87ccf(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcf; BYTE $0x7c; BYTE $0xe8; BYTE $0x00
    MOVQ AX, DI
    ADDQ $0x10, DX
    MOVQ DX, (AX)
    // lea 0x1e805e(%rip),%rdx
    BYTE $0x48; BYTE $0x8d; BYTE $0x15; BYTE $0x5e; BYTE $0x80; BYTE $0x1e; BYTE $0x00
    CALL _L71e950
    NOP
    // lea 0x938191(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x91; BYTE $0x81; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x918f99(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x99; BYTE $0x8f; BYTE $0x91; BYTE $0x00
    // lea 0x917a7a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x7a; BYTE $0x7a; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x9380b1(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xb1; BYTE $0x80; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917bd1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd1; BYTE $0x7b; BYTE $0x91; BYTE $0x00
    // lea 0x917a5a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x5a; BYTE $0x7a; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x9380f1(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xf1; BYTE $0x80; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917bb1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb1; BYTE $0x7b; BYTE $0x91; BYTE $0x00
    // lea 0x919668(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x68; BYTE $0x96; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x938611(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x11; BYTE $0x86; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917b91(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x91; BYTE $0x7b; BYTE $0x91; BYTE $0x00
    // lea 0x917a1a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x1a; BYTE $0x7a; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x938591(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x91; BYTE $0x85; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917b71(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x71; BYTE $0x7b; BYTE $0x91; BYTE $0x00
    // lea 0x919628(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x28; BYTE $0x96; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x9155f9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf9; BYTE $0x55; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x917a97(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x97; BYTE $0x7a; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x914b69(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x69; BYTE $0x4b; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x9149f5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf5; BYTE $0x49; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x914a1c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x1c; BYTE $0x4a; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x9155b3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb3; BYTE $0x55; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x917a51(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x51; BYTE $0x7a; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x914b23(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x23; BYTE $0x4b; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x9149af(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xaf; BYTE $0x49; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9149d6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xd6; BYTE $0x49; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x91556d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x6d; BYTE $0x55; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x917a0b(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x0b; BYTE $0x7a; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x93920b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x0b; BYTE $0x92; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917aab(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xab; BYTE $0x7a; BYTE $0x91; BYTE $0x00
    // lea 0x917934(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x34; BYTE $0x79; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x93934b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x4b; BYTE $0x93; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917a8b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8b; BYTE $0x7a; BYTE $0x91; BYTE $0x00
    // lea 0x917914(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x14; BYTE $0x79; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x93938b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x8b; BYTE $0x93; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917a6b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x6b; BYTE $0x7a; BYTE $0x91; BYTE $0x00
    // lea 0x919522(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x22; BYTE $0x95; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x9394cb(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xcb; BYTE $0x94; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917a4b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4b; BYTE $0x7a; BYTE $0x91; BYTE $0x00
    // lea 0x9178d4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xd4; BYTE $0x78; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x93950b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x0b; BYTE $0x95; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917a2b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x2b; BYTE $0x7a; BYTE $0x91; BYTE $0x00
    // lea 0x9178b4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb4; BYTE $0x78; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x9397eb(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xeb; BYTE $0x97; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917a0b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x0b; BYTE $0x7a; BYTE $0x91; BYTE $0x00
    // lea 0x917894(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x94; BYTE $0x78; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x939a4b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x4b; BYTE $0x9a; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x9179eb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xeb; BYTE $0x79; BYTE $0x91; BYTE $0x00
    // lea 0x917874(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x74; BYTE $0x78; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x93996b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x6b; BYTE $0x99; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x9179cb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcb; BYTE $0x79; BYTE $0x91; BYTE $0x00
    // lea 0x917854(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x54; BYTE $0x78; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x915453(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x53; BYTE $0x54; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9178f1(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf1; BYTE $0x78; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x939b91(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x91; BYTE $0x9b; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917991(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x91; BYTE $0x79; BYTE $0x91; BYTE $0x00
    // lea 0x91781a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x1a; BYTE $0x78; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x939bf1(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xf1; BYTE $0x9b; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917971(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x71; BYTE $0x79; BYTE $0x91; BYTE $0x00
    // lea 0x9177fa(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xfa; BYTE $0x77; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x914983(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x83; BYTE $0x49; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x91480f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x0f; BYTE $0x48; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x914836(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x36; BYTE $0x48; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x939da5(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xa5; BYTE $0x9d; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917925(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x25; BYTE $0x79; BYTE $0x91; BYTE $0x00
    // lea 0x9177ae(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xae; BYTE $0x77; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x939de5(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe5; BYTE $0x9d; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917905(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x05; BYTE $0x79; BYTE $0x91; BYTE $0x00
    // lea 0x9193bc(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xbc; BYTE $0x93; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L7218f3
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L7218f3:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x93a0bd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xbd; BYTE $0xa0; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x9178bd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xbd; BYTE $0x78; BYTE $0x91; BYTE $0x00
    // lea 0x917746(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x46; BYTE $0x77; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x915345(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x45; BYTE $0x53; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9177e3(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe3; BYTE $0x77; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x93a4a3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xa3; BYTE $0xa4; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x91c823(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x23; BYTE $0xc8; BYTE $0x91; BYTE $0x00
    // lea 0x91770c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x0c; BYTE $0x77; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    // lea 0x93a743(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x43; BYTE $0xa7; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x91c803(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x03; BYTE $0xc8; BYTE $0x91; BYTE $0x00
    // lea 0x9176ec(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xec; BYTE $0x76; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    // lea 0x93a5c3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xc3; BYTE $0xa5; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x91c7e3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe3; BYTE $0xc7; BYTE $0x91; BYTE $0x00
    // lea 0x9176cc(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xcc; BYTE $0x76; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    // lea 0x9152cb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcb; BYTE $0x52; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x917769(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x69; BYTE $0x77; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x93aaf3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xf3; BYTE $0xaa; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x9177f3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf3; BYTE $0x77; BYTE $0x91; BYTE $0x00
    // lea 0x91767c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x7c; BYTE $0x76; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x93ab93(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x93; BYTE $0xab; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x9177d3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd3; BYTE $0x77; BYTE $0x91; BYTE $0x00
    // lea 0x91928a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x8a; BYTE $0x92; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x93ab13(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x13; BYTE $0xab; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x9177b3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb3; BYTE $0x77; BYTE $0x91; BYTE $0x00
    // lea 0x91926a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x6a; BYTE $0x92; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x91523b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x3b; BYTE $0x52; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9176d9(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xd9; BYTE $0x76; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x93ad79(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x79; BYTE $0xad; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917779(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x79; BYTE $0x77; BYTE $0x91; BYTE $0x00
    // lea 0x917602(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x02; BYTE $0x76; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x93ac79(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x79; BYTE $0xac; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x918b01(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x01; BYTE $0x8b; BYTE $0x91; BYTE $0x00
    // lea 0x9175e2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe2; BYTE $0x75; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x93add9(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xd9; BYTE $0xad; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917739(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x39; BYTE $0x77; BYTE $0x91; BYTE $0x00
    // lea 0x9175c2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc2; BYTE $0x75; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x93b303(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x03; BYTE $0xb3; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917703(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x03; BYTE $0x77; BYTE $0x91; BYTE $0x00
    // lea 0x91758c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x8c; BYTE $0x75; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x93b0c3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xc3; BYTE $0xb0; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x9176e3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe3; BYTE $0x76; BYTE $0x91; BYTE $0x00
    // lea 0x91756c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x6c; BYTE $0x75; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x93b1a3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xa3; BYTE $0xb1; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x9176c3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc3; BYTE $0x76; BYTE $0x91; BYTE $0x00
    // lea 0x91754c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x4c; BYTE $0x75; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x93af83(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x83; BYTE $0xaf; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x9176a3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa3; BYTE $0x76; BYTE $0x91; BYTE $0x00
    // lea 0x91752c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x2c; BYTE $0x75; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x93b0c3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xc3; BYTE $0xb0; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917683(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x83; BYTE $0x76; BYTE $0x91; BYTE $0x00
    // lea 0x91913a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x3a; BYTE $0x91; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x91510b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x0b; BYTE $0x51; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9175a9(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa9; BYTE $0x75; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x915141(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x41; BYTE $0x51; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9147e2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe2; BYTE $0x47; BYTE $0x91; BYTE $0x00
    MOVL $0x56, DX
    CALL _Lcf1800
    NOP
    // lea 0x914492(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x92; BYTE $0x44; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa3490f(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x0f; BYTE $0x49; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    NOP
    // lea 0x9150bd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xbd; BYTE $0x50; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91755b(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x5b; BYTE $0x75; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x9150a3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa3; BYTE $0x50; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x917541(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x41; BYTE $0x75; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x93baa1(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xa1; BYTE $0xba; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x9175e1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe1; BYTE $0x75; BYTE $0x91; BYTE $0x00
    // lea 0x919098(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x98; BYTE $0x90; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x915069(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x69; BYTE $0x50; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x917507(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x07; BYTE $0x75; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x93c087(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x87; BYTE $0xc0; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x91894f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4f; BYTE $0x89; BYTE $0x91; BYTE $0x00
    // lea 0x917430(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x30; BYTE $0x74; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x93bee7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe7; BYTE $0xbe; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917587(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x87; BYTE $0x75; BYTE $0x91; BYTE $0x00
    // lea 0x917410(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x10; BYTE $0x74; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x93bdc7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xc7; BYTE $0xbd; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917567(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x67; BYTE $0x75; BYTE $0x91; BYTE $0x00
    // lea 0x91901e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x1e; BYTE $0x90; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x93be47(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x47; BYTE $0xbe; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x917547(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x47; BYTE $0x75; BYTE $0x91; BYTE $0x00
    // lea 0x9173d0(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xd0; BYTE $0x73; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L721cb1
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L721cb1:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x914493(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x93; BYTE $0x44; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9145df(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xdf; BYTE $0x45; BYTE $0x91; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    // lea 0x9146d6(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd6; BYTE $0x46; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    // lea 0x914fcb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcb; BYTE $0x4f; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91466c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x6c; BYTE $0x46; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _Lcf1800
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L721d1f
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L721d1f:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L721d5d
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L721d5d:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L721d9b
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L721d9b:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x9143a9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa9; BYTE $0x43; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9144f5(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf5; BYTE $0x44; BYTE $0x91; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    // lea 0x9145ec(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xec; BYTE $0x45; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    // lea 0x914ee1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe1; BYTE $0x4e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x914582(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x82; BYTE $0x45; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L721e1f
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L721e1f:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ R15
    MOVQ SI, R15
    PUSHQ R14
    MOVQ DI, R14
    PUSHQ R13
    XORL R13, R13
    PUSHQ R12
    PUSHQ BP
    PUSHQ BX
    SUBQ $0x18, SP
    LEAQ 0xf(SP), R12
_L721e44:
    CMPQ R13, R15
    JE _L721e7f
    MOVQ (R14)(R13*8), BX
_L721e4d:
    TESTQ BX, BX
    JE _L721e72
    MOVQ (BX), AX
    MOVQ 0x10(BX), BP
    MOVQ R12, SI
    LEAQ -0x18(AX), DI
    CALL _L71edb0
    MOVQ BX, DI
    MOVQ BP, BX
    CALL _L71ebe0
    JMP _L721e4d
_L721e72:
    MOVQ $0x0, (R14)(R13*8)
    INCQ R13
    JMP _L721e44
_L721e7f:
    ADDQ $0x18, SP
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    POPQ R14
    POPQ R15
    RET
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L721ead
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L721ead:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x914dab(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xab; BYTE $0x4d; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x917249(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x49; BYTE $0x72; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x91427d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x7d; BYTE $0x42; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9143c9(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc9; BYTE $0x43; BYTE $0x91; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    // lea 0x914dc7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc7; BYTE $0x4d; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x914468(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x68; BYTE $0x44; BYTE $0x91; BYTE $0x00
    MOVL $0x56, DX
    CALL _Lcf1800
    NOP
    PUSHQ R15
    MOVQ SI, R15
    PUSHQ R14
    MOVQ DI, R14
    PUSHQ R13
    XORL R13, R13
    PUSHQ R12
    PUSHQ BP
    PUSHQ BX
    SUBQ $0x18, SP
    LEAQ 0xf(SP), R12
_L721f20:
    CMPQ R13, R15
    JE _L721f5b
    MOVQ (R14)(R13*8), BX
_L721f29:
    TESTQ BX, BX
    JE _L721f4e
    MOVQ (BX), AX
    MOVQ 0x10(BX), BP
    MOVQ R12, SI
    LEAQ -0x18(AX), DI
    CALL _L71edb0
    MOVQ BX, DI
    MOVQ BP, BX
    CALL _L71ebe0
    JMP _L721f29
_L721f4e:
    MOVQ $0x0, (R14)(R13*8)
    INCQ R13
    JMP _L721f20
_L721f5b:
    ADDQ $0x18, SP
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    POPQ R14
    POPQ R15
    RET
    // lea 0x93d78f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x8f; BYTE $0xd7; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x91c1ef(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xef; BYTE $0xc1; BYTE $0x91; BYTE $0x00
    // lea 0x9170d8(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xd8; BYTE $0x70; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    // lea 0x93d60f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x0f; BYTE $0xd6; BYTE $0x93; BYTE $0x00
    PUSHQ AX
    // lea 0x91c1cf(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcf; BYTE $0xc1; BYTE $0x91; BYTE $0x00
    // lea 0x9170b8(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb8; BYTE $0x70; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    // lea 0x940d6f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x6f; BYTE $0x0d; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x91c1af(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xaf; BYTE $0xc1; BYTE $0x91; BYTE $0x00
    // lea 0x917098(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x98; BYTE $0x70; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x942343(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x43; BYTE $0x23; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x91856b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x6b; BYTE $0x85; BYTE $0x91; BYTE $0x00
    // lea 0x91704c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x4c; BYTE $0x70; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x942243(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x43; BYTE $0x22; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x91854b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4b; BYTE $0x85; BYTE $0x91; BYTE $0x00
    // lea 0x91702c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x2c; BYTE $0x70; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x942143(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x43; BYTE $0x21; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x91852b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x2b; BYTE $0x85; BYTE $0x91; BYTE $0x00
    // lea 0x91700c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x0c; BYTE $0x70; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x942063(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x63; BYTE $0x20; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x91850b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x0b; BYTE $0x85; BYTE $0x91; BYTE $0x00
    // lea 0x916fec(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xec; BYTE $0x6f; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x941f83(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x83; BYTE $0x1f; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x9184eb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xeb; BYTE $0x84; BYTE $0x91; BYTE $0x00
    // lea 0x916fcc(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xcc; BYTE $0x6f; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x941e83(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x83; BYTE $0x1e; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x9184cb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcb; BYTE $0x84; BYTE $0x91; BYTE $0x00
    // lea 0x916fac(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xac; BYTE $0x6f; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x941d83(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x83; BYTE $0x1d; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x9184ab(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xab; BYTE $0x84; BYTE $0x91; BYTE $0x00
    // lea 0x916f8c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x8c; BYTE $0x6f; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x941c83(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x83; BYTE $0x1c; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x91848b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8b; BYTE $0x84; BYTE $0x91; BYTE $0x00
    // lea 0x916f6c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x6c; BYTE $0x6f; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x941b83(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x83; BYTE $0x1b; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x91846b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x6b; BYTE $0x84; BYTE $0x91; BYTE $0x00
    // lea 0x916f4c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x4c; BYTE $0x6f; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x941a83(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x83; BYTE $0x1a; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x91844b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4b; BYTE $0x84; BYTE $0x91; BYTE $0x00
    // lea 0x916f2c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x2c; BYTE $0x6f; BYTE $0x91; BYTE $0x00
    MOVL $0x281, DX
    CALL _L71deb0
    // lea 0x941543(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x43; BYTE $0x15; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x91842b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x2b; BYTE $0x84; BYTE $0x91; BYTE $0x00
    // lea 0x916f0c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x0c; BYTE $0x6f; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x941463(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x63; BYTE $0x14; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x91840b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x0b; BYTE $0x84; BYTE $0x91; BYTE $0x00
    // lea 0x916eec(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xec; BYTE $0x6e; BYTE $0x91; BYTE $0x00
    MOVL $0x281, DX
    CALL _L71deb0
    // lea 0x914aeb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xeb; BYTE $0x4a; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x916f89(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x89; BYTE $0x6f; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L7221af
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L7221af:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x913f95(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x95; BYTE $0x3f; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9140e1(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe1; BYTE $0x40; BYTE $0x91; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    // lea 0x9141d8(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd8; BYTE $0x41; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ R12
    PUSHQ BP
    PUSHQ BX
    MOVQ DI, BX
    LEAQ 0x40(BX), R12
    SUBQ $0x30, SP
    MOVL 0x8(DI), SI
    MOVSD X0, 0x8(SP)
    LEAQ 0x20(SP), BP
    LEAL 0x1(SI), AX
    MOVL AX, 0x8(DI)
    LEAQ 0x10(SP), DI
    CALL _L77a4a0
    MOVQ 0x10(SP), AX
    MOVQ BP, SI
    MOVQ R12, DI
    TESTQ AX, AX
    MOVQ AX, 0x20(SP)
    SETNE AX
    // movzbl %al,%eax
    BYTE $0x0f; BYTE $0xb6; BYTE $0xc0
    // neg %rax
    BYTE $0x48; BYTE $0xf7; BYTE $0xd8
    MOVQ AX, 0x28(SP)
    CALL _L761030
    MOVQ 0x50(BX), DI
    MOVSD 0x8(SP), X0
    MOVQ R12, SI
    MOVQ (DI), AX
    CALL *0x40(AX)
    MOVQ 0x10(SP), AX
    MOVQ $0x0, 0x40(BX)
    MOVQ BP, SI
    MOVQ $0x0, 0x48(BX)
    LEAQ -0x18(AX), DI
    CALL _L71edb0
    ADDQ $0x30, SP
    MOVQ BX, AX
    POPQ BX
    POPQ BP
    POPQ R12
    RET
    MOVQ AX, BX
    MOVQ 0x10(SP), AX
    MOVQ BP, SI
    LEAQ -0x18(AX), DI
    CALL _L71edb0
    MOVQ BX, DI
    CALL _L71ea10
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L7222c9
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L7222c9:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L7222f1
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L7222f1:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x914967(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x67; BYTE $0x49; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x916e05(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x05; BYTE $0x6e; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x914096(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x96; BYTE $0x40; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L722345
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L722345:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x913dff(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xff; BYTE $0x3d; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x913f4b(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x4b; BYTE $0x3f; BYTE $0x91; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    // lea 0x942831(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x31; BYTE $0x28; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x9181f9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf9; BYTE $0x81; BYTE $0x91; BYTE $0x00
    // lea 0x916cda(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xda; BYTE $0x6c; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x914022(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x22; BYTE $0x40; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x943869(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x69; BYTE $0x38; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x915779(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x79; BYTE $0x57; BYTE $0x91; BYTE $0x00
    // lea 0x9159de(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xde; BYTE $0x59; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    // lea 0x913e1b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x1b; BYTE $0x3e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x913ca7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa7; BYTE $0x3c; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x913cce(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xce; BYTE $0x3c; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x9433bd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xbd; BYTE $0x33; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x918165(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x65; BYTE $0x81; BYTE $0x91; BYTE $0x00
    // lea 0x916c46(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x46; BYTE $0x6c; BYTE $0x91; BYTE $0x00
    MOVL $0x281, DX
    CALL _L71deb0
    // lea 0x94331d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x1d; BYTE $0x33; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x916d9d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x9d; BYTE $0x6d; BYTE $0x91; BYTE $0x00
    // lea 0x916c26(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x26; BYTE $0x6c; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x94357d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x7d; BYTE $0x35; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x918125(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x25; BYTE $0x81; BYTE $0x91; BYTE $0x00
    // lea 0x916c06(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x06; BYTE $0x6c; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x94315d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x5d; BYTE $0x31; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x916d5d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x5d; BYTE $0x6d; BYTE $0x91; BYTE $0x00
    // lea 0x916be6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe6; BYTE $0x6b; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x9147e5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe5; BYTE $0x47; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x916c83(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x83; BYTE $0x6c; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ R12
    MOVQ DI, R12
    PUSHQ BP
    MOVQ SI, BP
    MOVL $0x18, SI
    PUSHQ BX
    SUBQ $0x190, SP
    LEAQ 0x20(SP), BX
    MOVQ BX, DI
    CALL _L71ef30
    LEAQ 0x10(BX), DI
    // lea 0x943ce0(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe0; BYTE $0x3c; BYTE $0x94; BYTE $0x00
    CALL _L71e7e0
    MOVQ R12, SI
    MOVQ AX, DI
    CALL _L71e7e0
    // lea 0x943d84(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x84; BYTE $0x3d; BYTE $0x94; BYTE $0x00
    MOVQ AX, DI
    CALL _L71e7e0
    MOVQ BP, SI
    MOVQ AX, DI
    CALL _L71e7e0
    // lea 0x9d9fd1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd1; BYTE $0x9f; BYTE $0x9d; BYTE $0x00
    MOVQ AX, DI
    CALL _L71e7e0
    LEAQ 0x10(SP), BP
    LEAQ 0x18(BX), SI
    MOVQ BP, DI
    CALL _L71e680
    MOVQ BP, SI
    MOVL $0x2768, DI
    CALL _Lcf14f0
    MOVQ AX, BP
    MOVQ 0x10(SP), AX
    LEAQ 0xf(SP), SI
    LEAQ -0x18(AX), DI
    CALL _L71edb0
    JMP _L72254a
    MOVQ AX, BP
_L72254a:
    MOVQ BX, DI
    CALL _L71dda0
    MOVQ BP, DI
    CALL _L71ea10
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L722579
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L722579:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x9146df(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xdf; BYTE $0x46; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x916b7d(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x7d; BYTE $0x6b; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x9146c5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc5; BYTE $0x46; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x916b63(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x63; BYTE $0x6b; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x913c35(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x35; BYTE $0x3c; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x913ac1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc1; BYTE $0x3a; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x913ae8(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe8; BYTE $0x3a; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    // lea 0x913db4(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb4; BYTE $0x3d; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    // lea 0x9139ff(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xff; BYTE $0x39; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa33e7c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x7c; BYTE $0x3e; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    // lea 0x944aa3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xa3; BYTE $0x4a; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x916b83(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x83; BYTE $0x6b; BYTE $0x91; BYTE $0x00
    // lea 0x91863a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x3a; BYTE $0x86; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L722675
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L722675:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x94540f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x0f; BYTE $0x54; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x916b0f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x0f; BYTE $0x6b; BYTE $0x91; BYTE $0x00
    // lea 0x916998(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x98; BYTE $0x69; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x946719(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x19; BYTE $0x67; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x917e81(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x81; BYTE $0x7e; BYTE $0x91; BYTE $0x00
    // lea 0x916962(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x62; BYTE $0x69; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x946599(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x99; BYTE $0x65; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x916ab9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb9; BYTE $0x6a; BYTE $0x91; BYTE $0x00
    // lea 0x916942(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x42; BYTE $0x69; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x913a74(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x74; BYTE $0x3a; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x913a89(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x89; BYTE $0x3a; BYTE $0x91; BYTE $0x00
    MOVL $0xb1, DX
    CALL _Lcf1800
    NOP
    // lea 0x9196fe(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xfe; BYTE $0x96; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x33d9, DI
    CALL _Lcf1500
    // lea 0x914515(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x15; BYTE $0x45; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9169b3(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb3; BYTE $0x69; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x913c44(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x44; BYTE $0x3c; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x946c0b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x0b; BYTE $0x6c; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x916a2b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x2b; BYTE $0x6a; BYTE $0x91; BYTE $0x00
    // lea 0x9168b4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb4; BYTE $0x68; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L7227e3
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L7227e3:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x9139ff(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xff; BYTE $0x39; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x91388b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8b; BYTE $0x38; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9138b2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb2; BYTE $0x38; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x914449(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x49; BYTE $0x44; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9168e7(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe7; BYTE $0x68; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x91447f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x7f; BYTE $0x44; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x913b20(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x20; BYTE $0x3b; BYTE $0x91; BYTE $0x00
    MOVL $0x56, DX
    CALL _Lcf1800
    NOP
    // lea 0x914465(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x65; BYTE $0x44; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x913b06(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x06; BYTE $0x3b; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _Lcf1800
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    // lea 0x916ebb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xbb; BYTE $0x6e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9d3091(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x91; BYTE $0x30; BYTE $0x9d; BYTE $0x00
    MOVL $0x22, DX
    CALL _Lcf1800
    NOP
    // lea 0x913957(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x57; BYTE $0x39; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x9137e3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe3; BYTE $0x37; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91380a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x0a; BYTE $0x38; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x9143a1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa1; BYTE $0x43; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91683f(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x3f; BYTE $0x68; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    // lea 0x913743(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x43; BYTE $0x37; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa33bc0(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc0; BYTE $0x3b; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    PUSHQ R14
    // lea 0x91a74a(%rip),%rax
    BYTE $0x48; BYTE $0x8d; BYTE $0x05; BYTE $0x4a; BYTE $0xa7; BYTE $0x91; BYTE $0x00
    PUSHQ R13
    MOVQ DI, R13
    PUSHQ R12
    MOVQ SI, R12
    PUSHQ BP
    PUSHQ BX
    SUBQ $0x20, SP
    MOVQ 0x20(DI), R14
    MOVQ R12, DI
    MOVQ SP, SI
    MOVQ AX, (SP)
    MOVQ $0xffffffffffffffff, 0x8(SP)
    CALL _L763f00
    MOVQ AX, BX
    MOVQ DX, AX
    MOVL DX, 0x18(SP)
    SARQ $0x20, AX
    MOVQ BX, 0x10(SP)
    MOVQ SP, BP
    MOVL AX, 0x1c(SP)
    CMPQ (BX), $0x1
    JNE _L722982
    LEAQ 0x10(SP), DI
    CALL _L75c670
    // cltq
    BYTE $0x48; BYTE $0x98
    XORL DX, DX
    MOVSD 0x1(BX)(AX*1), X0
    UCOMISD X0, X0
    // jp 7229de
    BYTE $0x7a; BYTE $0x7e
    // ucomisd 0x917898(%rip),%xmm0
    BYTE $0x66; BYTE $0x0f; BYTE $0x2e; BYTE $0x05; BYTE $0x98; BYTE $0x78; BYTE $0x91; BYTE $0x00
    // movabs $0x7fffffffffffffff,%rdx
    BYTE $0x48; BYTE $0xba; BYTE $0xff; BYTE $0xff; BYTE $0xff; BYTE $0xff; BYTE $0xff; BYTE $0xff; BYTE $0xff; BYTE $0x7f
    JA _L7229de
    // movsd 0x91788c(%rip),%xmm1
    BYTE $0xf2; BYTE $0x0f; BYTE $0x10; BYTE $0x0d; BYTE $0x8c; BYTE $0x78; BYTE $0x91; BYTE $0x00
    UCOMISD X0, X1
    JA _L7229d4
_L722982:
    MOVQ 0x10(SP), BX
    MOVB (BX), AX
    CMPB AX, $0x10
    JE _L7229aa
    CMPB AX, $0x12
    JE _L7229bd
    DECB AX
    JNE _L7229d0
    LEAQ 0x10(SP), DI
    CALL _L75c670
    // cltq
    BYTE $0x48; BYTE $0x98
    // cvttsd2si 0x1(%rbx,%rax,1),%rdx
    BYTE $0xf2; BYTE $0x48; BYTE $0x0f; BYTE $0x2c; BYTE $0x54; BYTE $0x03; BYTE $0x01
    JMP _L7229de
_L7229aa:
    LEAQ 0x10(SP), DI
    CALL _L75c670
    // cltq
    BYTE $0x48; BYTE $0x98
    // movslq 0x1(%rbx,%rax,1),%rdx
    BYTE $0x48; BYTE $0x63; BYTE $0x54; BYTE $0x03; BYTE $0x01
    JMP _L7229de
_L7229bd:
    LEAQ 0x10(SP), DI
    CALL _L75c670
    // cltq
    BYTE $0x48; BYTE $0x98
    MOVQ 0x1(BX)(AX*1), DX
    JMP _L7229de
_L7229d0:
    XORL DX, DX
    JMP _L7229de
_L7229d4:
    // movabs $0x8000000000000000,%rdx
    BYTE $0x48; BYTE $0xba; BYTE $0x00; BYTE $0x00; BYTE $0x00; BYTE $0x00; BYTE $0x00; BYTE $0x00; BYTE $0x00; BYTE $0x80
_L7229de:
    XORL BX, BX
    CMPQ R14, DX
    JNE _L722aa6
    LEAQ 0x10(SP), R14
    // lea 0x9485f3(%rip),%rax
    BYTE $0x48; BYTE $0x8d; BYTE $0x05; BYTE $0xf3; BYTE $0x85; BYTE $0x94; BYTE $0x00
    MOVQ R12, DI
    MOVQ $0xffffffffffffffff, 0x18(SP)
    MOVQ R14, SI
    MOVQ AX, 0x10(SP)
    CALL _L763f00
    MOVQ DX, CX
    MOVQ BP, DI
    MOVQ AX, (SP)
    SARQ $0x20, CX
    MOVL DX, 0x8(SP)
    MOVL CX, 0xc(SP)
    CALL _L762ca0
    TESTB AX, AX
    JNE _L722a38
    MOVQ 0x30(R13), AX
    CMPQ 0x8(AX), $0x0
    JNE _L722aa6
_L722a38:
    // lea 0xed3811(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x11; BYTE $0x38; BYTE $0xed; BYTE $0x00
    CALL _Lbc1590
    MOVQ AX, BX
    // lea 0x9485a6(%rip),%rax
    BYTE $0x48; BYTE $0x8d; BYTE $0x05; BYTE $0xa6; BYTE $0x85; BYTE $0x94; BYTE $0x00
    MOVQ R14, SI
    MOVQ R12, DI
    MOVQ $0xffffffffffffffff, 0x18(SP)
    MOVQ AX, 0x10(SP)
    CALL _L763f00
    MOVQ DX, CX
    MOVQ BP, DI
    MOVQ AX, (SP)
    SARQ $0x20, CX
    MOVL DX, 0x8(SP)
    MOVL CX, 0xc(SP)
    CALL _L75c7d0
    MOVQ BX, DX
    MOVQ BX, AX
    // mulsd 0x917770(%rip),%xmm0
    BYTE $0xf2; BYTE $0x0f; BYTE $0x59; BYTE $0x05; BYTE $0x70; BYTE $0x77; BYTE $0x91; BYTE $0x00
    SARQ $0x3f, DX
    XORQ DX, AX
    SUBQ DX, AX
    // cvtsi2sd %rax,%xmm1
    BYTE $0xf2; BYTE $0x48; BYTE $0x0f; BYTE $0x2a; BYTE $0xc8
    UCOMISD X0, X1
    // setbe %bl
    BYTE $0x0f; BYTE $0x96; BYTE $0xc3
_L722aa6:
    ADDQ $0x20, SP
    MOVB BX, AX
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    POPQ R14
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L722ae9
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L722ae9:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9138a2(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa2; BYTE $0x38; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L722b4f
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L722b4f:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x914109(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x09; BYTE $0x41; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9165a7(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa7; BYTE $0x65; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L722ba7
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L722ba7:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x91363b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x3b; BYTE $0x36; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x9134c7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc7; BYTE $0x34; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9134ee(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xee; BYTE $0x34; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x913497(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x97; BYTE $0x34; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9134be(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xbe; BYTE $0x34; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x914055(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x55; BYTE $0x40; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9164f3(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf3; BYTE $0x64; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L722c45
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L722c45:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L722c6d
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L722c6d:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L722c95
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L722c95:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x91354d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4d; BYTE $0x35; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x9133d9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd9; BYTE $0x33; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x913400(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x00; BYTE $0x34; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x949cd9(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xd9; BYTE $0x9c; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x9164d9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd9; BYTE $0x64; BYTE $0x91; BYTE $0x00
    // lea 0x917f90(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x90; BYTE $0x7f; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L722d1f
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L722d1f:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x949e91(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x91; BYTE $0x9e; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x916491(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x91; BYTE $0x64; BYTE $0x91; BYTE $0x00
    // lea 0x91631a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x1a; BYTE $0x63; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x949db1(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xb1; BYTE $0x9d; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x916471(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x71; BYTE $0x64; BYTE $0x91; BYTE $0x00
    // lea 0x9162fa(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xfa; BYTE $0x62; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x949f71(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x71; BYTE $0x9f; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x916451(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x51; BYTE $0x64; BYTE $0x91; BYTE $0x00
    // lea 0x917f08(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x08; BYTE $0x7f; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x949ef1(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xf1; BYTE $0x9e; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x916431(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x31; BYTE $0x64; BYTE $0x91; BYTE $0x00
    // lea 0x917ee8(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe8; BYTE $0x7e; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L722dc7
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L722dc7:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L722e05
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L722e05:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x913e53(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x53; BYTE $0x3e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9162f1(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf1; BYTE $0x62; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L722e47
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L722e47:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L722e6f
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L722e6f:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x9132d5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd5; BYTE $0x32; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x913421(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x21; BYTE $0x34; BYTE $0x91; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L722eb1
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L722eb1:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x94c1df(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xdf; BYTE $0xc1; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x9162ff(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xff; BYTE $0x62; BYTE $0x91; BYTE $0x00
    // lea 0x916188(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x88; BYTE $0x61; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x913273(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x73; BYTE $0x32; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9133bf(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xbf; BYTE $0x33; BYTE $0x91; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L722f13
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L722f13:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x94c25d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x5d; BYTE $0xc2; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x91629d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x9d; BYTE $0x62; BYTE $0x91; BYTE $0x00
    // lea 0x916126(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x26; BYTE $0x61; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L722f5b
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L722f5b:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x94c455(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x55; BYTE $0xc4; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x916255(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x55; BYTE $0x62; BYTE $0x91; BYTE $0x00
    // lea 0x9160de(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xde; BYTE $0x60; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x9131c9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc9; BYTE $0x31; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x913315(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x15; BYTE $0x33; BYTE $0x91; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L722fbd
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L722fbd:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x94c5f3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xf3; BYTE $0xc5; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x9161f3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf3; BYTE $0x61; BYTE $0x91; BYTE $0x00
    // lea 0x91607c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x7c; BYTE $0x60; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L723005
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L723005:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x94c70b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x0b; BYTE $0xc7; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x9161ab(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xab; BYTE $0x61; BYTE $0x91; BYTE $0x00
    // lea 0x916034(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x34; BYTE $0x60; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x91311f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x1f; BYTE $0x31; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91326b(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x6b; BYTE $0x32; BYTE $0x91; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L723067
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L723067:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x94c7e9(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe9; BYTE $0xc7; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x916149(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x49; BYTE $0x61; BYTE $0x91; BYTE $0x00
    // lea 0x915fd2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xd2; BYTE $0x5f; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L7230af
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L7230af:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x94c961(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x61; BYTE $0xc9; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x916101(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x01; BYTE $0x61; BYTE $0x91; BYTE $0x00
    // lea 0x915f8a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x8a; BYTE $0x5f; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x94c8e1(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe1; BYTE $0xc8; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x9160e1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe1; BYTE $0x60; BYTE $0x91; BYTE $0x00
    // lea 0x915f6a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x6a; BYTE $0x5f; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x913055(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x55; BYTE $0x30; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9131a1(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa1; BYTE $0x31; BYTE $0x91; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    // lea 0x913298(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x98; BYTE $0x32; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L723143
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L723143:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x94ca2d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x2d; BYTE $0xca; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x91606d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x6d; BYTE $0x60; BYTE $0x91; BYTE $0x00
    // lea 0x915ef6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf6; BYTE $0x5e; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x913af5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf5; BYTE $0x3a; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x915f93(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x93; BYTE $0x5f; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    PUSHQ BX
    MOVQ DI, BX
    SUBQ $0x10, SP
    MOVQ 0x8(DI), AX
    LEAQ -0x18(AX), DI
    // cmp 0xec2be3(%rip),%rdi
    BYTE $0x48; BYTE $0x3b; BYTE $0x3d; BYTE $0xe3; BYTE $0x2b; BYTE $0xec; BYTE $0x00
    JE _L7231cf
    // cmpq $0x0,0xec2d69(%rip)
    BYTE $0x48; BYTE $0x83; BYTE $0x3d; BYTE $0x69; BYTE $0x2d; BYTE $0xec; BYTE $0x00; BYTE $0x00
    LEAQ 0x10(DI), DX
    JE _L7231b6
    ORL $0xffffffff, AX
    // lock xadd
    BYTE $0xf0; BYTE $0x0f; BYTE $0xc1; BYTE $0x02
    JMP _L7231c1
_L7231b6:
    MOVL -0x8(AX), DX
    LEAL -0x1(DX), CX
    MOVL CX, -0x8(AX)
    MOVL DX, AX
_L7231c1:
    TESTL AX, AX
    // jg 7231cf
    BYTE $0x7f; BYTE $0x0a
    LEAQ 0xf(SP), SI
    CALL _L71f310
_L7231cf:
    MOVQ BX, DI
    CALL _L71ebe0
    ADDQ $0x10, SP
    POPQ BX
    RET
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L7231fd
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L7231fd:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x94d273(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x73; BYTE $0xd2; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x915fb3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb3; BYTE $0x5f; BYTE $0x91; BYTE $0x00
    // lea 0x915e3c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x3c; BYTE $0x5e; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L723245
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L723245:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x94d34b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x4b; BYTE $0xd3; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x915f6b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x6b; BYTE $0x5f; BYTE $0x91; BYTE $0x00
    // lea 0x915df4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf4; BYTE $0x5d; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    PUSHQ R13
    MOVQ SI, R13
    PUSHQ R12
    MOVQ DI, R12
    PUSHQ BP
    XORL BP, BP
    PUSHQ BX
    PUSHQ DX
_L72327d:
    CMPQ BP, R13
    JE _L7232a6
    MOVQ (R12)(BP*8), DI
_L723286:
    TESTQ DI, DI
    JE _L723299
    MOVQ 0x18(DI), BX
    CALL _L71ebe0
    MOVQ BX, DI
    JMP _L723286
_L723299:
    MOVQ $0x0, (R12)(BP*8)
    INCQ BP
    JMP _L72327d
_L7232a6:
    POPQ AX
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    RET
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L7232cd
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L7232cd:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x94d443(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x43; BYTE $0xd4; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x915ee3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe3; BYTE $0x5e; BYTE $0x91; BYTE $0x00
    // lea 0x915d6c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x6c; BYTE $0x5d; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L723315
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L723315:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x912cfe(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xfe; BYTE $0x2c; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa3317b(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x7b; BYTE $0x31; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    NOP
    // lea 0x94de01(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x01; BYTE $0xde; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x915e81(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x81; BYTE $0x5e; BYTE $0x91; BYTE $0x00
    // lea 0x915d0a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x0a; BYTE $0x5d; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x913052(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x52; BYTE $0x30; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    // lea 0x9138f7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf7; BYTE $0x38; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x915d95(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x95; BYTE $0x5d; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x94e0df(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xdf; BYTE $0xe0; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x9171c7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc7; BYTE $0x71; BYTE $0x91; BYTE $0x00
    // lea 0x915ca8(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa8; BYTE $0x5c; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x912ff0(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf0; BYTE $0x2f; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    // lea 0x912c3b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x3b; BYTE $0x2c; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa330b8(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb8; BYTE $0x30; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x94eb89(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x89; BYTE $0xeb; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x94e591(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x91; BYTE $0xe5; BYTE $0x94; BYTE $0x00
    // lea 0x95cdaf(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xaf; BYTE $0xcd; BYTE $0x95; BYTE $0x00
    MOVL $0xef, DX
    CALL _L71deb0
    // lea 0x94ea49(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x49; BYTE $0xea; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x94e571(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x71; BYTE $0xe5; BYTE $0x94; BYTE $0x00
    // lea 0x94e59a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x9a; BYTE $0xe5; BYTE $0x94; BYTE $0x00
    MOVL $0x148, DX
    CALL _L71deb0
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L72346f
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L72346f:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x94efa1(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xa1; BYTE $0xef; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x92bc19(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x19; BYTE $0xbc; BYTE $0x92; BYTE $0x00
    // lea 0x915bca(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xca; BYTE $0x5b; BYTE $0x91; BYTE $0x00
    MOVL $0xa8, DX
    CALL _L71deb0
    // lea 0x912cb5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb5; BYTE $0x2c; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x912e01(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x01; BYTE $0x2e; BYTE $0x91; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    // lea 0x94f047(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x47; BYTE $0xf0; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x92bbdf(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xdf; BYTE $0xbb; BYTE $0x92; BYTE $0x00
    // lea 0x915b90(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x90; BYTE $0x5b; BYTE $0x91; BYTE $0x00
    MOVL $0xa8, DX
    CALL _L71deb0
    // lea 0x94f087(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x87; BYTE $0xf0; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x92bbbf(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xbf; BYTE $0xbb; BYTE $0x92; BYTE $0x00
    // lea 0x915b70(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x70; BYTE $0x5b; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x91376f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x6f; BYTE $0x37; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x915c0d(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x0d; BYTE $0x5c; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x912e9e(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x9e; BYTE $0x2e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ BX
    MOVQ DI, BX
    MOVQ 0x8(DI), DI
    TESTQ DI, DI
    JE _L72353d
    ORL $0xffffffff, DX
    // lock xadd
    BYTE $0xf0; BYTE $0x0f; BYTE $0xc1; BYTE $0x57; BYTE $0x08
    DECL DX
    JNE _L72353d
    MOVQ (DI), DX
    CALL *0x8(DX)
_L72353d:
    MOVQ $0x0, (BX)
    POPQ BX
    RET
    // lea 0x94fab7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xb7; BYTE $0xfa; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x92bb4f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4f; BYTE $0xbb; BYTE $0x92; BYTE $0x00
    // lea 0x915b00(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x00; BYTE $0x5b; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x94fa37(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x37; BYTE $0xfa; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x915c57(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x57; BYTE $0x5c; BYTE $0x91; BYTE $0x00
    // lea 0x915ae0(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe0; BYTE $0x5a; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x94f9b7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xb7; BYTE $0xf9; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x915c37(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x37; BYTE $0x5c; BYTE $0x91; BYTE $0x00
    // lea 0x915ac0(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc0; BYTE $0x5a; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x94f937(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x37; BYTE $0xf9; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x915c17(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x17; BYTE $0x5c; BYTE $0x91; BYTE $0x00
    // lea 0x915aa0(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa0; BYTE $0x5a; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x94f6f7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xf7; BYTE $0xf6; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x915bf7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf7; BYTE $0x5b; BYTE $0x91; BYTE $0x00
    // lea 0x9176ae(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xae; BYTE $0x76; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x9502b7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xb7; BYTE $0x02; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x916f7f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x7f; BYTE $0x6f; BYTE $0x91; BYTE $0x00
    // lea 0x915a60(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x60; BYTE $0x5a; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x951117(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x17; BYTE $0x11; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92ba8f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8f; BYTE $0xba; BYTE $0x92; BYTE $0x00
    // lea 0x915a40(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x40; BYTE $0x5a; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x9503f7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xf7; BYTE $0x03; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x915b97(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x97; BYTE $0x5b; BYTE $0x91; BYTE $0x00
    // lea 0x915a20(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x20; BYTE $0x5a; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x951057(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x57; BYTE $0x10; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x915b77(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x77; BYTE $0x5b; BYTE $0x91; BYTE $0x00
    // lea 0x91762e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x2e; BYTE $0x76; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x950957(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x57; BYTE $0x09; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x915b57(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x57; BYTE $0x5b; BYTE $0x91; BYTE $0x00
    // lea 0x91760e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x0e; BYTE $0x76; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x950c97(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x97; BYTE $0x0c; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x94e31f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x1f; BYTE $0xe3; BYTE $0x94; BYTE $0x00
    // lea 0x95cb3d(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x3d; BYTE $0xcb; BYTE $0x95; BYTE $0x00
    MOVL $0xef, DX
    CALL _L71deb0
    // lea 0x950a37(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x37; BYTE $0x0a; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x94e2ff(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xff; BYTE $0xe2; BYTE $0x94; BYTE $0x00
    // lea 0x94e2a4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa4; BYTE $0xe2; BYTE $0x94; BYTE $0x00
    MOVL $0x215, DX
    CALL _L71deb0
    // lea 0x91359f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x9f; BYTE $0x35; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x915a3d(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x3d; BYTE $0x5a; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x94fddd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xdd; BYTE $0xfd; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x915add(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xdd; BYTE $0x5a; BYTE $0x91; BYTE $0x00
    // lea 0x915966(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x66; BYTE $0x59; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x94fe1d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x1d; BYTE $0xfe; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x915abd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xbd; BYTE $0x5a; BYTE $0x91; BYTE $0x00
    // lea 0x917574(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x74; BYTE $0x75; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x94fe9d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x9d; BYTE $0xfe; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x915a9d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x9d; BYTE $0x5a; BYTE $0x91; BYTE $0x00
    // lea 0x915926(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x26; BYTE $0x59; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x913525(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x25; BYTE $0x35; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9159c3(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc3; BYTE $0x59; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x951de3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe3; BYTE $0x1d; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x916e0b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x0b; BYTE $0x6e; BYTE $0x91; BYTE $0x00
    // lea 0x9158ec(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xec; BYTE $0x58; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x951d03(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x03; BYTE $0x1d; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b91b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x1b; BYTE $0xb9; BYTE $0x92; BYTE $0x00
    // lea 0x9158cc(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xcc; BYTE $0x58; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x9520a3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xa3; BYTE $0x20; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b8fb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xfb; BYTE $0xb8; BYTE $0x92; BYTE $0x00
    // lea 0x9158ac(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xac; BYTE $0x58; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x952023(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x23; BYTE $0x20; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x915a03(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x03; BYTE $0x5a; BYTE $0x91; BYTE $0x00
    // lea 0x91588c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x8c; BYTE $0x58; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x951f43(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x43; BYTE $0x1f; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b8bb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xbb; BYTE $0xb8; BYTE $0x92; BYTE $0x00
    // lea 0x91586c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x6c; BYTE $0x58; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x9520a3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xa3; BYTE $0x20; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x928b53(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x53; BYTE $0x8b; BYTE $0x92; BYTE $0x00
    // lea 0x928ebb(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xbb; BYTE $0x8e; BYTE $0x92; BYTE $0x00
    MOVL $0x3e0, DX
    CALL _L71deb0
    // lea 0x952343(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x43; BYTE $0x23; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b87b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x7b; BYTE $0xb8; BYTE $0x92; BYTE $0x00
    // lea 0x91582c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x2c; BYTE $0x58; BYTE $0x91; BYTE $0x00
    MOVL $0xa8, DX
    CALL _L71deb0
    // lea 0x9523e3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe3; BYTE $0x23; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x915983(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x83; BYTE $0x59; BYTE $0x91; BYTE $0x00
    // lea 0x91580c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x0c; BYTE $0x58; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x952363(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x63; BYTE $0x23; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b83b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x3b; BYTE $0xb8; BYTE $0x92; BYTE $0x00
    // lea 0x9157ec(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xec; BYTE $0x57; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x952223(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x23; BYTE $0x22; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b81b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x1b; BYTE $0xb8; BYTE $0x92; BYTE $0x00
    // lea 0x9157cc(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xcc; BYTE $0x57; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x9523e3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe3; BYTE $0x23; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x928ab3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb3; BYTE $0x8a; BYTE $0x92; BYTE $0x00
    // lea 0x928e1b(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x1b; BYTE $0x8e; BYTE $0x92; BYTE $0x00
    MOVL $0x3e0, DX
    CALL _L71deb0
    PUSHQ R13
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    PUSHQ R12
    PUSHQ BP
    MOVQ DI, BP
    PUSHQ BX
    MOVQ SI, BX
    PUSHQ DX
    MOVQ (SI), DI
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(SI)
    MOVL 0x10(BP), R13
    LEAL 0x0(R13)(CX*1), R12
    CMPL R12, 0x14(BP)
    JLE _L7238f2
    MOVL R12, SI
    MOVQ BP, DI
    CALL _L75d9f0
_L7238f2:
    MOVL R12, 0x10(BP)
    // movslq %r13d,%rdx
    BYTE $0x49; BYTE $0x63; BYTE $0xd5
    ADDQ 0x8(BP), DX
    CMPQ 0x8(BX), $0xffffffffffffffff
    MOVQ (BX), SI
    JNE _L72391c
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    MOVQ SI, DI
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(BX)
_L72391c:
    MOVQ 0x8(BX), CX
    MOVQ DX, DI
    // rep movsb
    BYTE $0xf3; BYTE $0xa4
    POPQ AX
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    RET
    NOP
    // lea 0x95246b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x6b; BYTE $0x24; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b763(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x63; BYTE $0xb7; BYTE $0x92; BYTE $0x00
    // lea 0x915714(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x14; BYTE $0x57; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    PUSHQ R13
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    PUSHQ R12
    PUSHQ BP
    MOVQ DI, BP
    PUSHQ BX
    MOVQ SI, BX
    PUSHQ DX
    MOVQ (SI), DI
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(SI)
    MOVL 0x10(BP), R13
    LEAL 0x0(R13)(CX*1), R12
    CMPL R12, 0x14(BP)
    JLE _L72398a
    MOVL R12, SI
    MOVQ BP, DI
    CALL _L75d9f0
_L72398a:
    MOVL R12, 0x10(BP)
    // movslq %r13d,%rdx
    BYTE $0x49; BYTE $0x63; BYTE $0xd5
    ADDQ 0x8(BP), DX
    CMPQ 0x8(BX), $0xffffffffffffffff
    MOVQ (BX), SI
    JNE _L7239b4
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    MOVQ SI, DI
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(BX)
_L7239b4:
    MOVQ 0x8(BX), CX
    MOVQ DX, DI
    // rep movsb
    BYTE $0xf3; BYTE $0xa4
    POPQ AX
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    RET
    NOP
    // lea 0x912825(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x25; BYTE $0x28; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x9126b1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb1; BYTE $0x26; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9126d8(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xd8; BYTE $0x26; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x952e67(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x67; BYTE $0x2e; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b69f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x9f; BYTE $0xb6; BYTE $0x92; BYTE $0x00
    // lea 0x915650(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x50; BYTE $0x56; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x952dc7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xc7; BYTE $0x2d; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x9157a7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa7; BYTE $0x57; BYTE $0x91; BYTE $0x00
    // lea 0x915630(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x30; BYTE $0x56; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x952d47(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x47; BYTE $0x2d; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b65f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x5f; BYTE $0xb6; BYTE $0x92; BYTE $0x00
    // lea 0x915610(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x10; BYTE $0x56; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x952ca7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xa7; BYTE $0x2c; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x915767(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x67; BYTE $0x57; BYTE $0x91; BYTE $0x00
    // lea 0x91721e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x1e; BYTE $0x72; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x9131ef(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xef; BYTE $0x31; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91568d(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x8d; BYTE $0x56; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x9527ed(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xed; BYTE $0x27; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x916ad5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd5; BYTE $0x6a; BYTE $0x91; BYTE $0x00
    // lea 0x9155b6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb6; BYTE $0x55; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x95266d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x6d; BYTE $0x26; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x91570d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x0d; BYTE $0x57; BYTE $0x91; BYTE $0x00
    // lea 0x915596(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x96; BYTE $0x55; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x9526ad(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xad; BYTE $0x26; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x9156ed(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xed; BYTE $0x56; BYTE $0x91; BYTE $0x00
    // lea 0x9171a4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa4; BYTE $0x71; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x95272d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x2d; BYTE $0x27; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x9156cd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcd; BYTE $0x56; BYTE $0x91; BYTE $0x00
    // lea 0x915556(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x56; BYTE $0x55; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x95362d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x2d; BYTE $0x36; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x9156ad(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xad; BYTE $0x56; BYTE $0x91; BYTE $0x00
    // lea 0x915536(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x36; BYTE $0x55; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    PUSHQ BX
    MOVQ DI, BX
    MOVQ $0x200, 0x14(DI)
    MOVL $0x200, DI
    CALL _L71eda0
    TESTQ AX, AX
    MOVQ AX, 0x8(BX)
    JNE _L723b5b
    // lea 0x9124e8(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe8; BYTE $0x24; BYTE $0x91; BYTE $0x00
    MOVL $0x2710, DI
    CALL _Lcf1500
_L723b5b:
    MOVQ $0x0, 0x10(BX)
    POPQ BX
    RET
    PUSHQ R13
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    PUSHQ R12
    PUSHQ BP
    MOVQ DI, BP
    PUSHQ BX
    MOVQ SI, BX
    PUSHQ DX
    MOVQ (SI), DI
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(SI)
    MOVL 0x10(BP), R13
    LEAL 0x0(R13)(CX*1), R12
    CMPL R12, 0x14(BP)
    JLE _L723ba0
    MOVL R12, SI
    MOVQ BP, DI
    CALL _L75d9f0
_L723ba0:
    MOVL R12, 0x10(BP)
    // movslq %r13d,%rdx
    BYTE $0x49; BYTE $0x63; BYTE $0xd5
    ADDQ 0x8(BP), DX
    CMPQ 0x8(BX), $0xffffffffffffffff
    MOVQ (BX), SI
    JNE _L723bca
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    MOVQ SI, DI
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(BX)
_L723bca:
    MOVQ 0x8(BX), CX
    MOVQ DX, DI
    // rep movsb
    BYTE $0xf3; BYTE $0xa4
    POPQ AX
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    RET
    NOP
    // lea 0x95563d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x3d; BYTE $0x56; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b4b5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb5; BYTE $0xb4; BYTE $0x92; BYTE $0x00
    // lea 0x915466(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x66; BYTE $0x54; BYTE $0x91; BYTE $0x00
    MOVL $0xa8, DX
    CALL _L71deb0
    // lea 0x95601d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x1d; BYTE $0x60; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x91a55d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x5d; BYTE $0xa5; BYTE $0x91; BYTE $0x00
    // lea 0x915446(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x46; BYTE $0x54; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    // lea 0x9559bd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xbd; BYTE $0x59; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b475(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x75; BYTE $0xb4; BYTE $0x92; BYTE $0x00
    // lea 0x915426(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x26; BYTE $0x54; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x955e7d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x7d; BYTE $0x5e; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x91a51d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x1d; BYTE $0xa5; BYTE $0x91; BYTE $0x00
    // lea 0x915406(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x06; BYTE $0x54; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    // lea 0x955c3d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x3d; BYTE $0x5c; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x91a4fd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xfd; BYTE $0xa4; BYTE $0x91; BYTE $0x00
    // lea 0x9153e6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe6; BYTE $0x53; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    // lea 0x955b3d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x3d; BYTE $0x5b; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b415(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x15; BYTE $0xb4; BYTE $0x92; BYTE $0x00
    // lea 0x9153c6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc6; BYTE $0x53; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x955a9d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x9d; BYTE $0x5a; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b3f5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf5; BYTE $0xb3; BYTE $0x92; BYTE $0x00
    // lea 0x9153a6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa6; BYTE $0x53; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x9559fd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xfd; BYTE $0x59; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b3d5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd5; BYTE $0xb3; BYTE $0x92; BYTE $0x00
    // lea 0x915386(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x86; BYTE $0x53; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x95595d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x5d; BYTE $0x59; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b3b5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb5; BYTE $0xb3; BYTE $0x92; BYTE $0x00
    // lea 0x915366(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x66; BYTE $0x53; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x95585d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x5d; BYTE $0x58; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b395(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x95; BYTE $0xb3; BYTE $0x92; BYTE $0x00
    // lea 0x915346(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x46; BYTE $0x53; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x9557bd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xbd; BYTE $0x57; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b375(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x75; BYTE $0xb3; BYTE $0x92; BYTE $0x00
    // lea 0x915326(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x26; BYTE $0x53; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x9556bd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xbd; BYTE $0x56; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b355(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x55; BYTE $0xb3; BYTE $0x92; BYTE $0x00
    // lea 0x915306(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x06; BYTE $0x53; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x95561d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x1d; BYTE $0x56; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b335(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x35; BYTE $0xb3; BYTE $0x92; BYTE $0x00
    // lea 0x9152e6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe6; BYTE $0x52; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x95557d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x7d; BYTE $0x55; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b315(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x15; BYTE $0xb3; BYTE $0x92; BYTE $0x00
    // lea 0x9152c6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc6; BYTE $0x52; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x9554dd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xdd; BYTE $0x54; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b2f5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf5; BYTE $0xb2; BYTE $0x92; BYTE $0x00
    // lea 0x9152a6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa6; BYTE $0x52; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x9553dd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xdd; BYTE $0x53; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b2d5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd5; BYTE $0xb2; BYTE $0x92; BYTE $0x00
    // lea 0x915286(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x86; BYTE $0x52; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x95533d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x3d; BYTE $0x53; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b2b5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb5; BYTE $0xb2; BYTE $0x92; BYTE $0x00
    // lea 0x915266(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x66; BYTE $0x52; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x95529d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x9d; BYTE $0x52; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b295(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x95; BYTE $0xb2; BYTE $0x92; BYTE $0x00
    // lea 0x915246(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x46; BYTE $0x52; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x9551fd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xfd; BYTE $0x51; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b275(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x75; BYTE $0xb2; BYTE $0x92; BYTE $0x00
    // lea 0x915226(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x26; BYTE $0x52; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x95515d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x5d; BYTE $0x51; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b255(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x55; BYTE $0xb2; BYTE $0x92; BYTE $0x00
    // lea 0x915206(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x06; BYTE $0x52; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x9550bd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xbd; BYTE $0x50; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b235(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x35; BYTE $0xb2; BYTE $0x92; BYTE $0x00
    // lea 0x9151e6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe6; BYTE $0x51; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x95501d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x1d; BYTE $0x50; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b215(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x15; BYTE $0xb2; BYTE $0x92; BYTE $0x00
    // lea 0x9151c6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc6; BYTE $0x51; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x954f7d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x7d; BYTE $0x4f; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b1f5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf5; BYTE $0xb1; BYTE $0x92; BYTE $0x00
    // lea 0x9151a6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa6; BYTE $0x51; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x954edd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xdd; BYTE $0x4e; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b1d5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd5; BYTE $0xb1; BYTE $0x92; BYTE $0x00
    // lea 0x915186(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x86; BYTE $0x51; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x954e3d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x3d; BYTE $0x4e; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b1b5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb5; BYTE $0xb1; BYTE $0x92; BYTE $0x00
    // lea 0x915166(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x66; BYTE $0x51; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x954d9d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x9d; BYTE $0x4d; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b195(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x95; BYTE $0xb1; BYTE $0x92; BYTE $0x00
    // lea 0x915146(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x46; BYTE $0x51; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x954cfd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xfd; BYTE $0x4c; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b175(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x75; BYTE $0xb1; BYTE $0x92; BYTE $0x00
    // lea 0x915126(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x26; BYTE $0x51; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x954c5d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x5d; BYTE $0x4c; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b155(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x55; BYTE $0xb1; BYTE $0x92; BYTE $0x00
    // lea 0x915106(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x06; BYTE $0x51; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x954bbd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xbd; BYTE $0x4b; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b135(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x35; BYTE $0xb1; BYTE $0x92; BYTE $0x00
    // lea 0x9150e6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe6; BYTE $0x50; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x954b1d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x1d; BYTE $0x4b; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b115(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x15; BYTE $0xb1; BYTE $0x92; BYTE $0x00
    // lea 0x9150c6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc6; BYTE $0x50; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x954a7d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x7d; BYTE $0x4a; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b0f5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf5; BYTE $0xb0; BYTE $0x92; BYTE $0x00
    // lea 0x9150a6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa6; BYTE $0x50; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x9549dd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xdd; BYTE $0x49; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b0d5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd5; BYTE $0xb0; BYTE $0x92; BYTE $0x00
    // lea 0x915086(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x86; BYTE $0x50; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x95493d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x3d; BYTE $0x49; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b0b5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb5; BYTE $0xb0; BYTE $0x92; BYTE $0x00
    // lea 0x915066(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x66; BYTE $0x50; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x95489d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x9d; BYTE $0x48; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b095(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x95; BYTE $0xb0; BYTE $0x92; BYTE $0x00
    // lea 0x915046(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x46; BYTE $0x50; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x9547fd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xfd; BYTE $0x47; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b075(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x75; BYTE $0xb0; BYTE $0x92; BYTE $0x00
    // lea 0x915026(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x26; BYTE $0x50; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x95475d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x5d; BYTE $0x47; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b055(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x55; BYTE $0xb0; BYTE $0x92; BYTE $0x00
    // lea 0x915006(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x06; BYTE $0x50; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x9546bd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xbd; BYTE $0x46; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b035(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x35; BYTE $0xb0; BYTE $0x92; BYTE $0x00
    // lea 0x914fe6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe6; BYTE $0x4f; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x95461d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x1d; BYTE $0x46; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92b015(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x15; BYTE $0xb0; BYTE $0x92; BYTE $0x00
    // lea 0x914fc6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc6; BYTE $0x4f; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x912bc5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc5; BYTE $0x2b; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x915063(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x63; BYTE $0x50; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x912097(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x97; BYTE $0x20; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9121e3(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe3; BYTE $0x21; BYTE $0x91; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    // lea 0x9579a9(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xa9; BYTE $0x79; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92afc1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc1; BYTE $0xaf; BYTE $0x92; BYTE $0x00
    // lea 0x914f72(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x72; BYTE $0x4f; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x9579e9(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe9; BYTE $0x79; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92afa1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa1; BYTE $0xaf; BYTE $0x92; BYTE $0x00
    // lea 0x914f52(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x52; BYTE $0x4f; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x912b51(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x51; BYTE $0x2b; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x914fef(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xef; BYTE $0x4f; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x912280(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x80; BYTE $0x22; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x957c27(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x27; BYTE $0x7c; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92af3f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x3f; BYTE $0xaf; BYTE $0x92; BYTE $0x00
    // lea 0x914ef0(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf0; BYTE $0x4e; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x957a27(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x27; BYTE $0x7a; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92af1f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x1f; BYTE $0xaf; BYTE $0x92; BYTE $0x00
    // lea 0x914ed0(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xd0; BYTE $0x4e; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x957c47(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x47; BYTE $0x7c; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92aeff(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xff; BYTE $0xae; BYTE $0x92; BYTE $0x00
    // lea 0x914eb0(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb0; BYTE $0x4e; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x957aa7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xa7; BYTE $0x7a; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x9163af(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xaf; BYTE $0x63; BYTE $0x91; BYTE $0x00
    // lea 0x914e90(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x90; BYTE $0x4e; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x9121d8(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd8; BYTE $0x21; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L724219
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L724219:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x911e67(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x67; BYTE $0x1e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x911e7c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x7c; BYTE $0x1e; BYTE $0x91; BYTE $0x00
    MOVL $0x14d, DX
    CALL _Lcf1800
    NOP
    // lea 0x911e4d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4d; BYTE $0x1e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x911e74(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x74; BYTE $0x1e; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVL $0x8, DI
    CALL _L71e370
    // lea 0xe850b8(%rip),%rdx
    BYTE $0x48; BYTE $0x8d; BYTE $0x15; BYTE $0xb8; BYTE $0x50; BYTE $0xe8; BYTE $0x00
    // lea 0xe85011(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x11; BYTE $0x50; BYTE $0xe8; BYTE $0x00
    MOVQ AX, DI
    ADDQ $0x10, DX
    MOVQ DX, (AX)
    // lea 0x1e53a0(%rip),%rdx
    BYTE $0x48; BYTE $0x8d; BYTE $0x15; BYTE $0xa0; BYTE $0x53; BYTE $0x1e; BYTE $0x00
    CALL _L71e950
    NOP
    // lea 0x94df0e(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x0e; BYTE $0xdf; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x957d9f(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x9f; BYTE $0x7d; BYTE $0x95; BYTE $0x00
    MOVL $0x139, DX
    CALL _Lcf1800
    NOP
    // lea 0x94def4(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf4; BYTE $0xde; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x957d99(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x99; BYTE $0x7d; BYTE $0x95; BYTE $0x00
    MOVL $0x13e, DX
    CALL _Lcf1800
    NOP
    // lea 0x94deda(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xda; BYTE $0xde; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x957d91(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x91; BYTE $0x7d; BYTE $0x95; BYTE $0x00
    MOVL $0x148, DX
    CALL _Lcf1800
    NOP
    // lea 0x94dec0(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc0; BYTE $0xde; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x957d8e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x8e; BYTE $0x7d; BYTE $0x95; BYTE $0x00
    MOVL $0x151, DX
    CALL _Lcf1800
    NOP
    // lea 0x94dea6(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa6; BYTE $0xde; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x957d87(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x87; BYTE $0x7d; BYTE $0x95; BYTE $0x00
    MOVL $0x162, DX
    CALL _Lcf1800
    NOP
    // lea 0x94de8c(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8c; BYTE $0xde; BYTE $0x94; BYTE $0x00
    PUSHQ AX
    // lea 0x94dea2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa2; BYTE $0xde; BYTE $0x94; BYTE $0x00
    MOVL $0x16b, DX
    CALL _Lcf1800
    NOP
    // lea 0x958117(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x17; BYTE $0x81; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92ad6f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x6f; BYTE $0xad; BYTE $0x92; BYTE $0x00
    // lea 0x914d20(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x20; BYTE $0x4d; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x958097(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x97; BYTE $0x80; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x92ad4f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4f; BYTE $0xad; BYTE $0x92; BYTE $0x00
    // lea 0x914d00(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x00; BYTE $0x4d; BYTE $0x91; BYTE $0x00
    MOVL $0xae, DX
    CALL _L71deb0
    // lea 0x958877(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x77; BYTE $0x88; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x9161ff(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xff; BYTE $0x61; BYTE $0x91; BYTE $0x00
    // lea 0x914ce0(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe0; BYTE $0x4c; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x958a77(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x77; BYTE $0x8a; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x919dd7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd7; BYTE $0x9d; BYTE $0x91; BYTE $0x00
    // lea 0x914cc0(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc0; BYTE $0x4c; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    // lea 0x9588f7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xf7; BYTE $0x88; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x919db7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb7; BYTE $0x9d; BYTE $0x91; BYTE $0x00
    // lea 0x914ca0(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa0; BYTE $0x4c; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    // lea 0x91289f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x9f; BYTE $0x28; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x914d3d(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x3d; BYTE $0x4d; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x911fce(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xce; BYTE $0x1f; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    // lea 0x958deb(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xeb; BYTE $0x8d; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914dcb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcb; BYTE $0x4d; BYTE $0x91; BYTE $0x00
    // lea 0x914c54(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x54; BYTE $0x4c; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x958eeb(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xeb; BYTE $0x8e; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914dab(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xab; BYTE $0x4d; BYTE $0x91; BYTE $0x00
    // lea 0x914c34(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x34; BYTE $0x4c; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x958f8b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x8b; BYTE $0x8f; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914d8b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8b; BYTE $0x4d; BYTE $0x91; BYTE $0x00
    // lea 0x914c14(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x14; BYTE $0x4c; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x958f0b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x0b; BYTE $0x8f; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914d6b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x6b; BYTE $0x4d; BYTE $0x91; BYTE $0x00
    // lea 0x914bf4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf4; BYTE $0x4b; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x95946b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x6b; BYTE $0x94; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914d4b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4b; BYTE $0x4d; BYTE $0x91; BYTE $0x00
    // lea 0x914bd4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xd4; BYTE $0x4b; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x9594ab(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xab; BYTE $0x94; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914d2b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x2b; BYTE $0x4d; BYTE $0x91; BYTE $0x00
    // lea 0x914bb4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb4; BYTE $0x4b; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x9127b3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb3; BYTE $0x27; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x914c51(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x51; BYTE $0x4c; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x911ee2(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe2; BYTE $0x1e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x911cfb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xfb; BYTE $0x1c; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x911b87(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x87; BYTE $0x1b; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x911bae(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xae; BYTE $0x1b; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x959c5d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x5d; BYTE $0x9c; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914c9d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x9d; BYTE $0x4c; BYTE $0x91; BYTE $0x00
    // lea 0x914b26(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x26; BYTE $0x4b; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x959abd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xbd; BYTE $0x9a; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914c7d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x7d; BYTE $0x4c; BYTE $0x91; BYTE $0x00
    // lea 0x914b06(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x06; BYTE $0x4b; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x912705(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x05; BYTE $0x27; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x914ba3(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa3; BYTE $0x4b; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x959ce3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe3; BYTE $0x9c; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914c43(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x43; BYTE $0x4c; BYTE $0x91; BYTE $0x00
    // lea 0x914acc(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xcc; BYTE $0x4a; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x959d83(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x83; BYTE $0x9d; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x915fcb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcb; BYTE $0x5f; BYTE $0x91; BYTE $0x00
    // lea 0x914aac(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xac; BYTE $0x4a; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x959d03(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x03; BYTE $0x9d; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914c03(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x03; BYTE $0x4c; BYTE $0x91; BYTE $0x00
    // lea 0x914a8c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x8c; BYTE $0x4a; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x911dd4(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd4; BYTE $0x1d; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    // lea 0x911c03(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x03; BYTE $0x1c; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x911a8f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8f; BYTE $0x1a; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x911ab6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb6; BYTE $0x1a; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x91264d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4d; BYTE $0x26; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x914aeb(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xeb; BYTE $0x4a; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x912683(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x83; BYTE $0x26; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x911d24(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x24; BYTE $0x1d; BYTE $0x91; BYTE $0x00
    MOVL $0x56, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x911b8d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8d; BYTE $0x1b; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x911a19(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x19; BYTE $0x1a; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x911a40(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x40; BYTE $0x1a; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x9125d7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd7; BYTE $0x25; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x914a75(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x75; BYTE $0x4a; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x91260d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x0d; BYTE $0x26; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x911cae(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xae; BYTE $0x1c; BYTE $0x91; BYTE $0x00
    MOVL $0x56, DX
    CALL _Lcf1800
    NOP
    // lea 0x95a29b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x9b; BYTE $0xa2; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914afb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xfb; BYTE $0x4a; BYTE $0x91; BYTE $0x00
    // lea 0x914984(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x84; BYTE $0x49; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x95a21b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x1b; BYTE $0xa2; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914adb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xdb; BYTE $0x4a; BYTE $0x91; BYTE $0x00
    // lea 0x914964(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x64; BYTE $0x49; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L72471d
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L72471d:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x911ac5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc5; BYTE $0x1a; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x911951(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x51; BYTE $0x19; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x911978(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x78; BYTE $0x19; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x91250f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x0f; BYTE $0x25; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9149ad(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xad; BYTE $0x49; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x912545(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x45; BYTE $0x25; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x911be6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe6; BYTE $0x1b; BYTE $0x91; BYTE $0x00
    MOVL $0x56, DX
    CALL _Lcf1800
    NOP
    // lea 0x911c24(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x24; BYTE $0x1c; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L7247b7
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L7247b7:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x9124a1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa1; BYTE $0x24; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91493f(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x3f; BYTE $0x49; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x9124d7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd7; BYTE $0x24; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x911b78(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x78; BYTE $0x1b; BYTE $0x91; BYTE $0x00
    MOVL $0x56, DX
    CALL _Lcf1800
    NOP
    // lea 0x95aa85(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x85; BYTE $0xaa; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x9149c5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc5; BYTE $0x49; BYTE $0x91; BYTE $0x00
    // lea 0x91484e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x4e; BYTE $0x48; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x95aac5(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xc5; BYTE $0xaa; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x9149a5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa5; BYTE $0x49; BYTE $0x91; BYTE $0x00
    // lea 0x91482e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x2e; BYTE $0x48; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x95a9e5(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe5; BYTE $0xa9; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914985(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x85; BYTE $0x49; BYTE $0x91; BYTE $0x00
    // lea 0x91480e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x0e; BYTE $0x48; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x95a845(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x45; BYTE $0xa8; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914965(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x65; BYTE $0x49; BYTE $0x91; BYTE $0x00
    // lea 0x9147ee(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xee; BYTE $0x47; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x95a885(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x85; BYTE $0xa8; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914945(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x45; BYTE $0x49; BYTE $0x91; BYTE $0x00
    // lea 0x9147ce(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xce; BYTE $0x47; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x95ab05(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x05; BYTE $0xab; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914925(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x25; BYTE $0x49; BYTE $0x91; BYTE $0x00
    // lea 0x9163dc(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xdc; BYTE $0x63; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x95a905(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x05; BYTE $0xa9; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914905(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x05; BYTE $0x49; BYTE $0x91; BYTE $0x00
    // lea 0x9163bc(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xbc; BYTE $0x63; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x95a885(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x85; BYTE $0xa8; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x9148e5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe5; BYTE $0x48; BYTE $0x91; BYTE $0x00
    // lea 0x91639c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x9c; BYTE $0x63; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x95b16f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x6f; BYTE $0xb1; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x9148af(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xaf; BYTE $0x48; BYTE $0x91; BYTE $0x00
    // lea 0x914738(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x38; BYTE $0x47; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x95b0ef(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xef; BYTE $0xb0; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x91488f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8f; BYTE $0x48; BYTE $0x91; BYTE $0x00
    // lea 0x914718(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x18; BYTE $0x47; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x95b18f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x8f; BYTE $0xb1; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x91486f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x6f; BYTE $0x48; BYTE $0x91; BYTE $0x00
    // lea 0x9146f8(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf8; BYTE $0x46; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x95b00f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x0f; BYTE $0xb0; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x91484f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4f; BYTE $0x48; BYTE $0x91; BYTE $0x00
    // lea 0x9146d8(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xd8; BYTE $0x46; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x95b04f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x4f; BYTE $0xb0; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x91482f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x2f; BYTE $0x48; BYTE $0x91; BYTE $0x00
    // lea 0x9162e6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe6; BYTE $0x62; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x9122b7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb7; BYTE $0x22; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x914755(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x55; BYTE $0x47; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x9119e6(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe6; BYTE $0x19; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L7249f5
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L7249f5:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x95b23b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x3b; BYTE $0xb2; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x95b18b(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x8b; BYTE $0xb1; BYTE $0x95; BYTE $0x00
    MOVL $0x70, DX
    CALL _Lcf1800
    NOP
    // lea 0x912249(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x49; BYTE $0x22; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9146e7(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe7; BYTE $0x46; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x95d0b1(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xb1; BYTE $0xd0; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914771(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x71; BYTE $0x47; BYTE $0x91; BYTE $0x00
    // lea 0x9145fa(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xfa; BYTE $0x45; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x95cdf1(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xf1; BYTE $0xcd; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914751(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x51; BYTE $0x47; BYTE $0x91; BYTE $0x00
    // lea 0x9145da(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xda; BYTE $0x45; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x95b7d1(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xd1; BYTE $0xb7; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x9278c1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc1; BYTE $0x78; BYTE $0x92; BYTE $0x00
    // lea 0x927c29(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x29; BYTE $0x7c; BYTE $0x92; BYTE $0x00
    MOVL $0x3e0, DX
    CALL _L71deb0
    // lea 0x95c8f1(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xf1; BYTE $0xc8; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x94cef9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf9; BYTE $0xce; BYTE $0x94; BYTE $0x00
    // lea 0x95b717(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x17; BYTE $0xb7; BYTE $0x95; BYTE $0x00
    MOVL $0xef, DX
    CALL _L71deb0
    // lea 0x95c611(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x11; BYTE $0xc6; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x94ced9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd9; BYTE $0xce; BYTE $0x94; BYTE $0x00
    // lea 0x94ce7e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x7e; BYTE $0xce; BYTE $0x94; BYTE $0x00
    MOVL $0x215, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x95da7b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x7b; BYTE $0xda; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x9146bb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xbb; BYTE $0x46; BYTE $0x91; BYTE $0x00
    // lea 0x914544(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x44; BYTE $0x45; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x95d93b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x3b; BYTE $0xd9; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x91469b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x9b; BYTE $0x46; BYTE $0x91; BYTE $0x00
    // lea 0x914524(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x24; BYTE $0x45; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x95d97b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x7b; BYTE $0xd9; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x91467b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x7b; BYTE $0x46; BYTE $0x91; BYTE $0x00
    // lea 0x914504(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x04; BYTE $0x45; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x95d9bb(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xbb; BYTE $0xd9; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x91465b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x5b; BYTE $0x46; BYTE $0x91; BYTE $0x00
    // lea 0x916112(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x12; BYTE $0x61; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x95e2a5(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xa5; BYTE $0xe2; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914625(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x25; BYTE $0x46; BYTE $0x91; BYTE $0x00
    // lea 0x9144ae(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xae; BYTE $0x44; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x95e1c5(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xc5; BYTE $0xe1; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914605(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x05; BYTE $0x46; BYTE $0x91; BYTE $0x00
    // lea 0x9160bc(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xbc; BYTE $0x60; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x91208d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8d; BYTE $0x20; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91452b(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x2b; BYTE $0x45; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x95e62b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x2b; BYTE $0xe6; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x9145cb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcb; BYTE $0x45; BYTE $0x91; BYTE $0x00
    // lea 0x914454(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x54; BYTE $0x44; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x95e6cb(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xcb; BYTE $0xe6; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x9145ab(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xab; BYTE $0x45; BYTE $0x91; BYTE $0x00
    // lea 0x914434(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x34; BYTE $0x44; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x95e64b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x4b; BYTE $0xe6; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x91458b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8b; BYTE $0x45; BYTE $0x91; BYTE $0x00
    // lea 0x916042(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x42; BYTE $0x60; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x912013(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x13; BYTE $0x20; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9144b1(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb1; BYTE $0x44; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x95e791(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x91; BYTE $0xe7; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x9158f9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf9; BYTE $0x58; BYTE $0x91; BYTE $0x00
    // lea 0x9143da(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xda; BYTE $0x43; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x911fd9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd9; BYTE $0x1f; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x914477(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x77; BYTE $0x44; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    PUSHQ R15
    MOVQ SI, R15
    PUSHQ R14
    MOVQ DI, R14
    PUSHQ R13
    XORL R13, R13
    PUSHQ R12
    PUSHQ BP
    PUSHQ BX
    SUBQ $0x18, SP
    LEAQ 0xf(SP), R12
_L724cbe:
    CMPQ R13, R15
    JE _L724cf9
    MOVQ (R14)(R13*8), BX
_L724cc7:
    TESTQ BX, BX
    JE _L724cec
    MOVQ (BX), AX
    MOVQ 0x8(BX), BP
    MOVQ R12, SI
    LEAQ -0x18(AX), DI
    CALL _L71edb0
    MOVQ BX, DI
    MOVQ BP, BX
    CALL _L71ebe0
    JMP _L724cc7
_L724cec:
    MOVQ $0x0, (R14)(R13*8)
    INCQ R13
    JMP _L724cbe
_L724cf9:
    ADDQ $0x18, SP
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    POPQ R14
    POPQ R15
    RET
    // lea 0x95f711(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x11; BYTE $0xf7; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x9144b1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb1; BYTE $0x44; BYTE $0x91; BYTE $0x00
    // lea 0x91433a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x3a; BYTE $0x43; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x95f631(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x31; BYTE $0xf6; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x914491(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x91; BYTE $0x44; BYTE $0x91; BYTE $0x00
    // lea 0x91431a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x1a; BYTE $0x43; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x911f19(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x19; BYTE $0x1f; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9143b7(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb7; BYTE $0x43; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x911489(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x89; BYTE $0x14; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x911315(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x15; BYTE $0x13; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91133c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x3c; BYTE $0x13; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x911ed3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd3; BYTE $0x1e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x914371(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x71; BYTE $0x43; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x91142d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x2d; BYTE $0x14; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x9112b9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb9; BYTE $0x12; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9112e0(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe0; BYTE $0x12; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x95faaf(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xaf; BYTE $0xfa; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x9143cf(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcf; BYTE $0x43; BYTE $0x91; BYTE $0x00
    // lea 0x914258(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x58; BYTE $0x42; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x911e57(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x57; BYTE $0x1e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9142f5(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf5; BYTE $0x42; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x911e8d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8d; BYTE $0x1e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91152e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x2e; BYTE $0x15; BYTE $0x91; BYTE $0x00
    MOVL $0x56, DX
    CALL _Lcf1800
    NOP
    // lea 0x95fe7b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x7b; BYTE $0xfe; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x91437b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x7b; BYTE $0x43; BYTE $0x91; BYTE $0x00
    // lea 0x914204(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x04; BYTE $0x42; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x95fd3b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x3b; BYTE $0xfd; BYTE $0x95; BYTE $0x00
    PUSHQ AX
    // lea 0x91435b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x5b; BYTE $0x43; BYTE $0x91; BYTE $0x00
    // lea 0x9141e4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe4; BYTE $0x41; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x91119e(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x9e; BYTE $0x11; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa3161b(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x1b; BYTE $0x16; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    NOP
    // lea 0x960621(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x21; BYTE $0x06; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x914321(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x21; BYTE $0x43; BYTE $0x91; BYTE $0x00
    // lea 0x9141aa(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xaa; BYTE $0x41; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x960561(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x61; BYTE $0x05; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x914301(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x01; BYTE $0x43; BYTE $0x91; BYTE $0x00
    // lea 0x91418a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x8a; BYTE $0x41; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x9604e1(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe1; BYTE $0x04; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x9142e1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe1; BYTE $0x42; BYTE $0x91; BYTE $0x00
    // lea 0x91416a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x6a; BYTE $0x41; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x960461(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x61; BYTE $0x04; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x9142c1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc1; BYTE $0x42; BYTE $0x91; BYTE $0x00
    // lea 0x91414a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x4a; BYTE $0x41; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x960561(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x61; BYTE $0x05; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x9142a1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa1; BYTE $0x42; BYTE $0x91; BYTE $0x00
    // lea 0x915d58(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x58; BYTE $0x5d; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x960941(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x41; BYTE $0x09; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x914281(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x81; BYTE $0x42; BYTE $0x91; BYTE $0x00
    // lea 0x91410a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x0a; BYTE $0x41; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x960801(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x01; BYTE $0x08; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x914261(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x61; BYTE $0x42; BYTE $0x91; BYTE $0x00
    // lea 0x9140ea(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xea; BYTE $0x40; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x960841(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x41; BYTE $0x08; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x914241(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x41; BYTE $0x42; BYTE $0x91; BYTE $0x00
    // lea 0x915cf8(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf8; BYTE $0x5c; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x960881(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x81; BYTE $0x08; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x914221(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x21; BYTE $0x42; BYTE $0x91; BYTE $0x00
    // lea 0x915cd8(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xd8; BYTE $0x5c; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x911195(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x95; BYTE $0x11; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9112e1(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe1; BYTE $0x12; BYTE $0x91; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x911203(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x03; BYTE $0x12; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x91108f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8f; BYTE $0x10; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9110b6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb6; BYTE $0x10; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x960d25(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x25; BYTE $0x0d; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x9141a5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa5; BYTE $0x41; BYTE $0x91; BYTE $0x00
    // lea 0x91402e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x2e; BYTE $0x40; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x96091b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x1b; BYTE $0x09; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x911175(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x75; BYTE $0x11; BYTE $0x91; BYTE $0x00
    MOVL $0x98, DX
    CALL _Lcf1800
    NOP
    // lea 0x960901(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x01; BYTE $0x09; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x91115b(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x5b; BYTE $0x11; BYTE $0x91; BYTE $0x00
    MOVL $0x99, DX
    CALL _Lcf1800
    NOP
    // lea 0x911bf9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf9; BYTE $0x1b; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x914097(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x97; BYTE $0x40; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    // lea 0x910f86(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x86; BYTE $0x0f; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa31403(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x03; BYTE $0x14; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    NOP
    // lea 0x961809(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x09; BYTE $0x18; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x912a79(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x79; BYTE $0x2a; BYTE $0x91; BYTE $0x00
    // lea 0x912cde(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xde; BYTE $0x2c; BYTE $0x91; BYTE $0x00
    MOVL $0x150, DX
    CALL _L71deb0
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L7250ef
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L7250ef:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x962555(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x55; BYTE $0x25; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x912a05(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x05; BYTE $0x2a; BYTE $0x91; BYTE $0x00
    // lea 0x912c6a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x6a; BYTE $0x2c; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    // lea 0x962455(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x55; BYTE $0x24; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x9129e5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe5; BYTE $0x29; BYTE $0x91; BYTE $0x00
    // lea 0x912a1e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x1e; BYTE $0x2a; BYTE $0x91; BYTE $0x00
    MOVL $0x8e, DX
    CALL _L71deb0
    // lea 0x962135(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x35; BYTE $0x21; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x9129c5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc5; BYTE $0x29; BYTE $0x91; BYTE $0x00
    // lea 0x912c2a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x2a; BYTE $0x2c; BYTE $0x91; BYTE $0x00
    MOVL $0x150, DX
    CALL _L71deb0
    // lea 0x962235(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x35; BYTE $0x22; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x9129a5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa5; BYTE $0x29; BYTE $0x91; BYTE $0x00
    // lea 0x9129de(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xde; BYTE $0x29; BYTE $0x91; BYTE $0x00
    MOVL $0x156, DX
    CALL _L71deb0
    // lea 0x915974(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x74; BYTE $0x59; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3424, DI
    CALL _Lcf1360
    // lea 0x9624f3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xf3; BYTE $0x24; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x911673(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x73; BYTE $0x16; BYTE $0x91; BYTE $0x00
    // lea 0x910e86(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x86; BYTE $0x0e; BYTE $0x91; BYTE $0x00
    MOVL $0x6f, DX
    CALL _L71deb0
    // lea 0x962103(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x03; BYTE $0x21; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x91538b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8b; BYTE $0x53; BYTE $0x91; BYTE $0x00
    // lea 0x913e6c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x6c; BYTE $0x3e; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x961c73(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x73; BYTE $0x1c; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    MOVL $0x3e26, DI
    CALL _Lcf1360
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x96317b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x7b; BYTE $0x31; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x91290b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x0b; BYTE $0x29; BYTE $0x91; BYTE $0x00
    // lea 0x912b70(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x70; BYTE $0x2b; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    // lea 0x962f3b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x3b; BYTE $0x2f; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x913f7b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x7b; BYTE $0x3f; BYTE $0x91; BYTE $0x00
    // lea 0x913e04(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x04; BYTE $0x3e; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x963de5(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe5; BYTE $0x3d; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x9128b5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb5; BYTE $0x28; BYTE $0x91; BYTE $0x00
    // lea 0x912b1a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x1a; BYTE $0x2b; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    // lea 0x963b25(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x25; BYTE $0x3b; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x9152cd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcd; BYTE $0x52; BYTE $0x91; BYTE $0x00
    // lea 0x913dae(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xae; BYTE $0x3d; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x96444f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x4f; BYTE $0x44; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x91285f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x5f; BYTE $0x28; BYTE $0x91; BYTE $0x00
    // lea 0x912ac4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc4; BYTE $0x2a; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    // lea 0x96420f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x0f; BYTE $0x42; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x913ecf(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcf; BYTE $0x3e; BYTE $0x91; BYTE $0x00
    // lea 0x913d58(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x58; BYTE $0x3d; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x964e99(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x99; BYTE $0x4e; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x912809(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x09; BYTE $0x28; BYTE $0x91; BYTE $0x00
    // lea 0x912a6e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x6e; BYTE $0x2a; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    // lea 0x964bd9(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xd9; BYTE $0x4b; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x913e79(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x79; BYTE $0x3e; BYTE $0x91; BYTE $0x00
    // lea 0x913d02(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x02; BYTE $0x3d; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9157a2(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa2; BYTE $0x57; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3424, DI
    CALL _Lcf1360
    // lea 0x966051(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x51; BYTE $0x60; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x9151d9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd9; BYTE $0x51; BYTE $0x91; BYTE $0x00
    // lea 0x913cba(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xba; BYTE $0x3c; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x965f51(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x51; BYTE $0x5f; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x9151b9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb9; BYTE $0x51; BYTE $0x91; BYTE $0x00
    // lea 0x913c9a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x9a; BYTE $0x3c; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x966171(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x71; BYTE $0x61; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x913df1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf1; BYTE $0x3d; BYTE $0x91; BYTE $0x00
    // lea 0x9158a8(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa8; BYTE $0x58; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x911879(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x79; BYTE $0x18; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x913d17(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x17; BYTE $0x3d; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x9118af(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xaf; BYTE $0x18; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x910f50(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x50; BYTE $0x0f; BYTE $0x91; BYTE $0x00
    MOVL $0x56, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x966b27(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x27; BYTE $0x6b; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x9126f7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf7; BYTE $0x26; BYTE $0x91; BYTE $0x00
    // lea 0x91295c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x5c; BYTE $0x29; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    // lea 0x966947(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x47; BYTE $0x69; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x9126d7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd7; BYTE $0x26; BYTE $0x91; BYTE $0x00
    // lea 0x912710(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x10; BYTE $0x27; BYTE $0x91; BYTE $0x00
    MOVL $0x156, DX
    CALL _L71deb0
    // lea 0x910baa(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xaa; BYTE $0x0b; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa31027(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x27; BYTE $0x10; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    NOP
    // lea 0x9668ad(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xad; BYTE $0x68; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x913d2d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x2d; BYTE $0x3d; BYTE $0x91; BYTE $0x00
    // lea 0x9157e4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe4; BYTE $0x57; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x9117b5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb5; BYTE $0x17; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x913c53(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x53; BYTE $0x3c; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x910ee4(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe4; BYTE $0x0e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x966ceb(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xeb; BYTE $0x6c; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x915073(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x73; BYTE $0x50; BYTE $0x91; BYTE $0x00
    // lea 0x913b54(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x54; BYTE $0x3b; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x966c4b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x4b; BYTE $0x6c; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x915053(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x53; BYTE $0x50; BYTE $0x91; BYTE $0x00
    // lea 0x915762(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x62; BYTE $0x57; BYTE $0x91; BYTE $0x00
    MOVL $0x26b, DX
    CALL _L71deb0
    // lea 0x910aee(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xee; BYTE $0x0a; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa30f6b(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x6b; BYTE $0x0f; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9674a7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xa7; BYTE $0x74; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x9125b7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb7; BYTE $0x25; BYTE $0x91; BYTE $0x00
    // lea 0x91281c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x1c; BYTE $0x28; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    // lea 0x910e18(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x18; BYTE $0x0e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x96811f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x1f; BYTE $0x81; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x91256f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x6f; BYTE $0x25; BYTE $0x91; BYTE $0x00
    // lea 0x9127d4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xd4; BYTE $0x27; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    // lea 0x967ebf(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xbf; BYTE $0x7e; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x913bdf(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xdf; BYTE $0x3b; BYTE $0x91; BYTE $0x00
    // lea 0x913a68(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x68; BYTE $0x3a; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9697b3(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xb3; BYTE $0x97; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x912503(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x03; BYTE $0x25; BYTE $0x91; BYTE $0x00
    // lea 0x912768(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x68; BYTE $0x27; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    // lea 0x969473(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x73; BYTE $0x94; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x913b73(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x73; BYTE $0x3b; BYTE $0x91; BYTE $0x00
    // lea 0x9139fc(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xfc; BYTE $0x39; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x96a0f2(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf2; BYTE $0xa0; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    MOVL $0x3346, DI
    CALL _Lcf1360
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x96a3cb(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xcb; BYTE $0xa3; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x913b2b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x2b; BYTE $0x3b; BYTE $0x91; BYTE $0x00
    // lea 0x9139b4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb4; BYTE $0x39; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x9115b3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb3; BYTE $0x15; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x913a51(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x51; BYTE $0x3a; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x910ce2(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe2; BYTE $0x0c; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x96aaa9(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xa9; BYTE $0xaa; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x912439(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x39; BYTE $0x24; BYTE $0x91; BYTE $0x00
    // lea 0x91269e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x9e; BYTE $0x26; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x96b333(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x33; BYTE $0xb3; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x913a93(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x93; BYTE $0x3a; BYTE $0x91; BYTE $0x00
    // lea 0x91391c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x1c; BYTE $0x39; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x96c3dd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xdd; BYTE $0xc3; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x9123cd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcd; BYTE $0x23; BYTE $0x91; BYTE $0x00
    // lea 0x912632(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x32; BYTE $0x26; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    // lea 0x910a6f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x6f; BYTE $0x0a; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x9108fb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xfb; BYTE $0x08; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x910922(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x22; BYTE $0x09; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    // lea 0x910875(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x75; BYTE $0x08; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa30cf2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf2; BYTE $0x0c; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    // lea 0x96c199(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x99; BYTE $0xc1; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x9139f9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf9; BYTE $0x39; BYTE $0x91; BYTE $0x00
    // lea 0x9154b0(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb0; BYTE $0x54; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x911481(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x81; BYTE $0x14; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91391f(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x1f; BYTE $0x39; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x910bb0(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb0; BYTE $0x0b; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x96d1f7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xf7; BYTE $0xd1; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x912307(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x07; BYTE $0x23; BYTE $0x91; BYTE $0x00
    // lea 0x91256c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x6c; BYTE $0x25; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    // lea 0x96cd37(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x37; BYTE $0xcd; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x914d1f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x1f; BYTE $0x4d; BYTE $0x91; BYTE $0x00
    // lea 0x913800(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x00; BYTE $0x38; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x96cdf7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xf7; BYTE $0xcd; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x914cff(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xff; BYTE $0x4c; BYTE $0x91; BYTE $0x00
    // lea 0x9137e0(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe0; BYTE $0x37; BYTE $0x91; BYTE $0x00
    MOVL $0x281, DX
    CALL _L71deb0
    // lea 0x96cf37(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x37; BYTE $0xcf; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x913937(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x37; BYTE $0x39; BYTE $0x91; BYTE $0x00
    // lea 0x9153ee(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xee; BYTE $0x53; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x96c8de(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xde; BYTE $0xc8; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x96c8f2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf2; BYTE $0xc8; BYTE $0x96; BYTE $0x00
    MOVL $0x4e, DX
    CALL _Lcf1800
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x96da33(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x33; BYTE $0xda; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x912243(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x43; BYTE $0x22; BYTE $0x91; BYTE $0x00
    // lea 0x91227c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x7c; BYTE $0x22; BYTE $0x91; BYTE $0x00
    MOVL $0x156, DX
    CALL _L71deb0
    // lea 0x96d953(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x53; BYTE $0xd9; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x9138b3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb3; BYTE $0x38; BYTE $0x91; BYTE $0x00
    // lea 0x91536a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x6a; BYTE $0x53; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x96de53(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x53; BYTE $0xde; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x912203(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x03; BYTE $0x22; BYTE $0x91; BYTE $0x00
    // lea 0x91223c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x3c; BYTE $0x22; BYTE $0x91; BYTE $0x00
    MOVL $0x156, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x96e35d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x5d; BYTE $0xe3; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x91385d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x5d; BYTE $0x38; BYTE $0x91; BYTE $0x00
    // lea 0x9136e6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe6; BYTE $0x36; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x96fa3d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x3d; BYTE $0xfa; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x91879d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x9d; BYTE $0x87; BYTE $0x91; BYTE $0x00
    // lea 0x913686(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x86; BYTE $0x36; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    // lea 0x96fadd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xdd; BYTE $0xfa; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x91877d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x7d; BYTE $0x87; BYTE $0x91; BYTE $0x00
    // lea 0x913666(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x66; BYTE $0x36; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x96fec7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xc7; BYTE $0xfe; BYTE $0x96; BYTE $0x00
    PUSHQ AX
    // lea 0x918747(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x47; BYTE $0x87; BYTE $0x91; BYTE $0x00
    // lea 0x913630(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x30; BYTE $0x36; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L725a51
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L725a51:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9700c9(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xc9; BYTE $0x00; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x9186e9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe9; BYTE $0x86; BYTE $0x91; BYTE $0x00
    // lea 0x9135d2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xd2; BYTE $0x35; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ R13
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    PUSHQ R12
    PUSHQ BP
    MOVQ DI, BP
    PUSHQ BX
    MOVQ SI, BX
    PUSHQ DX
    MOVQ (SI), DI
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(SI)
    MOVL 0x10(BP), R13
    LEAL 0x0(R13)(CX*1), R12
    CMPL R12, 0x14(BP)
    JLE _L725af8
    MOVL R12, SI
    MOVQ BP, DI
    CALL _L75d9f0
_L725af8:
    MOVL R12, 0x10(BP)
    // movslq %r13d,%rdx
    BYTE $0x49; BYTE $0x63; BYTE $0xd5
    ADDQ 0x8(BP), DX
    CMPQ 0x8(BX), $0xffffffffffffffff
    MOVQ (BX), SI
    JNE _L725b22
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    MOVQ SI, DI
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(BX)
_L725b22:
    MOVQ 0x8(BX), CX
    MOVQ DX, DI
    // rep movsb
    BYTE $0xf3; BYTE $0xa4
    POPQ AX
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    // lea 0x9104bf(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xbf; BYTE $0x04; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa3093c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x3c; BYTE $0x09; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    // lea 0x9707b9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb9; BYTE $0x07; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x9707c8(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc8; BYTE $0x07; BYTE $0x97; BYTE $0x00
    MOVL $0x5a, DX
    CALL _Lcf1800
    // lea 0x91048d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8d; BYTE $0x04; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0xa3090a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x0a; BYTE $0x09; BYTE $0xa3; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x91058f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8f; BYTE $0x05; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9106db(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xdb; BYTE $0x06; BYTE $0x91; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9105fd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xfd; BYTE $0x05; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x910489(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x89; BYTE $0x04; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9104b0(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb0; BYTE $0x04; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x9712b7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb7; BYTE $0x12; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x9717ac(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xac; BYTE $0x17; BYTE $0x97; BYTE $0x00
    MOVL $0x14c, DX
    CALL _Lcf1800
    NOP
    // lea 0x97129d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x9d; BYTE $0x12; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x971792(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x92; BYTE $0x17; BYTE $0x97; BYTE $0x00
    MOVL $0x14c, DX
    CALL _Lcf1800
    NOP
    // lea 0x926a03(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x03; BYTE $0x6a; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x971780(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x80; BYTE $0x17; BYTE $0x97; BYTE $0x00
    MOVL $0x70, DX
    CALL _Lcf1800
    NOP
    // lea 0x9269e9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe9; BYTE $0x69; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x971766(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x66; BYTE $0x17; BYTE $0x97; BYTE $0x00
    MOVL $0x70, DX
    CALL _Lcf1800
    NOP
    // lea 0x910fdf(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xdf; BYTE $0x0f; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91347d(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x7d; BYTE $0x34; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x9269b5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb5; BYTE $0x69; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x91532a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x2a; BYTE $0x53; BYTE $0x91; BYTE $0x00
    MOVL $0x1c1, DX
    CALL _Lcf1800
    NOP
    // lea 0x92699b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x9b; BYTE $0x69; BYTE $0x92; BYTE $0x00
    PUSHQ AX
    // lea 0x915310(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x10; BYTE $0x53; BYTE $0x91; BYTE $0x00
    MOVL $0x1c1, DX
    CALL _Lcf1800
    NOP
    // lea 0x971201(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x01; BYTE $0x12; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x920529(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x29; BYTE $0x05; BYTE $0x92; BYTE $0x00
    MOVL $0x229, DX
    CALL _Lcf1800
    NOP
    // lea 0x9711e7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe7; BYTE $0x11; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x92050f(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x0f; BYTE $0x05; BYTE $0x92; BYTE $0x00
    MOVL $0x229, DX
    CALL _Lcf1800
    NOP
    PUSHQ BX
    MOVQ DI, BX
    SUBQ $0x10, SP
    CALL _Lbb5110
    MOVQ 0x20(BX), DI
    LEAQ 0xf(SP), SI
    MOVL $0x1, DX
    MOVQ $0x20, 0xf(SP)
    CALL _L71f330
    ADDQ $0x10, SP
    MOVQ BX, AX
    POPQ BX
    RET
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L725d51
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L725d51:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x910491(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x91; BYTE $0x04; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x91031d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x1d; BYTE $0x03; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x910332(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x32; BYTE $0x03; BYTE $0x91; BYTE $0x00
    MOVL $0x14d, DX
    CALL _Lcf1800
    NOP
    // lea 0x910303(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x03; BYTE $0x03; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91032a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x2a; BYTE $0x03; BYTE $0x91; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x910ec1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc1; BYTE $0x0e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x91335f(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x5f; BYTE $0x33; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ BX
    MOVQ DI, BX
    MOVQ $0x200, 0x14(DI)
    MOVL $0x200, DI
    CALL _L71eda0
    TESTQ AX, AX
    MOVQ AX, 0x8(BX)
    JNE _L725e13
    // lea 0x910230(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x30; BYTE $0x02; BYTE $0x91; BYTE $0x00
    MOVL $0x2710, DI
    CALL _Lcf1500
_L725e13:
    MOVQ $0x0, 0x10(BX)
    POPQ BX
    RET
    PUSHQ R13
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    PUSHQ R12
    PUSHQ BP
    MOVQ DI, BP
    PUSHQ BX
    MOVQ SI, BX
    PUSHQ DX
    MOVQ (SI), DI
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(SI)
    MOVL 0x10(BP), R13
    LEAL 0x0(R13)(CX*1), R12
    CMPL R12, 0x14(BP)
    JLE _L725e58
    MOVL R12, SI
    MOVQ BP, DI
    CALL _L75d9f0
_L725e58:
    MOVL R12, 0x10(BP)
    // movslq %r13d,%rdx
    BYTE $0x49; BYTE $0x63; BYTE $0xd5
    ADDQ 0x8(BP), DX
    CMPQ 0x8(BX), $0xffffffffffffffff
    MOVQ (BX), SI
    JNE _L725e82
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    MOVQ SI, DI
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(BX)
_L725e82:
    MOVQ 0x8(BX), CX
    MOVQ DX, DI
    // rep movsb
    BYTE $0xf3; BYTE $0xa4
    POPQ AX
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    RET
    NOP
    // lea 0x972a05(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x05; BYTE $0x2a; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x913325(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x25; BYTE $0x33; BYTE $0x91; BYTE $0x00
    // lea 0x9131ae(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xae; BYTE $0x31; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x972f39(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x39; BYTE $0x2f; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x911c49(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x49; BYTE $0x1c; BYTE $0x91; BYTE $0x00
    // lea 0x911eae(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xae; BYTE $0x1e; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L725f1f
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L725f1f:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ R15
    PUSHQ R14
    MOVQ SI, R14
    PUSHQ R13
    MOVQ DI, R13
    PUSHQ R12
    XORL R12, R12
    PUSHQ BP
    PUSHQ BX
    SUBQ $0x18, SP
    LEAQ 0xf(SP), R15
_L725f44:
    CMPQ R12, R14
    JE _L725fb0
    MOVQ 0x0(R13)(R12*8), BX
_L725f4e:
    TESTQ BX, BX
    JE _L725fa2
    MOVQ (BX), AX
    MOVQ 0x10(BX), BP
    LEAQ -0x18(AX), DI
    // cmp 0xebfe1b(%rip),%rdi
    BYTE $0x48; BYTE $0x3b; BYTE $0x3d; BYTE $0x1b; BYTE $0xfe; BYTE $0xeb; BYTE $0x00
    JE _L725f95
    // cmpq $0x0,0xebffa1(%rip)
    BYTE $0x48; BYTE $0x83; BYTE $0x3d; BYTE $0xa1; BYTE $0xff; BYTE $0xeb; BYTE $0x00; BYTE $0x00
    LEAQ 0x10(DI), DX
    JE _L725f7e
    ORL $0xffffffff, AX
    // lock xadd
    BYTE $0xf0; BYTE $0x0f; BYTE $0xc1; BYTE $0x02
    JMP _L725f89
_L725f7e:
    MOVL -0x8(AX), DX
    LEAL -0x1(DX), CX
    MOVL CX, -0x8(AX)
    MOVL DX, AX
_L725f89:
    TESTL AX, AX
    // jg 725f95
    BYTE $0x7f; BYTE $0x08
    MOVQ R15, SI
    CALL _L71f310
_L725f95:
    MOVQ BX, DI
    MOVQ BP, BX
    CALL _L71ebe0
    JMP _L725f4e
_L725fa2:
    MOVQ $0x0, 0x0(R13)(R12*8)
    INCQ R12
    JMP _L725f44
_L725fb0:
    ADDQ $0x18, SP
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    POPQ R14
    POPQ R15
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ R15
    PUSHQ R14
    MOVQ SI, R14
    PUSHQ R13
    MOVQ DI, R13
    PUSHQ R12
    XORL R12, R12
    PUSHQ BP
    PUSHQ BX
    SUBQ $0x18, SP
    LEAQ 0xf(SP), R15
_L726006:
    CMPQ R12, R14
    JE _L726072
    MOVQ 0x0(R13)(R12*8), BX
_L726010:
    TESTQ BX, BX
    JE _L726064
    MOVQ (BX), AX
    MOVQ 0x10(BX), BP
    LEAQ -0x18(AX), DI
    // cmp 0xebfd59(%rip),%rdi
    BYTE $0x48; BYTE $0x3b; BYTE $0x3d; BYTE $0x59; BYTE $0xfd; BYTE $0xeb; BYTE $0x00
    JE _L726057
    // cmpq $0x0,0xebfedf(%rip)
    BYTE $0x48; BYTE $0x83; BYTE $0x3d; BYTE $0xdf; BYTE $0xfe; BYTE $0xeb; BYTE $0x00; BYTE $0x00
    LEAQ 0x10(DI), DX
    JE _L726040
    ORL $0xffffffff, AX
    // lock xadd
    BYTE $0xf0; BYTE $0x0f; BYTE $0xc1; BYTE $0x02
    JMP _L72604b
_L726040:
    MOVL -0x8(AX), DX
    LEAL -0x1(DX), CX
    MOVL CX, -0x8(AX)
    MOVL DX, AX
_L72604b:
    TESTL AX, AX
    // jg 726057
    BYTE $0x7f; BYTE $0x08
    MOVQ R15, SI
    CALL _L71f310
_L726057:
    MOVQ BX, DI
    MOVQ BP, BX
    CALL _L71ebe0
    JMP _L726010
_L726064:
    MOVQ $0x0, 0x0(R13)(R12*8)
    INCQ R12
    JMP _L726006
_L726072:
    ADDQ $0x18, SP
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    POPQ R14
    POPQ R15
    RET
    NOP
    // lea 0x9737b7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xb7; BYTE $0x37; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x913137(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x37; BYTE $0x31; BYTE $0x91; BYTE $0x00
    // lea 0x912fc0(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc0; BYTE $0x2f; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x910133(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x33; BYTE $0x01; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x90ffbf(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xbf; BYTE $0xff; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x90ffe6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe6; BYTE $0xff; BYTE $0x90; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x91434d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4d; BYTE $0x43; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x2afc, DI
    CALL _Lcf1360
    // lea 0x910b6b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x6b; BYTE $0x0b; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x913009(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x09; BYTE $0x30; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9100c5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc5; BYTE $0x00; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x90ff51(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x51; BYTE $0xff; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x90ff78(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x78; BYTE $0xff; BYTE $0x90; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x9142df(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xdf; BYTE $0x42; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x2afc, DI
    CALL _Lcf1360
    // lea 0x916e78(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x78; BYTE $0x6e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x916e84(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x84; BYTE $0x6e; BYTE $0x91; BYTE $0x00
    MOVL $0x59, DX
    CALL _Lcf1800
    NOP
    // lea 0x916e5e(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x5e; BYTE $0x6e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x917294(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x94; BYTE $0x72; BYTE $0x91; BYTE $0x00
    MOVL $0x5e, DX
    CALL _Lcf1800
    NOP
    // lea 0x975441(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x41; BYTE $0x54; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x9143c9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc9; BYTE $0x43; BYTE $0x91; BYTE $0x00
    // lea 0x912eaa(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xaa; BYTE $0x2e; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x9751c1(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xc1; BYTE $0x51; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x9143a9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa9; BYTE $0x43; BYTE $0x91; BYTE $0x00
    // lea 0x912e8a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x8a; BYTE $0x2e; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x975081(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x81; BYTE $0x50; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x912fe1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe1; BYTE $0x2f; BYTE $0x91; BYTE $0x00
    // lea 0x912e6a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x6a; BYTE $0x2e; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x973ca3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa3; BYTE $0x3c; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x973cb4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb4; BYTE $0x3c; BYTE $0x97; BYTE $0x00
    MOVL $0x62, DX
    CALL _Lcf1800
    NOP
    // lea 0x910a4f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4f; BYTE $0x0a; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x912eed(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xed; BYTE $0x2e; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x916d9a(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x9a; BYTE $0x6d; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x916da6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa6; BYTE $0x6d; BYTE $0x91; BYTE $0x00
    MOVL $0x59, DX
    CALL _Lcf1800
    NOP
    // lea 0x975afd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xfd; BYTE $0x5a; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x914305(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x05; BYTE $0x43; BYTE $0x91; BYTE $0x00
    // lea 0x912de6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe6; BYTE $0x2d; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x975d5d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x5d; BYTE $0x5d; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x9142e5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe5; BYTE $0x42; BYTE $0x91; BYTE $0x00
    // lea 0x912dc6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc6; BYTE $0x2d; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x975c7d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x7d; BYTE $0x5c; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x9142c5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc5; BYTE $0x42; BYTE $0x91; BYTE $0x00
    // lea 0x912da6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa6; BYTE $0x2d; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x975a3d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x3d; BYTE $0x5a; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x912efd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xfd; BYTE $0x2e; BYTE $0x91; BYTE $0x00
    // lea 0x912d86(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x86; BYTE $0x2d; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x97595d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x5d; BYTE $0x59; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x914285(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x85; BYTE $0x42; BYTE $0x91; BYTE $0x00
    // lea 0x912d66(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x66; BYTE $0x2d; BYTE $0x91; BYTE $0x00
    MOVL $0x281, DX
    CALL _L71deb0
    PUSHQ BX
    MOVQ DI, BX
    SUBQ $0x10, SP
    MOVQ 0x8(DI), AX
    LEAQ 0xf(SP), SI
    LEAQ -0x18(AX), DI
    CALL _L71edb0
    MOVQ BX, DI
    CALL _L71ebe0
    ADDQ $0x10, SP
    POPQ BX
    RET
    // lea 0x91093d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x3d; BYTE $0x09; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x912ddb(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xdb; BYTE $0x2d; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x91006c(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x6c; BYTE $0x00; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9108fb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xfb; BYTE $0x08; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x912d99(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x99; BYTE $0x2d; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x90fe55(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x55; BYTE $0xfe; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x90fce1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe1; BYTE $0xfc; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x90fd08(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x08; BYTE $0xfd; BYTE $0x90; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x91089f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x9f; BYTE $0x08; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x912d3d(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x3d; BYTE $0x2d; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x90ffce(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xce; BYTE $0xff; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x91402d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x2d; BYTE $0x40; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x2afc, DI
    CALL _Lcf1360
    // lea 0x916bc6(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc6; BYTE $0x6b; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x916bd2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xd2; BYTE $0x6b; BYTE $0x91; BYTE $0x00
    MOVL $0x59, DX
    CALL _Lcf1800
    NOP
    // lea 0x916bac(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xac; BYTE $0x6b; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x916fe2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe2; BYTE $0x6f; BYTE $0x91; BYTE $0x00
    MOVL $0x5e, DX
    CALL _Lcf1800
    NOP
    // lea 0x97770f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x0f; BYTE $0x77; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x914117(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x17; BYTE $0x41; BYTE $0x91; BYTE $0x00
    // lea 0x914826(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x26; BYTE $0x48; BYTE $0x91; BYTE $0x00
    MOVL $0x26b, DX
    CALL _L71deb0
    // lea 0x9107f7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf7; BYTE $0x07; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x912c95(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x95; BYTE $0x2c; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x90ff26(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x26; BYTE $0xff; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x90fefe(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xfe; BYTE $0xfe; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x977ec5(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xc5; BYTE $0x7e; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x91408d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8d; BYTE $0x40; BYTE $0x91; BYTE $0x00
    // lea 0x912b6e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x6e; BYTE $0x2b; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x97a00f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x0f; BYTE $0xa0; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x91161f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x1f; BYTE $0x16; BYTE $0x91; BYTE $0x00
    // lea 0x911884(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x84; BYTE $0x18; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    // lea 0x979caf(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xaf; BYTE $0x9c; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x9115ff(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xff; BYTE $0x15; BYTE $0x91; BYTE $0x00
    // lea 0x911638(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x38; BYTE $0x16; BYTE $0x91; BYTE $0x00
    MOVL $0x156, DX
    CALL _L71deb0
    // lea 0x90fca1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa1; BYTE $0xfc; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x90fb2d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x2d; BYTE $0xfb; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x90fb54(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x54; BYTE $0xfb; BYTE $0x90; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x913ebb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xbb; BYTE $0x3e; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x2afc, DI
    CALL _Lcf1360
    // lea 0x979c91(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x91; BYTE $0x9c; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x913fd9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd9; BYTE $0x3f; BYTE $0x91; BYTE $0x00
    // lea 0x912aba(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xba; BYTE $0x2a; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x979d51(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x51; BYTE $0x9d; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x912c11(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x11; BYTE $0x2c; BYTE $0x91; BYTE $0x00
    // lea 0x9146c8(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc8; BYTE $0x46; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x910699(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x99; BYTE $0x06; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x912b37(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x37; BYTE $0x2b; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x90fdc8(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc8; BYTE $0xfd; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    // lea 0x9106bd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xbd; BYTE $0x06; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x90fd5e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x5e; BYTE $0xfd; BYTE $0x90; BYTE $0x00
    MOVL $0x5d, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x90fbc7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc7; BYTE $0xfb; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x90fa53(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x53; BYTE $0xfa; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x90fa7a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x7a; BYTE $0xfa; BYTE $0x90; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x913de1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe1; BYTE $0x3d; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x2afc, DI
    CALL _Lcf1360
    // lea 0x9105ff(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xff; BYTE $0x05; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x912a9d(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x9d; BYTE $0x2a; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x90fd2e(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x2e; BYTE $0xfd; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    // lea 0x910623(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x23; BYTE $0x06; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x90fcc4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc4; BYTE $0xfc; BYTE $0x90; BYTE $0x00
    MOVL $0x5d, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    // lea 0x90f95f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x5f; BYTE $0xf9; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0xa2fddc(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xdc; BYTE $0xfd; BYTE $0xa2; BYTE $0x00
    MOVL $0xfd, DX
    CALL _Lcf1800
    // lea 0x91058b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8b; BYTE $0x05; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x912a29(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x29; BYTE $0x2a; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x90fcba(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xba; BYTE $0xfc; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ BX
    MOVQ 0x8(DI), BX
    TESTQ BX, BX
    JE _L72675b
_L726722:
    MOVQ BX, DI
    CALL _L71ddc0
    CMPL AX, $0x4
    JE _L726722
    TESTL AX, AX
    JE _L726752
    // lea 0x97c106(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x06; BYTE $0xc1; BYTE $0x97; BYTE $0x00
    // lea 0x9100f7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf7; BYTE $0x00; BYTE $0x91; BYTE $0x00
    // lea 0x913108(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x08; BYTE $0x31; BYTE $0x91; BYTE $0x00
    MOVL $0xc0, DX
    CALL _L71deb0
_L726752:
    MOVQ BX, DI
    POPQ BX
    JMP _L71ebe0
_L72675b:
    POPQ BX
    RET
    NOP
    // lea 0x97c3db(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xdb; BYTE $0xc3; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x912a5b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x5b; BYTE $0x2a; BYTE $0x91; BYTE $0x00
    // lea 0x9128e4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe4; BYTE $0x28; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x97c4bb(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xbb; BYTE $0xc4; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x913de3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe3; BYTE $0x3d; BYTE $0x91; BYTE $0x00
    // lea 0x9128c4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc4; BYTE $0x28; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x90fa37(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x37; BYTE $0xfa; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x90f8c3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc3; BYTE $0xf8; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x90f8ea(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xea; BYTE $0xf8; BYTE $0x90; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x913c51(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x51; BYTE $0x3c; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x2afc, DI
    CALL _Lcf1360
    // lea 0x97d507(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x07; BYTE $0xd5; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x9129c7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc7; BYTE $0x29; BYTE $0x91; BYTE $0x00
    // lea 0x912850(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x50; BYTE $0x28; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    // lea 0x97d487(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x87; BYTE $0xd4; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x9129a7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa7; BYTE $0x29; BYTE $0x91; BYTE $0x00
    // lea 0x912830(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x30; BYTE $0x28; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x97d527(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x27; BYTE $0xd5; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x912987(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x87; BYTE $0x29; BYTE $0x91; BYTE $0x00
    // lea 0x91443e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x3e; BYTE $0x44; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x913bc9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc9; BYTE $0x3b; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    MOVL $0x2afc, DI
    CALL _Lcf1360
    // lea 0x916762(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x62; BYTE $0x67; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x916b98(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x98; BYTE $0x6b; BYTE $0x91; BYTE $0x00
    MOVL $0x5e, DX
    CALL _Lcf1800
    NOP
    // lea 0x97ed25(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x25; BYTE $0xed; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x913ccd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcd; BYTE $0x3c; BYTE $0x91; BYTE $0x00
    // lea 0x9127ae(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xae; BYTE $0x27; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x910397(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x97; BYTE $0x03; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x912835(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x35; BYTE $0x28; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x90fac6(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc6; BYTE $0xfa; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L726915
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L726915:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x910343(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x43; BYTE $0x03; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9127e1(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe1; BYTE $0x27; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x90fa72(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x72; BYTE $0xfa; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    // lea 0x97fa6f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x6f; BYTE $0xfa; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x9111df(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xdf; BYTE $0x11; BYTE $0x91; BYTE $0x00
    // lea 0x911444(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x44; BYTE $0x14; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    // lea 0x97f96f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x6f; BYTE $0xf9; BYTE $0x97; BYTE $0x00
    PUSHQ AX
    // lea 0x9111bf(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xbf; BYTE $0x11; BYTE $0x91; BYTE $0x00
    // lea 0x9111f8(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf8; BYTE $0x11; BYTE $0x91; BYTE $0x00
    MOVL $0x8e, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L7269bf
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L7269bf:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L7269e7
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L7269e7:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9165d6(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd6; BYTE $0x65; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9165e2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe2; BYTE $0x65; BYTE $0x91; BYTE $0x00
    MOVL $0x59, DX
    CALL _Lcf1800
    NOP
    // lea 0x9165bc(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xbc; BYTE $0x65; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9169f2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf2; BYTE $0x69; BYTE $0x91; BYTE $0x00
    MOVL $0x5e, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x91658c(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8c; BYTE $0x65; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x9169c2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc2; BYTE $0x69; BYTE $0x91; BYTE $0x00
    MOVL $0x5e, DX
    CALL _Lcf1800
    NOP
    // lea 0x9101f7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf7; BYTE $0x01; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x912695(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x95; BYTE $0x26; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x90f926(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x26; BYTE $0xf9; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    // lea 0x9101cb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcb; BYTE $0x01; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x912669(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x69; BYTE $0x26; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L726acf
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L726acf:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x910173(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x73; BYTE $0x01; BYTE $0x91; BYTE $0x00
    PUSHQ AX
    // lea 0x912611(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x11; BYTE $0x26; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x90f8a2(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa2; BYTE $0xf8; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L726b39
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L726b39:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L726b61
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L726b61:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L726b89
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L726b89:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L726bb1
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L726bb1:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L726bd9
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L726bd9:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L726c01
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L726c01:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L726c29
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L726c29:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L726c51
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L726c51:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L726c79
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L726c79:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x90ffdf(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xdf; BYTE $0xff; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x91247d(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x7d; BYTE $0x24; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x90ffaf(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xaf; BYTE $0xff; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x91244d(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x4d; BYTE $0x24; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x90ffe5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe5; BYTE $0xff; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x90f686(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x86; BYTE $0xf6; BYTE $0x90; BYTE $0x00
    MOVL $0x56, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x90ff65(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x65; BYTE $0xff; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x912403(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x03; BYTE $0x24; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x90f694(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x94; BYTE $0xf6; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x98167b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x7b; BYTE $0x16; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x91247b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x7b; BYTE $0x24; BYTE $0x91; BYTE $0x00
    // lea 0x912304(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x04; BYTE $0x23; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x90ff03(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x03; BYTE $0xff; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x9123a1(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa1; BYTE $0x23; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x90f632(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x32; BYTE $0xf6; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    // lea 0x98192f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x2f; BYTE $0x19; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x91242f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x2f; BYTE $0x24; BYTE $0x91; BYTE $0x00
    // lea 0x9122b8(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb8; BYTE $0x22; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x9818af(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xaf; BYTE $0x18; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x91240f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x0f; BYTE $0x24; BYTE $0x91; BYTE $0x00
    // lea 0x912298(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x98; BYTE $0x22; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x98182f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x2f; BYTE $0x18; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x9123ef(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xef; BYTE $0x23; BYTE $0x91; BYTE $0x00
    // lea 0x912278(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x78; BYTE $0x22; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x9819ef(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xef; BYTE $0x19; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x9123cf(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcf; BYTE $0x23; BYTE $0x91; BYTE $0x00
    // lea 0x913e86(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x86; BYTE $0x3e; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x98196f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x6f; BYTE $0x19; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x9123af(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xaf; BYTE $0x23; BYTE $0x91; BYTE $0x00
    // lea 0x913e66(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x66; BYTE $0x3e; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x9818ef(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xef; BYTE $0x18; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x91238f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8f; BYTE $0x23; BYTE $0x91; BYTE $0x00
    // lea 0x913e46(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x46; BYTE $0x3e; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x90fe17(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x17; BYTE $0xfe; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x9122b5(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb5; BYTE $0x22; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x981c15(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x15; BYTE $0x1c; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x912355(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x55; BYTE $0x23; BYTE $0x91; BYTE $0x00
    // lea 0x9121de(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xde; BYTE $0x21; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x981ad5(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xd5; BYTE $0x1a; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x912335(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x35; BYTE $0x23; BYTE $0x91; BYTE $0x00
    // lea 0x913dec(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xec; BYTE $0x3d; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x981b75(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x75; BYTE $0x1b; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x912315(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x15; BYTE $0x23; BYTE $0x91; BYTE $0x00
    // lea 0x913dcc(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xcc; BYTE $0x3d; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x981af5(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xf5; BYTE $0x1a; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x9122f5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf5; BYTE $0x22; BYTE $0x91; BYTE $0x00
    // lea 0x913dac(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xac; BYTE $0x3d; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x90fd7d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x7d; BYTE $0xfd; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x91221b(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x1b; BYTE $0x22; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x90f24f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4f; BYTE $0xf2; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x90f39b(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x9b; BYTE $0xf3; BYTE $0x90; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L726f37
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L726f37:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x981d39(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x39; BYTE $0x1d; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x912279(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x79; BYTE $0x22; BYTE $0x91; BYTE $0x00
    // lea 0x912102(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x02; BYTE $0x21; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x981cb9(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xb9; BYTE $0x1c; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x912259(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x59; BYTE $0x22; BYTE $0x91; BYTE $0x00
    // lea 0x913d10(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x10; BYTE $0x3d; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x90f1cd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcd; BYTE $0xf1; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x90f319(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x19; BYTE $0xf3; BYTE $0x90; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    // lea 0x981dbf(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xbf; BYTE $0x1d; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x91221f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x1f; BYTE $0x22; BYTE $0x91; BYTE $0x00
    // lea 0x9120a8(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa8; BYTE $0x20; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x981d3f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x3f; BYTE $0x1d; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x9121ff(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xff; BYTE $0x21; BYTE $0x91; BYTE $0x00
    // lea 0x913cb6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb6; BYTE $0x3c; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x90fc87(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x87; BYTE $0xfc; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x912125(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x25; BYTE $0x21; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x90f159(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x59; BYTE $0xf1; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x90f2a5(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa5; BYTE $0xf2; BYTE $0x90; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    // lea 0x90f39c(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x9c; BYTE $0xf3; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L727055
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L727055:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x981e5b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x5b; BYTE $0x1e; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x91215b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x5b; BYTE $0x21; BYTE $0x91; BYTE $0x00
    // lea 0x911fe4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe4; BYTE $0x1f; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x981ddb(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xdb; BYTE $0x1d; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x91213b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x3b; BYTE $0x21; BYTE $0x91; BYTE $0x00
    // lea 0x913bf2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf2; BYTE $0x3b; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x90fbc3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc3; BYTE $0xfb; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x912061(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x61; BYTE $0x20; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x90f095(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x95; BYTE $0xf0; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x90f1e1(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe1; BYTE $0xf1; BYTE $0x90; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    // lea 0x90f2d8(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd8; BYTE $0xf2; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L727103
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L727103:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x981ecd(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xcd; BYTE $0x1e; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x9120ad(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xad; BYTE $0x20; BYTE $0x91; BYTE $0x00
    // lea 0x911f36(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x36; BYTE $0x1f; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x981e4d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x4d; BYTE $0x1e; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x91208d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x8d; BYTE $0x20; BYTE $0x91; BYTE $0x00
    // lea 0x913b44(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x44; BYTE $0x3b; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x90f001(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x01; BYTE $0xf0; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x90f14d(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x4d; BYTE $0xf1; BYTE $0x90; BYTE $0x00
    MOVL $0xb7, DX
    CALL _Lcf1800
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L727185
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L727185:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x90f21c(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x1c; BYTE $0xf2; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    // lea 0x90fb11(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x11; BYTE $0xfb; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x90f1b2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb2; BYTE $0xf1; BYTE $0x90; BYTE $0x00
    MOVL $0x5d, DX
    CALL _Lcf1800
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L7271d9
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L7271d9:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x90f1c8(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc8; BYTE $0xf1; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L727213
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L727213:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L72723b
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L72723b:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x98203f(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x3f; BYTE $0x20; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x911f5f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x5f; BYTE $0x1f; BYTE $0x91; BYTE $0x00
    // lea 0x913a16(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x16; BYTE $0x3a; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x981fbf(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xbf; BYTE $0x1f; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x911f3f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x3f; BYTE $0x1f; BYTE $0x91; BYTE $0x00
    // lea 0x9139f6(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf6; BYTE $0x39; BYTE $0x91; BYTE $0x00
    MOVL $0x57, DX
    CALL _L71deb0
    // lea 0x90f110(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x10; BYTE $0xf1; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ BX
    MOVQ DI, BX
    SUBQ $0x10, SP
    MOVQ 0x8(DI), AX
    LEAQ -0x18(AX), DI
    // cmp 0xebeabd(%rip),%rdi
    BYTE $0x48; BYTE $0x3b; BYTE $0x3d; BYTE $0xbd; BYTE $0xea; BYTE $0xeb; BYTE $0x00
    JE _L7272f5
    // cmpq $0x0,0xebec43(%rip)
    BYTE $0x48; BYTE $0x83; BYTE $0x3d; BYTE $0x43; BYTE $0xec; BYTE $0xeb; BYTE $0x00; BYTE $0x00
    LEAQ 0x10(DI), DX
    JE _L7272dc
    ORL $0xffffffff, AX
    // lock xadd
    BYTE $0xf0; BYTE $0x0f; BYTE $0xc1; BYTE $0x02
    JMP _L7272e7
_L7272dc:
    MOVL -0x8(AX), DX
    LEAL -0x1(DX), CX
    MOVL CX, -0x8(AX)
    MOVL DX, AX
_L7272e7:
    TESTL AX, AX
    // jg 7272f5
    BYTE $0x7f; BYTE $0x0a
    LEAQ 0xf(SP), SI
    CALL _L71f310
_L7272f5:
    MOVQ BX, DI
    CALL _L71ebe0
    ADDQ $0x10, SP
    POPQ BX
    RET
    NOP
    // lea 0x982bb5(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xb5; BYTE $0x2b; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x910825(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x25; BYTE $0x08; BYTE $0x91; BYTE $0x00
    // lea 0x91085e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x5e; BYTE $0x08; BYTE $0x91; BYTE $0x00
    MOVL $0x156, DX
    CALL _L71deb0
    // lea 0x90eec7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc7; BYTE $0xee; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x3f31, DI
    CALL _Lcf1500
    // lea 0x90ed53(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x53; BYTE $0xed; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x90ed7a(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x7a; BYTE $0xed; BYTE $0x90; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x982c49(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x49; BYTE $0x2c; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x90f4d9(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd9; BYTE $0xf4; BYTE $0x90; BYTE $0x00
    // lea 0x90ecec(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xec; BYTE $0xec; BYTE $0x90; BYTE $0x00
    MOVL $0x6f, DX
    CALL _L71deb0
    // lea 0x982969(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x69; BYTE $0x29; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x9131f1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf1; BYTE $0x31; BYTE $0x91; BYTE $0x00
    // lea 0x911cd2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xd2; BYTE $0x1c; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x9828e9(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xe9; BYTE $0x28; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x911e29(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x29; BYTE $0x1e; BYTE $0x91; BYTE $0x00
    // lea 0x911cb2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xb2; BYTE $0x1c; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x90f8b1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb1; BYTE $0xf8; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x911d4f(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x4f; BYTE $0x1d; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    // lea 0x90efe0(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe0; BYTE $0xef; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    // lea 0x90ecad(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xad; BYTE $0xec; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x90ecc2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc2; BYTE $0xec; BYTE $0x90; BYTE $0x00
    MOVL $0x14d, DX
    CALL _Lcf1800
    NOP
    // lea 0x90f86b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x6b; BYTE $0xf8; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x911d09(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x09; BYTE $0x1d; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    PUSHQ R12
    MOVQ DI, R12
    PUSHQ BP
    PUSHQ BX
    CMPQ (DI), $0x0
    JE _L727449
    MOVQ 0x48(DI), AX
    MOVQ 0x28(DI), BX
    LEAQ 0x8(AX), BP
_L727429:
    CMPQ BP, BX
    JBE _L72743c
    MOVQ (BX), DI
    ADDQ $0x8, BX
    CALL _L71ebe0
    JMP _L727429
_L72743c:
    POPQ BX
    POPQ BP
    MOVQ (R12), DI
    POPQ R12
    JMP _L71ebe0
_L727449:
    POPQ BX
    POPQ BP
    POPQ R12
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x983215(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x15; BYTE $0x32; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x916cf5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf5; BYTE $0x6c; BYTE $0x91; BYTE $0x00
    // lea 0x911bde(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xde; BYTE $0x1b; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    // lea 0x983135(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x35; BYTE $0x31; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x9130dd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xdd; BYTE $0x30; BYTE $0x91; BYTE $0x00
    // lea 0x911bbe(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xbe; BYTE $0x1b; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x90ebe5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe5; BYTE $0xeb; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x90ebfa(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xfa; BYTE $0xeb; BYTE $0x90; BYTE $0x00
    MOVL $0x14d, DX
    CALL _Lcf1800
    NOP
    // lea 0x90ebcb(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcb; BYTE $0xeb; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x90ebf2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf2; BYTE $0xeb; BYTE $0x90; BYTE $0x00
    MOVL $0x154, DX
    CALL _Lcf1800
    NOP
    // lea 0x90f789(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x89; BYTE $0xf7; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x911c27(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x27; BYTE $0x1c; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L727511
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L727511:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9851a9(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xa9; BYTE $0x51; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x913031(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x31; BYTE $0x30; BYTE $0x91; BYTE $0x00
    // lea 0x911b12(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x12; BYTE $0x1b; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L72756f
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L72756f:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x90ee32(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x32; BYTE $0xee; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9854d9(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xd9; BYTE $0x54; BYTE $0x98; BYTE $0x00
    PUSHQ AX
    // lea 0x911c19(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x19; BYTE $0x1c; BYTE $0x91; BYTE $0x00
    // lea 0x911aa2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa2; BYTE $0x1a; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x90f6a1(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa1; BYTE $0xf6; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x911b3f(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x3f; BYTE $0x1b; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _Lcf1800
    NOP
    PUSHQ R14
    MOVQ SI, R14
    PUSHQ R13
    PUSHQ R12
    MOVQ DI, R12
    PUSHQ BP
    PUSHQ BX
    MOVQ (DI), BX
    // movslq 0x10(%rbx),%r13
    BYTE $0x4c; BYTE $0x63; BYTE $0x6b; BYTE $0x10
    LEAL 0x1(R13), BP
    CMPL BP, 0x14(BX)
    JLE _L727602
    MOVL BP, SI
    MOVQ BX, DI
    CALL _L75d9f0
_L727602:
    MOVQ 0x8(BX), AX
    MOVL BP, 0x10(BX)
    MOVQ R14, SI
    MOVQ $0x6, (AX)(R13*1)
    MOVQ (R12), DI
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    POPQ R14
    JMP _Lcef100
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9c27eb(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xeb; BYTE $0x27; BYTE $0x9c; BYTE $0x00
    PUSHQ AX
    // lea 0x9104db(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xdb; BYTE $0x04; BYTE $0x91; BYTE $0x00
    // lea 0x910514(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x14; BYTE $0x05; BYTE $0x91; BYTE $0x00
    MOVL $0x156, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9c2c35(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x35; BYTE $0x2c; BYTE $0x9c; BYTE $0x00
    PUSHQ AX
    // lea 0x916ad5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd5; BYTE $0x6a; BYTE $0x91; BYTE $0x00
    // lea 0x9119be(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xbe; BYTE $0x19; BYTE $0x91; BYTE $0x00
    MOVL $0x50, DX
    CALL _L71deb0
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L7276c3
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L7276c3:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x9c2e0d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x0d; BYTE $0x2e; BYTE $0x9c; BYTE $0x00
    PUSHQ AX
    // lea 0x91045d(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x5d; BYTE $0x04; BYTE $0x91; BYTE $0x00
    // lea 0x9106c2(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc2; BYTE $0x06; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9c3477(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x77; BYTE $0x34; BYTE $0x9c; BYTE $0x00
    PUSHQ AX
    // lea 0x910427(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x27; BYTE $0x04; BYTE $0x91; BYTE $0x00
    // lea 0x91068c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x8c; BYTE $0x06; BYTE $0x91; BYTE $0x00
    MOVL $0x150, DX
    CALL _L71deb0
    // lea 0x9c3a97(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x97; BYTE $0x3a; BYTE $0x9c; BYTE $0x00
    PUSHQ AX
    // lea 0x910407(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x07; BYTE $0x04; BYTE $0x91; BYTE $0x00
    // lea 0x910440(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x40; BYTE $0x04; BYTE $0x91; BYTE $0x00
    MOVL $0x156, DX
    CALL _L71deb0
    // lea 0x9c3af7(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xf7; BYTE $0x3a; BYTE $0x9c; BYTE $0x00
    PUSHQ AX
    // lea 0x9c3587(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x87; BYTE $0x35; BYTE $0x9c; BYTE $0x00
    // lea 0x9c3773(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x73; BYTE $0x37; BYTE $0x9c; BYTE $0x00
    MOVL $0x73, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L727797
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L727797:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ R15
    MOVQ SI, R15
    PUSHQ R14
    MOVQ DI, R14
    PUSHQ R13
    XORL R13, R13
    PUSHQ R12
    PUSHQ BP
    PUSHQ BX
    SUBQ $0x18, SP
    LEAQ 0xf(SP), R12
_L7277bc:
    CMPQ R13, R15
    JE _L7277f7
    MOVQ (R14)(R13*8), BX
_L7277c5:
    TESTQ BX, BX
    JE _L7277ea
    MOVQ (BX), AX
    MOVQ 0x10(BX), BP
    MOVQ R12, SI
    LEAQ -0x18(AX), DI
    CALL _L71edb0
    MOVQ BX, DI
    MOVQ BP, BX
    CALL _L71ebe0
    JMP _L7277c5
_L7277ea:
    MOVQ $0x0, (R14)(R13*8)
    INCQ R13
    JMP _L7277bc
_L7277f7:
    ADDQ $0x18, SP
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    POPQ R14
    POPQ R15
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9c4e1d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x1d; BYTE $0x4e; BYTE $0x9c; BYTE $0x00
    PUSHQ AX
    // lea 0x9102cd(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xcd; BYTE $0x02; BYTE $0x91; BYTE $0x00
    // lea 0x910532(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x32; BYTE $0x05; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    PUSHQ R13
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    PUSHQ R12
    PUSHQ BP
    MOVQ DI, BP
    PUSHQ BX
    MOVQ SI, BX
    PUSHQ DX
    MOVQ (SI), DI
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(SI)
    MOVL 0x10(BP), R13
    LEAL 0x0(R13)(CX*1), R12
    CMPL R12, 0x14(BP)
    JLE _L7278b8
    MOVL R12, SI
    MOVQ BP, DI
    CALL _L75d9f0
_L7278b8:
    MOVL R12, 0x10(BP)
    // movslq %r13d,%rdx
    BYTE $0x49; BYTE $0x63; BYTE $0xd5
    ADDQ 0x8(BP), DX
    CMPQ 0x8(BX), $0xffffffffffffffff
    MOVQ (BX), SI
    JNE _L7278e2
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    MOVQ SI, DI
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(BX)
_L7278e2:
    MOVQ 0x8(BX), CX
    MOVQ DX, DI
    // rep movsb
    BYTE $0xf3; BYTE $0xa4
    POPQ AX
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    RET
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9c52ef(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xef; BYTE $0x52; BYTE $0x9c; BYTE $0x00
    PUSHQ AX
    // lea 0x91021f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x1f; BYTE $0x02; BYTE $0x91; BYTE $0x00
    // lea 0x910484(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x84; BYTE $0x04; BYTE $0x91; BYTE $0x00
    MOVL $0x86, DX
    CALL _L71deb0
    PUSHQ R13
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    PUSHQ R12
    PUSHQ BP
    MOVQ DI, BP
    PUSHQ BX
    MOVQ SI, BX
    PUSHQ DX
    MOVQ (SI), DI
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(SI)
    MOVL 0x10(BP), R13
    LEAL 0x0(R13)(CX*1), R12
    CMPL R12, 0x14(BP)
    JLE _L727966
    MOVL R12, SI
    MOVQ BP, DI
    CALL _L75d9f0
_L727966:
    MOVL R12, 0x10(BP)
    // movslq %r13d,%rdx
    BYTE $0x49; BYTE $0x63; BYTE $0xd5
    ADDQ 0x8(BP), DX
    CMPQ 0x8(BX), $0xffffffffffffffff
    MOVQ (BX), SI
    JNE _L727990
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    MOVQ SI, DI
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(BX)
_L727990:
    MOVQ 0x8(BX), CX
    MOVQ DX, DI
    // rep movsb
    BYTE $0xf3; BYTE $0xa4
    POPQ AX
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9c598d(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x8d; BYTE $0x59; BYTE $0x9c; BYTE $0x00
    PUSHQ AX
    // lea 0x912b95(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x95; BYTE $0x2b; BYTE $0x91; BYTE $0x00
    // lea 0x911676(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x76; BYTE $0x16; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x90e792(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x92; BYTE $0xe7; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    // lea 0x90e7a7(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa7; BYTE $0xe7; BYTE $0x90; BYTE $0x00
    MOVL $0xb1, DX
    CALL _Lcf1800
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9c6007(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x07; BYTE $0x60; BYTE $0x9c; BYTE $0x00
    PUSHQ AX
    // lea 0x911787(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x87; BYTE $0x17; BYTE $0x91; BYTE $0x00
    // lea 0x911610(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x10; BYTE $0x16; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L727a87
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L727a87:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ R13
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    PUSHQ R12
    PUSHQ BP
    MOVQ DI, BP
    PUSHQ BX
    MOVQ SI, BX
    PUSHQ DX
    MOVQ (SI), DI
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(SI)
    MOVL 0x10(BP), R13
    LEAL 0x0(R13)(CX*1), R12
    CMPL R12, 0x14(BP)
    JLE _L727ae2
    MOVL R12, SI
    MOVQ BP, DI
    CALL _L75d9f0
_L727ae2:
    MOVL R12, 0x10(BP)
    // movslq %r13d,%rdx
    BYTE $0x49; BYTE $0x63; BYTE $0xd5
    ADDQ 0x8(BP), DX
    CMPQ 0x8(BX), $0xffffffffffffffff
    MOVQ (BX), SI
    JNE _L727b0c
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    MOVQ SI, DI
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(BX)
_L727b0c:
    MOVQ 0x8(BX), CX
    MOVQ DX, DI
    // rep movsb
    BYTE $0xf3; BYTE $0xa4
    POPQ AX
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9c8d1b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x1b; BYTE $0x8d; BYTE $0x9c; BYTE $0x00
    PUSHQ AX
    // lea 0x912a03(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x03; BYTE $0x2a; BYTE $0x91; BYTE $0x00
    // lea 0x9114e4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe4; BYTE $0x14; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x9c8c1b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x1b; BYTE $0x8c; BYTE $0x9c; BYTE $0x00
    PUSHQ AX
    // lea 0x9129e3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xe3; BYTE $0x29; BYTE $0x91; BYTE $0x00
    // lea 0x9114c4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xc4; BYTE $0x14; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    // lea 0x9c8a3b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x3b; BYTE $0x8a; BYTE $0x9c; BYTE $0x00
    PUSHQ AX
    // lea 0x9129c3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xc3; BYTE $0x29; BYTE $0x91; BYTE $0x00
    // lea 0x9114a4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xa4; BYTE $0x14; BYTE $0x91; BYTE $0x00
    MOVL $0x288, DX
    CALL _L71deb0
    PUSHQ BX
    MOVQ DI, BX
    SUBQ $0x10, SP
    MOVQ 0x8(DI), AX
    LEAQ 0xf(SP), SI
    LEAQ -0x18(AX), DI
    CALL _L71edb0
    MOVQ BX, DI
    CALL _L71ebe0
    ADDQ $0x10, SP
    POPQ BX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L727c59
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L727c59:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ R15
    // lea 0x9ca023(%rip),%r15
    BYTE $0x4c; BYTE $0x8d; BYTE $0x3d; BYTE $0x23; BYTE $0xa0; BYTE $0x9c; BYTE $0x00
    PUSHQ R14
    MOVQ DI, R14
    PUSHQ R13
    PUSHQ R12
    MOVL $0xa, R12
    PUSHQ BP
    PUSHQ BX
    ORQ $0xffffffffffffffff, BX
    PUSHQ CX
    MOVQ (DI), BP
    MOVQ BP, R13
_L727cf0:
    CMPQ 0x8(R14), $0xffffffffffffffff
    JNE _L727d0c
    ORQ $0xffffffffffffffff, CX
    MOVQ BP, DI
    XORL AX, AX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(R14)
_L727d0c:
    MOVQ BP, AX
    ADDQ 0x8(R14), AX
    CMPQ R13, AX
    JE _L727d46
    // movsbl 0x0(%r13),%esi
    BYTE $0x41; BYTE $0x0f; BYTE $0xbe; BYTE $0x75; BYTE $0x00
    CMPQ BX, $0xffffffffffffffff
    // lea 0x9c9fcf(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xcf; BYTE $0x9f; BYTE $0x9c; BYTE $0x00
    // cmove %r12,%rbx
    BYTE $0x49; BYTE $0x0f; BYTE $0x44; BYTE $0xdc
    MOVQ BX, DX
    CALL _L71e440
    TESTQ AX, AX
    JE _L727d4a
    SUBQ R15, AX
    INCQ AX
    JE _L727d4a
    INCQ R13
    JMP _L727cf0
_L727d46:
    MOVB $0x1, AX
    JMP _L727d4c
_L727d4a:
    XORL AX, AX
_L727d4c:
    POPQ DX
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    POPQ R14
    POPQ R15
    RET
    // lea 0x9ca7a1(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xa1; BYTE $0xa7; BYTE $0x9c; BYTE $0x00
    PUSHQ AX
    // lea 0x949c49(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x49; BYTE $0x9c; BYTE $0x94; BYTE $0x00
    // lea 0x958467(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x67; BYTE $0x84; BYTE $0x95; BYTE $0x00
    MOVL $0xef, DX
    CALL _L71deb0
    // lea 0x9ca561(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x61; BYTE $0xa5; BYTE $0x9c; BYTE $0x00
    PUSHQ AX
    // lea 0x949c29(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x29; BYTE $0x9c; BYTE $0x94; BYTE $0x00
    // lea 0x949bce(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xce; BYTE $0x9b; BYTE $0x94; BYTE $0x00
    MOVL $0x215, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L727dcd
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L727dcd:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    // lea 0x90e5d4(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd4; BYTE $0xe5; BYTE $0x90; BYTE $0x00
    PUSHQ AX
    MOVL $0x285f, DI
    CALL _Lcf1500
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    CMPQ 0x8(DI), $0xffffffffffffffff
    MOVQ DI, DX
    JNE _L727e1d
    MOVQ (DI), DI
    XORL AX, AX
    ORQ $0xffffffffffffffff, CX
    // repnz scas
    BYTE $0xf2; BYTE $0xae
    NOTQ CX
    DECQ CX
    MOVQ CX, 0x8(DX)
_L727e1d:
    MOVQ 0x8(DX), AX
    MOVQ $0x0, (SI)(AX*1)
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9cc82b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x2b; BYTE $0xc8; BYTE $0x9c; BYTE $0x00
    PUSHQ AX
    // lea 0x91126b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x6b; BYTE $0x12; BYTE $0x91; BYTE $0x00
    // lea 0x9110f4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xf4; BYTE $0x10; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x9cc76b(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0x6b; BYTE $0xc7; BYTE $0x9c; BYTE $0x00
    PUSHQ AX
    // lea 0x91124b(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x4b; BYTE $0x12; BYTE $0x91; BYTE $0x00
    // lea 0x9110d4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xd4; BYTE $0x10; BYTE $0x91; BYTE $0x00
    MOVL $0x5d, DX
    CALL _L71deb0
    PUSHQ R13
    MOVQ SI, R13
    PUSHQ R12
    MOVQ DI, R12
    PUSHQ BP
    XORL BP, BP
    PUSHQ BX
    PUSHQ DX
_L727f9d:
    CMPQ BP, R13
    JE _L727fc6
    MOVQ (R12)(BP*8), DI
_L727fa6:
    TESTQ DI, DI
    JE _L727fb9
    MOVQ 0x20(DI), BX
    CALL _L71ebe0
    MOVQ BX, DI
    JMP _L727fa6
_L727fb9:
    MOVQ $0x0, (R12)(BP*8)
    INCQ BP
    JMP _L727f9d
_L727fc6:
    POPQ AX
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    RET
    PUSHQ R13
    MOVQ SI, R13
    PUSHQ R12
    MOVQ DI, R12
    PUSHQ BP
    XORL BP, BP
    PUSHQ BX
    PUSHQ DX
_L727fdd:
    CMPQ BP, R13
    JE _L728006
    MOVQ (R12)(BP*8), DI
_L727fe6:
    TESTQ DI, DI
    JE _L727ff9
    MOVQ 0x30(DI), BX
    CALL _L71ebe0
    MOVQ BX, DI
    JMP _L727fe6
_L727ff9:
    MOVQ $0x0, (R12)(BP*8)
    INCQ BP
    JMP _L727fdd
_L728006:
    POPQ AX
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    RET
    PUSHQ R13
    MOVQ SI, R13
    PUSHQ R12
    MOVQ DI, R12
    PUSHQ BP
    XORL BP, BP
    PUSHQ BX
    PUSHQ DX
_L72801d:
    CMPQ BP, R13
    JE _L728046
    MOVQ (R12)(BP*8), DI
_L728026:
    TESTQ DI, DI
    JE _L728039
    MOVQ 0x18(DI), BX
    CALL _L71ebe0
    MOVQ BX, DI
    JMP _L728026
_L728039:
    MOVQ $0x0, (R12)(BP*8)
    INCQ BP
    JMP _L72801d
_L728046:
    POPQ AX
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    RET
    PUSHQ R14
    MOVQ SI, R14
    PUSHQ R13
    MOVQ DI, R13
    PUSHQ R12
    XORL R12, R12
    PUSHQ BP
    PUSHQ BX
_L72805f:
    CMPQ R12, R14
    JE _L72809a
    MOVQ 0x0(R13)(R12*8), BX
_L728069:
    TESTQ BX, BX
    JE _L72808c
    MOVQ 0x28(BX), SI
    LEAQ 0x18(BX), DI
    MOVQ 0x48(BX), BP
    CALL _Ld8d620
    MOVQ BX, DI
    MOVQ BP, BX
    CALL _L71ebe0
    JMP _L728069
_L72808c:
    MOVQ $0x0, 0x0(R13)(R12*8)
    INCQ R12
    JMP _L72805f
_L72809a:
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    POPQ R14
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    NOP
    // lea 0x9ccbf5(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xf5; BYTE $0xcb; BYTE $0x9c; BYTE $0x00
    PUSHQ AX
    // lea 0x9110d5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd5; BYTE $0x10; BYTE $0x91; BYTE $0x00
    // lea 0x910f5e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x5e; BYTE $0x0f; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    // lea 0x9ccaf5(%rip),%rcx
    BYTE $0x48; BYTE $0x8d; BYTE $0x0d; BYTE $0xf5; BYTE $0xca; BYTE $0x9c; BYTE $0x00
    PUSHQ AX
    // lea 0x9110b5(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xb5; BYTE $0x10; BYTE $0x91; BYTE $0x00
    // lea 0x910f3e(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x3e; BYTE $0x0f; BYTE $0x91; BYTE $0x00
    MOVL $0x63, DX
    CALL _L71deb0
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ R15
    MOVQ SI, R15
    PUSHQ R14
    MOVQ DI, R14
    PUSHQ R13
    XORL R13, R13
    PUSHQ R12
    PUSHQ BP
    PUSHQ BX
    SUBQ $0x18, SP
    LEAQ 0xf(SP), R12
_L72816a:
    CMPQ R13, R15
    JE _L7281a5
    MOVQ (R14)(R13*8), BX
_L728173:
    TESTQ BX, BX
    JE _L728198
    MOVQ (BX), AX
    MOVQ 0x8(BX), BP
    MOVQ R12, SI
    LEAQ -0x18(AX), DI
    CALL _L71edb0
    MOVQ BX, DI
    MOVQ BP, BX
    CALL _L71ebe0
    JMP _L728173
_L728198:
    MOVQ $0x0, (R14)(R13*8)
    INCQ R13
    JMP _L72816a
_L7281a5:
    ADDQ $0x18, SP
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    POPQ R14
    POPQ R15
    RET
    PUSHQ R14
    MOVQ SI, R14
    PUSHQ R13
    MOVQ DI, R13
    PUSHQ R12
    XORL R12, R12
    PUSHQ BP
    PUSHQ BX
_L7281c5:
    CMPQ R12, R14
    JE _L7281fb
    MOVQ 0x0(R13)(R12*8), BX
_L7281cf:
    TESTQ BX, BX
    JE _L7281ed
    MOVQ 0x10(BX), BP
    MOVQ BX, DI
    CALL _L769550
    MOVQ BX, DI
    CALL _L71ebe0
    MOVQ BP, BX
    JMP _L7281cf
_L7281ed:
    MOVQ $0x0, 0x0(R13)(R12*8)
    INCQ R12
    JMP _L7281c5
_L7281fb:
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    POPQ R14
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ AX
    MOVQ (DI), AX
    ADDQ -0x18(AX), DI
    MOVL 0x20(DI), SI
    ORL $0x1, SI
    CALL _L71f640
    POPQ DX
    RET
    PUSHQ R14
    PUSHQ R13
    PUSHQ R12
    MOVQ DI, R12
    PUSHQ BP
    PUSHQ BX
    MOVL 0x10(DI), AX
    MOVQ 0x8(DI), R13
    MOVL 0x14(DI), BP
    LEAL (AX)(AX*1), R14
    MOVL R14, BX
    // imul $0x18,%rbx,%rbx
    BYTE $0x48; BYTE $0x6b; BYTE $0xdb; BYTE $0x18
    MOVQ BX, DI
    CALL _Lda9240
    TESTQ AX, AX
    MOVQ AX, 0x8(R12)
    JNE _L728298
    // lea 0x9cf2e4(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xe4; BYTE $0xf2; BYTE $0x9c; BYTE $0x00
    CALL _Lda9cb0
    JMP _L7282bc
_L728298:
    LEAQ (AX)(BX*1), DI
    MOVL R14, 0x10(R12)
_L7282a1:
    CMPQ DI, AX
    JBE _L7282b3
    MOVQ $0x0, (AX)
    ADDQ $0x18, AX
    JMP _L7282a1
_L7282b3:
    MOVQ $0x0, 0x14(R12)
_L7282bc:
    MOVQ R13, BX
_L7282bf:
    TESTL BP, BP
    JE _L7282eb
    MOVQ (BX), SI
    TESTQ SI, SI
    JE _L7282e5
    MOVL 0x10(BX), DX
    MOVL $0x1, CX
    MOVQ R12, DI
    DECL BP
    CALL _Led76c0
    MOVQ 0x8(BX), DX
    MOVQ DX, 0x8(AX)
_L7282e5:
    ADDQ $0x18, BX
    JMP _L7282bf
_L7282eb:
    POPQ BX
    POPQ BP
    POPQ R12
    MOVQ R13, DI
    POPQ R13
    POPQ R14
    JMP _Lda9280
    NOP
    LEAQ -0x18(SP), AX
    CMPQ AX, 0x18(DI)
    JAE _L72830b
    MOVQ $0x1, 0x30(DI)
_L72830b:
    MOVQ (DI), DI
    JMP _Lf93680
    NOP
    PUSHQ R14
    PUSHQ R13
    PUSHQ R12
    MOVQ DI, R12
    PUSHQ BP
    PUSHQ BX
    MOVL 0x10(DI), AX
    MOVQ 0x8(DI), R13
    MOVL 0x14(DI), BP
    LEAL (AX)(AX*1), R14
    MOVL R14, BX
    // imul $0x18,%rbx,%rbx
    BYTE $0x48; BYTE $0x6b; BYTE $0xdb; BYTE $0x18
    MOVQ BX, DI
    CALL _Lda9240
    TESTQ AX, AX
    MOVQ AX, 0x8(R12)
    JNE _L728354
    // lea 0x9cf228(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x28; BYTE $0xf2; BYTE $0x9c; BYTE $0x00
    CALL _Lda9cb0
    JMP _L728378
_L728354:
    LEAQ (AX)(BX*1), DI
    MOVL R14, 0x10(R12)
_L72835d:
    CMPQ DI, AX
    JBE _L72836f
    MOVQ $0x0, (AX)
    ADDQ $0x18, AX
    JMP _L72835d
_L72836f:
    MOVQ $0x0, 0x14(R12)
_L728378:
    MOVQ R13, BX
_L72837b:
    TESTL BP, BP
    JE _L7283a2
    MOVQ (BX), SI
    TESTQ SI, SI
    JE _L72839c
    MOVL 0x10(BX), DX
    MOVQ R12, DI
    DECL BP
    CALL _Lf46d80
    MOVQ 0x8(BX), DX
    MOVQ DX, 0x8(AX)
_L72839c:
    ADDQ $0x18, BX
    JMP _L72837b
_L7283a2:
    POPQ BX
    POPQ BP
    POPQ R12
    MOVQ R13, DI
    POPQ R13
    POPQ R14
    JMP _Lda9280
    // lea 0xed8947(%rip),%rax
    BYTE $0x48; BYTE $0x8d; BYTE $0x05; BYTE $0x47; BYTE $0x89; BYTE $0xed; BYTE $0x00
    MOVL (AX), DI
    JMP _Lf3e700
    PUSHQ R14
    PUSHQ R13
    PUSHQ R12
    MOVQ DI, R12
    PUSHQ BP
    PUSHQ BX
    MOVL 0x10(DI), AX
    MOVQ 0x8(DI), R13
    MOVL 0x14(DI), BP
    LEAL (AX)(AX*1), R14
    MOVL R14, BX
    // imul $0x18,%rbx,%rbx
    BYTE $0x48; BYTE $0x6b; BYTE $0xdb; BYTE $0x18
    MOVQ BX, DI
    CALL _Lda9240
    TESTQ AX, AX
    MOVQ AX, 0x8(R12)
    JNE _L728400
    // lea 0x9cf17c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x7c; BYTE $0xf1; BYTE $0x9c; BYTE $0x00
    CALL _Lda9cb0
    JMP _L728424
_L728400:
    LEAQ (AX)(BX*1), DI
    MOVL R14, 0x10(R12)
_L728409:
    CMPQ DI, AX
    JBE _L72841b
    MOVQ $0x0, (AX)
    ADDQ $0x18, AX
    JMP _L728409
_L72841b:
    MOVQ $0x0, 0x14(R12)
_L728424:
    MOVQ R13, BX
_L728427:
    TESTL BP, BP
    JE _L728453
    MOVQ (BX), SI
    TESTQ SI, SI
    JE _L72844d
    MOVL 0x10(BX), DX
    MOVL $0x1, CX
    MOVQ R12, DI
    DECL BP
    CALL _Lf993b0
    MOVQ 0x8(BX), DX
    MOVQ DX, 0x8(AX)
_L72844d:
    ADDQ $0x18, BX
    JMP _L728427
_L728453:
    POPQ BX
    POPQ BP
    POPQ R12
    MOVQ R13, DI
    POPQ R13
    POPQ R14
    JMP _Lda9280
    PUSHQ R13
    LEAQ 0x600(DI), R13
    PUSHQ R12
    MOVQ SI, R12
    PUSHQ BP
    PUSHQ BX
    PUSHQ CX
_L728474:
    CMPQ 0xc(R12), $0x0
    JNE _L72853c
    MOVL 0x8(R12), BP
    MOVL BP, AX
    ANDL $0x7f, AX
    LEAQ 0x0(R13)(AX*4), BX
    MOVB 0x2(BX), AX
    MOVL (BX), DX
    SHRB $0x5, AX
    ANDL $0x1fffff, DX
    ANDL $0x1, AX
    CMPL DX, BP
    JE _L7284d2
    MOVL BP, DI
    CALL _Lfb3e30
    MOVQ BP, CX
    // mov %bpl,(%rbx)
    BYTE $0x40; BYTE $0x88; BYTE $0x2b
    SHRL $0x10, BP
    // movzbl %ch,%edx
    BYTE $0x0f; BYTE $0xb6; BYTE $0xd5
    MOVB AX, CX
    ANDL $0x1f, BP
    MOVB DX, 0x1(BX)
    MOVB 0x2(BX), DX
    ANDL $0x1, CX
    SHLL $0x5, CX
    ANDL $0xffffffc0, DX
    ORL BP, DX
    ORL CX, DX
    MOVB DX, 0x2(BX)
_L7284d2:
    TESTB AX, AX
    JE _L728540
    MOVQ (R12), DI
    CMPQ 0x8(DI), $0x0
    // sete %al
    BYTE $0x0f; BYTE $0x94; BYTE $0xc0
    TESTB AX, AX
    MOVB AX, 0xc(R12)
    JNE _L728474
    MOVL 0xc(DI), AX
    MOVQ 0x10(DI), CX
    MOVL AX, DX
    MOVB (CX)(DX*1), DX
    TESTB DX, DX
    JS _L728504
    INCL AX
    // movzbl %dl,%ebx
    BYTE $0x0f; BYTE $0xb6; BYTE $0xda
    MOVL AX, 0xc(DI)
    JMP _L728516
_L728504:
    ADDL $0x3, AX
    ANDL $0xfffffffc, AX
    LEAL 0x4(AX), DX
    MOVL DX, 0xc(DI)
    MOVL (CX)(AX*1), BX
    SHRL $0x8, BX
_L728516:
    MOVL 0x8(DI), AX
    CMPL AX, $0x1
    JNE _L72852d
    MOVQ (DI), AX
    MOVQ $0x0, 0xc(DI)
    CALL *0x20(AX)
    JMP _L728532
_L72852d:
    DECL AX
    MOVL AX, 0x8(DI)
_L728532:
    MOVL BX, 0x8(R12)
    JMP _L728474
_L72853c:
    XORL AX, AX
    JMP _L728542
_L728540:
    MOVB $0x1, AX
_L728542:
    POPQ DX
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    RET
    NOP 0x0(AX)(AX*1)
    PUSHQ R15
    // lea 0xec82ff(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xff; BYTE $0x82; BYTE $0xec; BYTE $0x00
    PUSHQ R14
    PUSHQ R13
    PUSHQ R12
    PUSHQ BP
    PUSHQ BX
    SUBQ $0x98, SP
    CALL _L71f3e0
    // mov 0xebd914(%rip),%rdi
    BYTE $0x48; BYTE $0x8b; BYTE $0x3d; BYTE $0x14; BYTE $0xd9; BYTE $0xeb; BYTE $0x00
    // lea 0xebda8d(%rip),%rdx
    BYTE $0x48; BYTE $0x8d; BYTE $0x15; BYTE $0x8d; BYTE $0xda; BYTE $0xeb; BYTE $0x00
    // lea 0xec82d6(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xd6; BYTE $0x82; BYTE $0xec; BYTE $0x00
    LEAQ 0x70(SP), BX
    LEAQ 0x50(SP), R12
    CALL _L71f060
    CALL _L71f7a0
    // mov %rax,0xec82b3(%rip)
    BYTE $0x48; BYTE $0x89; BYTE $0x05; BYTE $0xb3; BYTE $0x82; BYTE $0xec; BYTE $0x00
    CALL _L71f7a0
    // mov %rax,0xec829f(%rip)
    BYTE $0x48; BYTE $0x89; BYTE $0x05; BYTE $0x9f; BYTE $0x82; BYTE $0xec; BYTE $0x00
    CALL _L71e4a0
    // lea 0x90de61(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x61; BYTE $0xde; BYTE $0x90; BYTE $0x00
    // lea 0xec826c(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x6c; BYTE $0x82; BYTE $0xec; BYTE $0x00
    MOVQ BX, DX
    // mov %rax,0xec827a(%rip)
    BYTE $0x48; BYTE $0x89; BYTE $0x05; BYTE $0x7a; BYTE $0x82; BYTE $0xec; BYTE $0x00
    // movl $0x0,0xec8268(%rip)
    BYTE $0xc7; BYTE $0x05; BYTE $0x68; BYTE $0x82; BYTE $0xec; BYTE $0x00; BYTE $0x00; BYTE $0x00; BYTE $0x00; BYTE $0x00
    // movl $0x0,0xec8262(%rip)
    BYTE $0xc7; BYTE $0x05; BYTE $0x62; BYTE $0x82; BYTE $0xec; BYTE $0x00; BYTE $0x00; BYTE $0x00; BYTE $0x00; BYTE $0x00
    // movl $0xffffff,0xec824c(%rip)
    BYTE $0xc7; BYTE $0x05; BYTE $0x4c; BYTE $0x82; BYTE $0xec; BYTE $0x00; BYTE $0xff; BYTE $0xff; BYTE $0xff; BYTE $0x00
    // movl $0x7fffffff,0xec8246(%rip)
    BYTE $0xc7; BYTE $0x05; BYTE $0x46; BYTE $0x82; BYTE $0xec; BYTE $0x00; BYTE $0xff; BYTE $0xff; BYTE $0xff; BYTE $0x7f
    CALL _L71f7f0
    // mov 0xebd9c6(%rip),%rdi
    BYTE $0x48; BYTE $0x8b; BYTE $0x3d; BYTE $0xc6; BYTE $0xd9; BYTE $0xeb; BYTE $0x00
    // lea 0xebda07(%rip),%rdx
    BYTE $0x48; BYTE $0x8d; BYTE $0x15; BYTE $0x07; BYTE $0xda; BYTE $0xeb; BYTE $0x00
    // lea 0xec8220(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x20; BYTE $0x82; BYTE $0xec; BYTE $0x00
    CALL _L71f060
    CALL _Ld540a0
    // lea 0xec80a7(%rip),%r13
    BYTE $0x4c; BYTE $0x8d; BYTE $0x2d; BYTE $0xa7; BYTE $0x80; BYTE $0xec; BYTE $0x00
    // lea 0xec80f0(%rip),%rdx
    BYTE $0x48; BYTE $0x8d; BYTE $0x15; BYTE $0xf0; BYTE $0x80; BYTE $0xec; BYTE $0x00
    XORL SI, SI
    MOVQ R13, DI
    MOVQ AX, (DX)
    CALL _Lcf2ec0
    // lea 0x90ddf7(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xf7; BYTE $0xdd; BYTE $0x90; BYTE $0x00
    MOVQ R12, DX
    MOVQ BX, DI
    CALL _L71f7f0
    LEAQ 0x18(R13), DI
    MOVQ BX, SI
    CALL _L8a60d0
    MOVQ 0x70(SP), AX
    LEAQ 0x30(SP), BP
    MOVQ BP, SI
    LEAQ -0x18(AX), DI
    CALL _L71edb0
    // lea 0xe756d8(%rip),%rax
    BYTE $0x48; BYTE $0x8d; BYTE $0x05; BYTE $0xd8; BYTE $0x56; BYTE $0xe7; BYTE $0x00
    // lea 0x32e01(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x01; BYTE $0x2e; BYTE $0x03; BYTE $0x00
    MOVQ R13, SI
    MOVQ $0x0, 0x40(R13)
    MOVQ $0x0, 0x28(R13)
    MOVQ $0x0, 0x30(R13)
    LEAQ 0x10(AX), DX
    ADDQ $0x50, AX
    MOVQ AX, 0x18(R13)
    MOVQ DX, 0x0(R13)
    // lea 0xebd967(%rip),%rdx
    BYTE $0x48; BYTE $0x8d; BYTE $0x15; BYTE $0x67; BYTE $0xd9; BYTE $0xeb; BYTE $0x00
    CALL _L71f060
    // lea 0x90dd91(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x91; BYTE $0xdd; BYTE $0x90; BYTE $0x00
    MOVQ BX, DI
    MOVQ R12, DX
    CALL _L71f7f0
    // lea 0xec8141(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x41; BYTE $0x81; BYTE $0xec; BYTE $0x00
    MOVQ BX, SI
    CALL _L8a6800
    MOVQ 0x70(SP), AX
    MOVQ BP, SI
    LEAQ -0x18(AX), DI
    CALL _L71edb0
    // lea 0xe70fb1(%rip),%rax
    BYTE $0x48; BYTE $0x8d; BYTE $0x05; BYTE $0xb1; BYTE $0x0f; BYTE $0xe7; BYTE $0x00
    // lea 0xebd922(%rip),%rdx
    BYTE $0x48; BYTE $0x8d; BYTE $0x15; BYTE $0x22; BYTE $0xd9; BYTE $0xeb; BYTE $0x00
    // lea 0xec8113(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x13; BYTE $0x81; BYTE $0xec; BYTE $0x00
    // lea 0x2dcbc(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xbc; BYTE $0xdc; BYTE $0x02; BYTE $0x00
    // mov %rax,0xec8105(%rip)
    BYTE $0x48; BYTE $0x89; BYTE $0x05; BYTE $0x05; BYTE $0x81; BYTE $0xec; BYTE $0x00
    CALL _L71f060
    // lea 0x96c5ad(%rip),%rdx
    BYTE $0x48; BYTE $0x8d; BYTE $0x15; BYTE $0xad; BYTE $0xc5; BYTE $0x96; BYTE $0x00
    XORL CX, CX
    XORL SI, SI
    MOVQ BP, DI
    XORL AX, AX
    CALL _L76e1c0
    // lea 0x90dd2e(%rip),%rdx
    BYTE $0x48; BYTE $0x8d; BYTE $0x15; BYTE $0x2e; BYTE $0xdd; BYTE $0x90; BYTE $0x00
    XORL CX, CX
    XORL SI, SI
    MOVQ R12, DI
    XORL AX, AX
    CALL _L76e1c0
    // lea 0x2daef(%rip),%rax
    BYTE $0x48; BYTE $0x8d; BYTE $0x05; BYTE $0xef; BYTE $0xda; BYTE $0x02; BYTE $0x00
    // lea 0xe74e78(%rip),%r14
    BYTE $0x4c; BYTE $0x8d; BYTE $0x35; BYTE $0x78; BYTE $0x4e; BYTE $0xe7; BYTE $0x00
    LEAQ 0x20(SP), R13
    // lea 0x90dd1f(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0x1f; BYTE $0xdd; BYTE $0x90; BYTE $0x00
    MOVQ R13, DI
    MOVQ AX, 0x78(SP)
    LEAQ 0x1e(SP), AX
    ORQ $0x1, R14
    MOVQ R14, 0x70(SP)
    MOVQ AX, DX
    MOVQ AX, 0x8(SP)
    CALL _L71f7f0
    // lea 0xec808b(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0x8b; BYTE $0x80; BYTE $0xec; BYTE $0x00
    MOVQ BP, R8
    MOVQ R12, CX
    MOVQ BX, DX
    MOVQ R13, SI
    CALL _L767c30
    MOVQ 0x20(SP), CX
    LEAQ 0x1f(SP), R15
    MOVQ R15, SI
    LEAQ -0x18(CX), DI
    CALL _L71edb0
    MOVQ BX, DI
    CALL _L75d9b0
    MOVQ R12, DI
    CALL _L75cbf0
    MOVQ BP, DI
    CALL _L75cbf0
    XORL CX, CX
    XORL DX, DX
    XORL SI, SI
    MOVQ BP, DI
    XORL AX, AX
    CALL _L76e1c0
    // lea 0x90dcaa(%rip),%rdx
    BYTE $0x48; BYTE $0x8d; BYTE $0x15; BYTE $0xaa; BYTE $0xdc; BYTE $0x90; BYTE $0x00
    XORL CX, CX
    XORL SI, SI
    MOVQ R12, DI
    XORL AX, AX
    CALL _L76e1c0
    // lea 0x2da67(%rip),%rax
    BYTE $0x48; BYTE $0x8d; BYTE $0x05; BYTE $0x67; BYTE $0xda; BYTE $0x02; BYTE $0x00
    MOVQ 0x8(SP), DX
    // lea 0x90dca3(%rip),%rsi
    BYTE $0x48; BYTE $0x8d; BYTE $0x35; BYTE $0xa3; BYTE $0xdc; BYTE $0x90; BYTE $0x00
    MOVQ R13, DI
    MOVQ R14, 0x70(SP)
    MOVQ AX, 0x78(SP)
    CALL _L71f7f0
    // lea 0xec7ffa(%rip),%rdi
    BYTE $0x48; BYTE $0x8d; BYTE $0x3d; BYTE $0xfa; BYTE $0x7f; BYTE $0xec; BYTE $0x00
    MOVQ BP, R8
    MOVQ R12, CX
    MOVQ BX, DX
    MOVQ R13, SI
    CALL _L767c30
    MOVQ 0x20(SP), AX
    MOVQ R15, SI
    LEAQ -0x18(AX), DI
    CALL _L71edb0
    MOVQ BX, DI
    CALL _L75d9b0
    MOVQ R12, DI
    CALL _L75cbf0
    MOVQ BP, DI
    CALL _L75cbf0
    ADDQ $0x98, SP
    POPQ BX
    POPQ BP
    POPQ R12
    POPQ R13
    POPQ R14
    POPQ R15
    RET
    MOVQ AX, BX
_L72884d:
    MOVQ R13, DI
    CALL _Lcf2b40
    MOVQ BX, DI
    CALL _L71ea10
_L72885d:
    MOVQ AX, BX
_L728860:
    MOVQ R12, DI
    CALL _L75cbf0
_L728868:
    MOVQ BP, DI
    CALL _L75cbf0
    MOVQ BX, DI
    CALL _L71ea10
    MOVQ AX, R13
    MOVQ 0x20(SP), AX
    MOVQ R15, SI
    LEAQ -0x18(AX), DI
    CALL _L71edb0
_L72888c:
    MOVQ BX, DI
    MOVQ R13, BX
    CALL _L75d9b0
    JMP _L728860
    MOVQ AX, R13
    JMP _L72888c
_L72889e:
    MOVQ AX, BX
    JMP _L728868
    JMP _L72885d
    MOVQ AX, R13
    MOVQ 0x20(SP), AX
    LEAQ 0x1f(SP), SI
    LEAQ -0x18(AX), DI
    CALL _L71edb0
_L7288bb:
    MOVQ BX, DI
    MOVQ R13, BX
    CALL _L75d9b0
    JMP _L728860
    MOVQ AX, R13
    JMP _L7288bb
    NOP (AX)
    JMP _L72889e
    MOVQ AX, BX
    MOVQ 0x70(SP), AX
    MOVQ BP, SI
    LEAQ -0x18(AX), DI
    CALL _L71edb0
    MOVQ BX, DI
    CALL _L71ea10
    MOVQ AX, BX
    MOVQ 0x70(SP), AX
    LEAQ 0x30(SP), SI
    LEAQ -0x18(AX), DI
    CALL _L71edb0
    JMP _L72884d
    NOP 0x0(AX)
