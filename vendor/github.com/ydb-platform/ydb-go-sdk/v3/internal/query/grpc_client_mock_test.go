// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ydb-platform/ydb-go-genproto/Ydb_Query_V1 (interfaces: QueryServiceClient,QueryService_AttachSessionClient,QueryService_ExecuteQueryClient)
//
// Generated by this command:
//
//	mockgen -destination grpc_client_mock_test.go --typed -package query -write_package_comment=false github.com/ydb-platform/ydb-go-genproto/Ydb_Query_V1 QueryServiceClient,QueryService_AttachSessionClient,QueryService_ExecuteQueryClient
package query

import (
	context "context"
	reflect "reflect"

	Ydb_Query_V1 "github.com/ydb-platform/ydb-go-genproto/Ydb_Query_V1"
	Ydb_Operations "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Operations"
	Ydb_Query "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Query"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockQueryServiceClient is a mock of QueryServiceClient interface.
type MockQueryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockQueryServiceClientMockRecorder
}

// MockQueryServiceClientMockRecorder is the mock recorder for MockQueryServiceClient.
type MockQueryServiceClientMockRecorder struct {
	mock *MockQueryServiceClient
}

// NewMockQueryServiceClient creates a new mock instance.
func NewMockQueryServiceClient(ctrl *gomock.Controller) *MockQueryServiceClient {
	mock := &MockQueryServiceClient{ctrl: ctrl}
	mock.recorder = &MockQueryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryServiceClient) EXPECT() *MockQueryServiceClientMockRecorder {
	return m.recorder
}

// AttachSession mocks base method.
func (m *MockQueryServiceClient) AttachSession(arg0 context.Context, arg1 *Ydb_Query.AttachSessionRequest, arg2 ...grpc.CallOption) (Ydb_Query_V1.QueryService_AttachSessionClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachSession", varargs...)
	ret0, _ := ret[0].(Ydb_Query_V1.QueryService_AttachSessionClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachSession indicates an expected call of AttachSession.
func (mr *MockQueryServiceClientMockRecorder) AttachSession(arg0, arg1 any, arg2 ...any) *MockQueryServiceClientAttachSessionCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachSession", reflect.TypeOf((*MockQueryServiceClient)(nil).AttachSession), varargs...)
	return &MockQueryServiceClientAttachSessionCall{Call: call}
}

// MockQueryServiceClientAttachSessionCall wrap *gomock.Call
type MockQueryServiceClientAttachSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryServiceClientAttachSessionCall) Return(arg0 Ydb_Query_V1.QueryService_AttachSessionClient, arg1 error) *MockQueryServiceClientAttachSessionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryServiceClientAttachSessionCall) Do(f func(context.Context, *Ydb_Query.AttachSessionRequest, ...grpc.CallOption) (Ydb_Query_V1.QueryService_AttachSessionClient, error)) *MockQueryServiceClientAttachSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryServiceClientAttachSessionCall) DoAndReturn(f func(context.Context, *Ydb_Query.AttachSessionRequest, ...grpc.CallOption) (Ydb_Query_V1.QueryService_AttachSessionClient, error)) *MockQueryServiceClientAttachSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BeginTransaction mocks base method.
func (m *MockQueryServiceClient) BeginTransaction(arg0 context.Context, arg1 *Ydb_Query.BeginTransactionRequest, arg2 ...grpc.CallOption) (*Ydb_Query.BeginTransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BeginTransaction", varargs...)
	ret0, _ := ret[0].(*Ydb_Query.BeginTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockQueryServiceClientMockRecorder) BeginTransaction(arg0, arg1 any, arg2 ...any) *MockQueryServiceClientBeginTransactionCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockQueryServiceClient)(nil).BeginTransaction), varargs...)
	return &MockQueryServiceClientBeginTransactionCall{Call: call}
}

// MockQueryServiceClientBeginTransactionCall wrap *gomock.Call
type MockQueryServiceClientBeginTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryServiceClientBeginTransactionCall) Return(arg0 *Ydb_Query.BeginTransactionResponse, arg1 error) *MockQueryServiceClientBeginTransactionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryServiceClientBeginTransactionCall) Do(f func(context.Context, *Ydb_Query.BeginTransactionRequest, ...grpc.CallOption) (*Ydb_Query.BeginTransactionResponse, error)) *MockQueryServiceClientBeginTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryServiceClientBeginTransactionCall) DoAndReturn(f func(context.Context, *Ydb_Query.BeginTransactionRequest, ...grpc.CallOption) (*Ydb_Query.BeginTransactionResponse, error)) *MockQueryServiceClientBeginTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CommitTransaction mocks base method.
func (m *MockQueryServiceClient) CommitTransaction(arg0 context.Context, arg1 *Ydb_Query.CommitTransactionRequest, arg2 ...grpc.CallOption) (*Ydb_Query.CommitTransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitTransaction", varargs...)
	ret0, _ := ret[0].(*Ydb_Query.CommitTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitTransaction indicates an expected call of CommitTransaction.
func (mr *MockQueryServiceClientMockRecorder) CommitTransaction(arg0, arg1 any, arg2 ...any) *MockQueryServiceClientCommitTransactionCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransaction", reflect.TypeOf((*MockQueryServiceClient)(nil).CommitTransaction), varargs...)
	return &MockQueryServiceClientCommitTransactionCall{Call: call}
}

// MockQueryServiceClientCommitTransactionCall wrap *gomock.Call
type MockQueryServiceClientCommitTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryServiceClientCommitTransactionCall) Return(arg0 *Ydb_Query.CommitTransactionResponse, arg1 error) *MockQueryServiceClientCommitTransactionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryServiceClientCommitTransactionCall) Do(f func(context.Context, *Ydb_Query.CommitTransactionRequest, ...grpc.CallOption) (*Ydb_Query.CommitTransactionResponse, error)) *MockQueryServiceClientCommitTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryServiceClientCommitTransactionCall) DoAndReturn(f func(context.Context, *Ydb_Query.CommitTransactionRequest, ...grpc.CallOption) (*Ydb_Query.CommitTransactionResponse, error)) *MockQueryServiceClientCommitTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateSession mocks base method.
func (m *MockQueryServiceClient) CreateSession(arg0 context.Context, arg1 *Ydb_Query.CreateSessionRequest, arg2 ...grpc.CallOption) (*Ydb_Query.CreateSessionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSession", varargs...)
	ret0, _ := ret[0].(*Ydb_Query.CreateSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockQueryServiceClientMockRecorder) CreateSession(arg0, arg1 any, arg2 ...any) *MockQueryServiceClientCreateSessionCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockQueryServiceClient)(nil).CreateSession), varargs...)
	return &MockQueryServiceClientCreateSessionCall{Call: call}
}

// MockQueryServiceClientCreateSessionCall wrap *gomock.Call
type MockQueryServiceClientCreateSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryServiceClientCreateSessionCall) Return(arg0 *Ydb_Query.CreateSessionResponse, arg1 error) *MockQueryServiceClientCreateSessionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryServiceClientCreateSessionCall) Do(f func(context.Context, *Ydb_Query.CreateSessionRequest, ...grpc.CallOption) (*Ydb_Query.CreateSessionResponse, error)) *MockQueryServiceClientCreateSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryServiceClientCreateSessionCall) DoAndReturn(f func(context.Context, *Ydb_Query.CreateSessionRequest, ...grpc.CallOption) (*Ydb_Query.CreateSessionResponse, error)) *MockQueryServiceClientCreateSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteSession mocks base method.
func (m *MockQueryServiceClient) DeleteSession(arg0 context.Context, arg1 *Ydb_Query.DeleteSessionRequest, arg2 ...grpc.CallOption) (*Ydb_Query.DeleteSessionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSession", varargs...)
	ret0, _ := ret[0].(*Ydb_Query.DeleteSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockQueryServiceClientMockRecorder) DeleteSession(arg0, arg1 any, arg2 ...any) *MockQueryServiceClientDeleteSessionCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockQueryServiceClient)(nil).DeleteSession), varargs...)
	return &MockQueryServiceClientDeleteSessionCall{Call: call}
}

// MockQueryServiceClientDeleteSessionCall wrap *gomock.Call
type MockQueryServiceClientDeleteSessionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryServiceClientDeleteSessionCall) Return(arg0 *Ydb_Query.DeleteSessionResponse, arg1 error) *MockQueryServiceClientDeleteSessionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryServiceClientDeleteSessionCall) Do(f func(context.Context, *Ydb_Query.DeleteSessionRequest, ...grpc.CallOption) (*Ydb_Query.DeleteSessionResponse, error)) *MockQueryServiceClientDeleteSessionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryServiceClientDeleteSessionCall) DoAndReturn(f func(context.Context, *Ydb_Query.DeleteSessionRequest, ...grpc.CallOption) (*Ydb_Query.DeleteSessionResponse, error)) *MockQueryServiceClientDeleteSessionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExecuteQuery mocks base method.
func (m *MockQueryServiceClient) ExecuteQuery(arg0 context.Context, arg1 *Ydb_Query.ExecuteQueryRequest, arg2 ...grpc.CallOption) (Ydb_Query_V1.QueryService_ExecuteQueryClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteQuery", varargs...)
	ret0, _ := ret[0].(Ydb_Query_V1.QueryService_ExecuteQueryClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteQuery indicates an expected call of ExecuteQuery.
func (mr *MockQueryServiceClientMockRecorder) ExecuteQuery(arg0, arg1 any, arg2 ...any) *MockQueryServiceClientExecuteQueryCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteQuery", reflect.TypeOf((*MockQueryServiceClient)(nil).ExecuteQuery), varargs...)
	return &MockQueryServiceClientExecuteQueryCall{Call: call}
}

// MockQueryServiceClientExecuteQueryCall wrap *gomock.Call
type MockQueryServiceClientExecuteQueryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryServiceClientExecuteQueryCall) Return(arg0 Ydb_Query_V1.QueryService_ExecuteQueryClient, arg1 error) *MockQueryServiceClientExecuteQueryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryServiceClientExecuteQueryCall) Do(f func(context.Context, *Ydb_Query.ExecuteQueryRequest, ...grpc.CallOption) (Ydb_Query_V1.QueryService_ExecuteQueryClient, error)) *MockQueryServiceClientExecuteQueryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryServiceClientExecuteQueryCall) DoAndReturn(f func(context.Context, *Ydb_Query.ExecuteQueryRequest, ...grpc.CallOption) (Ydb_Query_V1.QueryService_ExecuteQueryClient, error)) *MockQueryServiceClientExecuteQueryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExecuteScript mocks base method.
func (m *MockQueryServiceClient) ExecuteScript(arg0 context.Context, arg1 *Ydb_Query.ExecuteScriptRequest, arg2 ...grpc.CallOption) (*Ydb_Operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteScript", varargs...)
	ret0, _ := ret[0].(*Ydb_Operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteScript indicates an expected call of ExecuteScript.
func (mr *MockQueryServiceClientMockRecorder) ExecuteScript(arg0, arg1 any, arg2 ...any) *MockQueryServiceClientExecuteScriptCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteScript", reflect.TypeOf((*MockQueryServiceClient)(nil).ExecuteScript), varargs...)
	return &MockQueryServiceClientExecuteScriptCall{Call: call}
}

// MockQueryServiceClientExecuteScriptCall wrap *gomock.Call
type MockQueryServiceClientExecuteScriptCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryServiceClientExecuteScriptCall) Return(arg0 *Ydb_Operations.Operation, arg1 error) *MockQueryServiceClientExecuteScriptCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryServiceClientExecuteScriptCall) Do(f func(context.Context, *Ydb_Query.ExecuteScriptRequest, ...grpc.CallOption) (*Ydb_Operations.Operation, error)) *MockQueryServiceClientExecuteScriptCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryServiceClientExecuteScriptCall) DoAndReturn(f func(context.Context, *Ydb_Query.ExecuteScriptRequest, ...grpc.CallOption) (*Ydb_Operations.Operation, error)) *MockQueryServiceClientExecuteScriptCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchScriptResults mocks base method.
func (m *MockQueryServiceClient) FetchScriptResults(arg0 context.Context, arg1 *Ydb_Query.FetchScriptResultsRequest, arg2 ...grpc.CallOption) (*Ydb_Query.FetchScriptResultsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchScriptResults", varargs...)
	ret0, _ := ret[0].(*Ydb_Query.FetchScriptResultsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchScriptResults indicates an expected call of FetchScriptResults.
func (mr *MockQueryServiceClientMockRecorder) FetchScriptResults(arg0, arg1 any, arg2 ...any) *MockQueryServiceClientFetchScriptResultsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchScriptResults", reflect.TypeOf((*MockQueryServiceClient)(nil).FetchScriptResults), varargs...)
	return &MockQueryServiceClientFetchScriptResultsCall{Call: call}
}

// MockQueryServiceClientFetchScriptResultsCall wrap *gomock.Call
type MockQueryServiceClientFetchScriptResultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryServiceClientFetchScriptResultsCall) Return(arg0 *Ydb_Query.FetchScriptResultsResponse, arg1 error) *MockQueryServiceClientFetchScriptResultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryServiceClientFetchScriptResultsCall) Do(f func(context.Context, *Ydb_Query.FetchScriptResultsRequest, ...grpc.CallOption) (*Ydb_Query.FetchScriptResultsResponse, error)) *MockQueryServiceClientFetchScriptResultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryServiceClientFetchScriptResultsCall) DoAndReturn(f func(context.Context, *Ydb_Query.FetchScriptResultsRequest, ...grpc.CallOption) (*Ydb_Query.FetchScriptResultsResponse, error)) *MockQueryServiceClientFetchScriptResultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackTransaction mocks base method.
func (m *MockQueryServiceClient) RollbackTransaction(arg0 context.Context, arg1 *Ydb_Query.RollbackTransactionRequest, arg2 ...grpc.CallOption) (*Ydb_Query.RollbackTransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RollbackTransaction", varargs...)
	ret0, _ := ret[0].(*Ydb_Query.RollbackTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackTransaction indicates an expected call of RollbackTransaction.
func (mr *MockQueryServiceClientMockRecorder) RollbackTransaction(arg0, arg1 any, arg2 ...any) *MockQueryServiceClientRollbackTransactionCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransaction", reflect.TypeOf((*MockQueryServiceClient)(nil).RollbackTransaction), varargs...)
	return &MockQueryServiceClientRollbackTransactionCall{Call: call}
}

// MockQueryServiceClientRollbackTransactionCall wrap *gomock.Call
type MockQueryServiceClientRollbackTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryServiceClientRollbackTransactionCall) Return(arg0 *Ydb_Query.RollbackTransactionResponse, arg1 error) *MockQueryServiceClientRollbackTransactionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryServiceClientRollbackTransactionCall) Do(f func(context.Context, *Ydb_Query.RollbackTransactionRequest, ...grpc.CallOption) (*Ydb_Query.RollbackTransactionResponse, error)) *MockQueryServiceClientRollbackTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryServiceClientRollbackTransactionCall) DoAndReturn(f func(context.Context, *Ydb_Query.RollbackTransactionRequest, ...grpc.CallOption) (*Ydb_Query.RollbackTransactionResponse, error)) *MockQueryServiceClientRollbackTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockQueryService_AttachSessionClient is a mock of QueryService_AttachSessionClient interface.
type MockQueryService_AttachSessionClient struct {
	ctrl     *gomock.Controller
	recorder *MockQueryService_AttachSessionClientMockRecorder
}

// MockQueryService_AttachSessionClientMockRecorder is the mock recorder for MockQueryService_AttachSessionClient.
type MockQueryService_AttachSessionClientMockRecorder struct {
	mock *MockQueryService_AttachSessionClient
}

// NewMockQueryService_AttachSessionClient creates a new mock instance.
func NewMockQueryService_AttachSessionClient(ctrl *gomock.Controller) *MockQueryService_AttachSessionClient {
	mock := &MockQueryService_AttachSessionClient{ctrl: ctrl}
	mock.recorder = &MockQueryService_AttachSessionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryService_AttachSessionClient) EXPECT() *MockQueryService_AttachSessionClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockQueryService_AttachSessionClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockQueryService_AttachSessionClientMockRecorder) CloseSend() *MockQueryService_AttachSessionClientCloseSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockQueryService_AttachSessionClient)(nil).CloseSend))
	return &MockQueryService_AttachSessionClientCloseSendCall{Call: call}
}

// MockQueryService_AttachSessionClientCloseSendCall wrap *gomock.Call
type MockQueryService_AttachSessionClientCloseSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryService_AttachSessionClientCloseSendCall) Return(arg0 error) *MockQueryService_AttachSessionClientCloseSendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryService_AttachSessionClientCloseSendCall) Do(f func() error) *MockQueryService_AttachSessionClientCloseSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryService_AttachSessionClientCloseSendCall) DoAndReturn(f func() error) *MockQueryService_AttachSessionClientCloseSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Context mocks base method.
func (m *MockQueryService_AttachSessionClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockQueryService_AttachSessionClientMockRecorder) Context() *MockQueryService_AttachSessionClientContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockQueryService_AttachSessionClient)(nil).Context))
	return &MockQueryService_AttachSessionClientContextCall{Call: call}
}

// MockQueryService_AttachSessionClientContextCall wrap *gomock.Call
type MockQueryService_AttachSessionClientContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryService_AttachSessionClientContextCall) Return(arg0 context.Context) *MockQueryService_AttachSessionClientContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryService_AttachSessionClientContextCall) Do(f func() context.Context) *MockQueryService_AttachSessionClientContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryService_AttachSessionClientContextCall) DoAndReturn(f func() context.Context) *MockQueryService_AttachSessionClientContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Header mocks base method.
func (m *MockQueryService_AttachSessionClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockQueryService_AttachSessionClientMockRecorder) Header() *MockQueryService_AttachSessionClientHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockQueryService_AttachSessionClient)(nil).Header))
	return &MockQueryService_AttachSessionClientHeaderCall{Call: call}
}

// MockQueryService_AttachSessionClientHeaderCall wrap *gomock.Call
type MockQueryService_AttachSessionClientHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryService_AttachSessionClientHeaderCall) Return(arg0 metadata.MD, arg1 error) *MockQueryService_AttachSessionClientHeaderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryService_AttachSessionClientHeaderCall) Do(f func() (metadata.MD, error)) *MockQueryService_AttachSessionClientHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryService_AttachSessionClientHeaderCall) DoAndReturn(f func() (metadata.MD, error)) *MockQueryService_AttachSessionClientHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Recv mocks base method.
func (m *MockQueryService_AttachSessionClient) Recv() (*Ydb_Query.SessionState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Ydb_Query.SessionState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockQueryService_AttachSessionClientMockRecorder) Recv() *MockQueryService_AttachSessionClientRecvCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockQueryService_AttachSessionClient)(nil).Recv))
	return &MockQueryService_AttachSessionClientRecvCall{Call: call}
}

// MockQueryService_AttachSessionClientRecvCall wrap *gomock.Call
type MockQueryService_AttachSessionClientRecvCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryService_AttachSessionClientRecvCall) Return(arg0 *Ydb_Query.SessionState, arg1 error) *MockQueryService_AttachSessionClientRecvCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryService_AttachSessionClientRecvCall) Do(f func() (*Ydb_Query.SessionState, error)) *MockQueryService_AttachSessionClientRecvCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryService_AttachSessionClientRecvCall) DoAndReturn(f func() (*Ydb_Query.SessionState, error)) *MockQueryService_AttachSessionClientRecvCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RecvMsg mocks base method.
func (m *MockQueryService_AttachSessionClient) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockQueryService_AttachSessionClientMockRecorder) RecvMsg(arg0 any) *MockQueryService_AttachSessionClientRecvMsgCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockQueryService_AttachSessionClient)(nil).RecvMsg), arg0)
	return &MockQueryService_AttachSessionClientRecvMsgCall{Call: call}
}

// MockQueryService_AttachSessionClientRecvMsgCall wrap *gomock.Call
type MockQueryService_AttachSessionClientRecvMsgCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryService_AttachSessionClientRecvMsgCall) Return(arg0 error) *MockQueryService_AttachSessionClientRecvMsgCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryService_AttachSessionClientRecvMsgCall) Do(f func(any) error) *MockQueryService_AttachSessionClientRecvMsgCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryService_AttachSessionClientRecvMsgCall) DoAndReturn(f func(any) error) *MockQueryService_AttachSessionClientRecvMsgCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendMsg mocks base method.
func (m *MockQueryService_AttachSessionClient) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockQueryService_AttachSessionClientMockRecorder) SendMsg(arg0 any) *MockQueryService_AttachSessionClientSendMsgCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockQueryService_AttachSessionClient)(nil).SendMsg), arg0)
	return &MockQueryService_AttachSessionClientSendMsgCall{Call: call}
}

// MockQueryService_AttachSessionClientSendMsgCall wrap *gomock.Call
type MockQueryService_AttachSessionClientSendMsgCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryService_AttachSessionClientSendMsgCall) Return(arg0 error) *MockQueryService_AttachSessionClientSendMsgCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryService_AttachSessionClientSendMsgCall) Do(f func(any) error) *MockQueryService_AttachSessionClientSendMsgCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryService_AttachSessionClientSendMsgCall) DoAndReturn(f func(any) error) *MockQueryService_AttachSessionClientSendMsgCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Trailer mocks base method.
func (m *MockQueryService_AttachSessionClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockQueryService_AttachSessionClientMockRecorder) Trailer() *MockQueryService_AttachSessionClientTrailerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockQueryService_AttachSessionClient)(nil).Trailer))
	return &MockQueryService_AttachSessionClientTrailerCall{Call: call}
}

// MockQueryService_AttachSessionClientTrailerCall wrap *gomock.Call
type MockQueryService_AttachSessionClientTrailerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryService_AttachSessionClientTrailerCall) Return(arg0 metadata.MD) *MockQueryService_AttachSessionClientTrailerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryService_AttachSessionClientTrailerCall) Do(f func() metadata.MD) *MockQueryService_AttachSessionClientTrailerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryService_AttachSessionClientTrailerCall) DoAndReturn(f func() metadata.MD) *MockQueryService_AttachSessionClientTrailerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockQueryService_ExecuteQueryClient is a mock of QueryService_ExecuteQueryClient interface.
type MockQueryService_ExecuteQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockQueryService_ExecuteQueryClientMockRecorder
}

// MockQueryService_ExecuteQueryClientMockRecorder is the mock recorder for MockQueryService_ExecuteQueryClient.
type MockQueryService_ExecuteQueryClientMockRecorder struct {
	mock *MockQueryService_ExecuteQueryClient
}

// NewMockQueryService_ExecuteQueryClient creates a new mock instance.
func NewMockQueryService_ExecuteQueryClient(ctrl *gomock.Controller) *MockQueryService_ExecuteQueryClient {
	mock := &MockQueryService_ExecuteQueryClient{ctrl: ctrl}
	mock.recorder = &MockQueryService_ExecuteQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryService_ExecuteQueryClient) EXPECT() *MockQueryService_ExecuteQueryClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockQueryService_ExecuteQueryClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockQueryService_ExecuteQueryClientMockRecorder) CloseSend() *MockQueryService_ExecuteQueryClientCloseSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockQueryService_ExecuteQueryClient)(nil).CloseSend))
	return &MockQueryService_ExecuteQueryClientCloseSendCall{Call: call}
}

// MockQueryService_ExecuteQueryClientCloseSendCall wrap *gomock.Call
type MockQueryService_ExecuteQueryClientCloseSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryService_ExecuteQueryClientCloseSendCall) Return(arg0 error) *MockQueryService_ExecuteQueryClientCloseSendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryService_ExecuteQueryClientCloseSendCall) Do(f func() error) *MockQueryService_ExecuteQueryClientCloseSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryService_ExecuteQueryClientCloseSendCall) DoAndReturn(f func() error) *MockQueryService_ExecuteQueryClientCloseSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Context mocks base method.
func (m *MockQueryService_ExecuteQueryClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockQueryService_ExecuteQueryClientMockRecorder) Context() *MockQueryService_ExecuteQueryClientContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockQueryService_ExecuteQueryClient)(nil).Context))
	return &MockQueryService_ExecuteQueryClientContextCall{Call: call}
}

// MockQueryService_ExecuteQueryClientContextCall wrap *gomock.Call
type MockQueryService_ExecuteQueryClientContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryService_ExecuteQueryClientContextCall) Return(arg0 context.Context) *MockQueryService_ExecuteQueryClientContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryService_ExecuteQueryClientContextCall) Do(f func() context.Context) *MockQueryService_ExecuteQueryClientContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryService_ExecuteQueryClientContextCall) DoAndReturn(f func() context.Context) *MockQueryService_ExecuteQueryClientContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Header mocks base method.
func (m *MockQueryService_ExecuteQueryClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockQueryService_ExecuteQueryClientMockRecorder) Header() *MockQueryService_ExecuteQueryClientHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockQueryService_ExecuteQueryClient)(nil).Header))
	return &MockQueryService_ExecuteQueryClientHeaderCall{Call: call}
}

// MockQueryService_ExecuteQueryClientHeaderCall wrap *gomock.Call
type MockQueryService_ExecuteQueryClientHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryService_ExecuteQueryClientHeaderCall) Return(arg0 metadata.MD, arg1 error) *MockQueryService_ExecuteQueryClientHeaderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryService_ExecuteQueryClientHeaderCall) Do(f func() (metadata.MD, error)) *MockQueryService_ExecuteQueryClientHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryService_ExecuteQueryClientHeaderCall) DoAndReturn(f func() (metadata.MD, error)) *MockQueryService_ExecuteQueryClientHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Recv mocks base method.
func (m *MockQueryService_ExecuteQueryClient) Recv() (*Ydb_Query.ExecuteQueryResponsePart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Ydb_Query.ExecuteQueryResponsePart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockQueryService_ExecuteQueryClientMockRecorder) Recv() *MockQueryService_ExecuteQueryClientRecvCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockQueryService_ExecuteQueryClient)(nil).Recv))
	return &MockQueryService_ExecuteQueryClientRecvCall{Call: call}
}

// MockQueryService_ExecuteQueryClientRecvCall wrap *gomock.Call
type MockQueryService_ExecuteQueryClientRecvCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryService_ExecuteQueryClientRecvCall) Return(arg0 *Ydb_Query.ExecuteQueryResponsePart, arg1 error) *MockQueryService_ExecuteQueryClientRecvCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryService_ExecuteQueryClientRecvCall) Do(f func() (*Ydb_Query.ExecuteQueryResponsePart, error)) *MockQueryService_ExecuteQueryClientRecvCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryService_ExecuteQueryClientRecvCall) DoAndReturn(f func() (*Ydb_Query.ExecuteQueryResponsePart, error)) *MockQueryService_ExecuteQueryClientRecvCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RecvMsg mocks base method.
func (m *MockQueryService_ExecuteQueryClient) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockQueryService_ExecuteQueryClientMockRecorder) RecvMsg(arg0 any) *MockQueryService_ExecuteQueryClientRecvMsgCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockQueryService_ExecuteQueryClient)(nil).RecvMsg), arg0)
	return &MockQueryService_ExecuteQueryClientRecvMsgCall{Call: call}
}

// MockQueryService_ExecuteQueryClientRecvMsgCall wrap *gomock.Call
type MockQueryService_ExecuteQueryClientRecvMsgCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryService_ExecuteQueryClientRecvMsgCall) Return(arg0 error) *MockQueryService_ExecuteQueryClientRecvMsgCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryService_ExecuteQueryClientRecvMsgCall) Do(f func(any) error) *MockQueryService_ExecuteQueryClientRecvMsgCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryService_ExecuteQueryClientRecvMsgCall) DoAndReturn(f func(any) error) *MockQueryService_ExecuteQueryClientRecvMsgCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendMsg mocks base method.
func (m *MockQueryService_ExecuteQueryClient) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockQueryService_ExecuteQueryClientMockRecorder) SendMsg(arg0 any) *MockQueryService_ExecuteQueryClientSendMsgCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockQueryService_ExecuteQueryClient)(nil).SendMsg), arg0)
	return &MockQueryService_ExecuteQueryClientSendMsgCall{Call: call}
}

// MockQueryService_ExecuteQueryClientSendMsgCall wrap *gomock.Call
type MockQueryService_ExecuteQueryClientSendMsgCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryService_ExecuteQueryClientSendMsgCall) Return(arg0 error) *MockQueryService_ExecuteQueryClientSendMsgCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryService_ExecuteQueryClientSendMsgCall) Do(f func(any) error) *MockQueryService_ExecuteQueryClientSendMsgCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryService_ExecuteQueryClientSendMsgCall) DoAndReturn(f func(any) error) *MockQueryService_ExecuteQueryClientSendMsgCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Trailer mocks base method.
func (m *MockQueryService_ExecuteQueryClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockQueryService_ExecuteQueryClientMockRecorder) Trailer() *MockQueryService_ExecuteQueryClientTrailerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockQueryService_ExecuteQueryClient)(nil).Trailer))
	return &MockQueryService_ExecuteQueryClientTrailerCall{Call: call}
}

// MockQueryService_ExecuteQueryClientTrailerCall wrap *gomock.Call
type MockQueryService_ExecuteQueryClientTrailerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQueryService_ExecuteQueryClientTrailerCall) Return(arg0 metadata.MD) *MockQueryService_ExecuteQueryClientTrailerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQueryService_ExecuteQueryClientTrailerCall) Do(f func() metadata.MD) *MockQueryService_ExecuteQueryClientTrailerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQueryService_ExecuteQueryClientTrailerCall) DoAndReturn(f func() metadata.MD) *MockQueryService_ExecuteQueryClientTrailerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
