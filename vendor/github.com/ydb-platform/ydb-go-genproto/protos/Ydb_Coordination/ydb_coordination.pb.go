// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
//     protoc-gen-go v1.31.0
//     protoc        v4.25.1
// source: protos/ydb_coordination.proto

package Ydb_Coordination

import (
    Ydb "github.com/ydb-platform/ydb-go-genproto/protos/Ydb"
    Ydb_Issue "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Issue"
    Ydb_Operations "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Operations"
    Ydb_Scheme "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Scheme"
    protoreflect "google.golang.org/protobuf/reflect/protoreflect"
    protoimpl "google.golang.org/protobuf/runtime/protoimpl"
    reflect "reflect"
    sync "sync"
)

const (
    // Verify that this generated code is sufficiently up-to-date.
    _ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
    // Verify that runtime/protoimpl is sufficiently up-to-date.
    _ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Consistency mode
type ConsistencyMode int32

const (
    // The default or current value
    ConsistencyMode_CONSISTENCY_MODE_UNSET ConsistencyMode = 0
    // Strict mode makes sure operations may only complete on current leader
    ConsistencyMode_CONSISTENCY_MODE_STRICT ConsistencyMode = 1
    // Relaxed mode allows operations to complete on stale masters
    ConsistencyMode_CONSISTENCY_MODE_RELAXED ConsistencyMode = 2
)

// Enum value maps for ConsistencyMode.
var (
    ConsistencyMode_name = map[int32]string{
        0: "CONSISTENCY_MODE_UNSET",
        1: "CONSISTENCY_MODE_STRICT",
        2: "CONSISTENCY_MODE_RELAXED",
    }
    ConsistencyMode_value = map[string]int32{
        "CONSISTENCY_MODE_UNSET":   0,
        "CONSISTENCY_MODE_STRICT":  1,
        "CONSISTENCY_MODE_RELAXED": 2,
    }
)

func (x ConsistencyMode) Enum() *ConsistencyMode {
    p := new(ConsistencyMode)
    *p = x
    return p
}

func (x ConsistencyMode) String() string {
    return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsistencyMode) Descriptor() protoreflect.EnumDescriptor {
    return file_protos_ydb_coordination_proto_enumTypes[0].Descriptor()
}

func (ConsistencyMode) Type() protoreflect.EnumType {
    return &file_protos_ydb_coordination_proto_enumTypes[0]
}

func (x ConsistencyMode) Number() protoreflect.EnumNumber {
    return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsistencyMode.Descriptor instead.
func (ConsistencyMode) EnumDescriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{0}
}

// *
// Counters mode
type RateLimiterCountersMode int32

const (
    // The default or current value
    RateLimiterCountersMode_RATE_LIMITER_COUNTERS_MODE_UNSET RateLimiterCountersMode = 0
    // Aggregated counters for resource tree
    RateLimiterCountersMode_RATE_LIMITER_COUNTERS_MODE_AGGREGATED RateLimiterCountersMode = 1
    // Counters on every resource
    RateLimiterCountersMode_RATE_LIMITER_COUNTERS_MODE_DETAILED RateLimiterCountersMode = 2
)

// Enum value maps for RateLimiterCountersMode.
var (
    RateLimiterCountersMode_name = map[int32]string{
        0: "RATE_LIMITER_COUNTERS_MODE_UNSET",
        1: "RATE_LIMITER_COUNTERS_MODE_AGGREGATED",
        2: "RATE_LIMITER_COUNTERS_MODE_DETAILED",
    }
    RateLimiterCountersMode_value = map[string]int32{
        "RATE_LIMITER_COUNTERS_MODE_UNSET":      0,
        "RATE_LIMITER_COUNTERS_MODE_AGGREGATED": 1,
        "RATE_LIMITER_COUNTERS_MODE_DETAILED":   2,
    }
)

func (x RateLimiterCountersMode) Enum() *RateLimiterCountersMode {
    p := new(RateLimiterCountersMode)
    *p = x
    return p
}

func (x RateLimiterCountersMode) String() string {
    return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RateLimiterCountersMode) Descriptor() protoreflect.EnumDescriptor {
    return file_protos_ydb_coordination_proto_enumTypes[1].Descriptor()
}

func (RateLimiterCountersMode) Type() protoreflect.EnumType {
    return &file_protos_ydb_coordination_proto_enumTypes[1]
}

func (x RateLimiterCountersMode) Number() protoreflect.EnumNumber {
    return protoreflect.EnumNumber(x)
}

// Deprecated: Use RateLimiterCountersMode.Descriptor instead.
func (RateLimiterCountersMode) EnumDescriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{1}
}

// *
// Stub for unsupported messages
type Unsupported struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields
}

func (x *Unsupported) Reset() {
    *x = Unsupported{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[0]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *Unsupported) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*Unsupported) ProtoMessage() {}

func (x *Unsupported) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[0]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use Unsupported.ProtoReflect.Descriptor instead.
func (*Unsupported) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{0}
}

// *
// Configuration settings for a coordination node
type Config struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    // Initialized on creation, cannot be set
    Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
    // Period in milliseconds for self-checks (default 1 second)
    SelfCheckPeriodMillis uint32 `protobuf:"varint,2,opt,name=self_check_period_millis,json=selfCheckPeriodMillis,proto3" json:"self_check_period_millis,omitempty"`
    // Grace period for sessions on leader change (default 10 seconds)
    SessionGracePeriodMillis uint32 `protobuf:"varint,3,opt,name=session_grace_period_millis,json=sessionGracePeriodMillis,proto3" json:"session_grace_period_millis,omitempty"`
    // Concistency mode for read operations
    ReadConsistencyMode ConsistencyMode `protobuf:"varint,4,opt,name=read_consistency_mode,json=readConsistencyMode,proto3,enum=Ydb.Coordination.ConsistencyMode" json:"read_consistency_mode,omitempty"`
    // Consistency mode for attach operations
    AttachConsistencyMode ConsistencyMode `protobuf:"varint,5,opt,name=attach_consistency_mode,json=attachConsistencyMode,proto3,enum=Ydb.Coordination.ConsistencyMode" json:"attach_consistency_mode,omitempty"`
    // Rate limiter counters mode
    RateLimiterCountersMode RateLimiterCountersMode `protobuf:"varint,6,opt,name=rate_limiter_counters_mode,json=rateLimiterCountersMode,proto3,enum=Ydb.Coordination.RateLimiterCountersMode" json:"rate_limiter_counters_mode,omitempty"`
}

func (x *Config) Reset() {
    *x = Config{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[1]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *Config) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[1]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{1}
}

func (x *Config) GetPath() string {
    if x != nil {
        return x.Path
    }
    return ""
}

func (x *Config) GetSelfCheckPeriodMillis() uint32 {
    if x != nil {
        return x.SelfCheckPeriodMillis
    }
    return 0
}

func (x *Config) GetSessionGracePeriodMillis() uint32 {
    if x != nil {
        return x.SessionGracePeriodMillis
    }
    return 0
}

func (x *Config) GetReadConsistencyMode() ConsistencyMode {
    if x != nil {
        return x.ReadConsistencyMode
    }
    return ConsistencyMode_CONSISTENCY_MODE_UNSET
}

func (x *Config) GetAttachConsistencyMode() ConsistencyMode {
    if x != nil {
        return x.AttachConsistencyMode
    }
    return ConsistencyMode_CONSISTENCY_MODE_UNSET
}

func (x *Config) GetRateLimiterCountersMode() RateLimiterCountersMode {
    if x != nil {
        return x.RateLimiterCountersMode
    }
    return RateLimiterCountersMode_RATE_LIMITER_COUNTERS_MODE_UNSET
}

// *
// Describes an active client session
type SessionDescription struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    // Session id generated by the server
    SessionId uint64 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
    // Expiration timeout of the session
    TimeoutMillis uint64 `protobuf:"varint,2,opt,name=timeout_millis,json=timeoutMillis,proto3" json:"timeout_millis,omitempty"`
    // User-specified description of this session
    Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
    // True if this session is currently attached to a client
    Attached bool `protobuf:"varint,4,opt,name=attached,proto3" json:"attached,omitempty"`
}

func (x *SessionDescription) Reset() {
    *x = SessionDescription{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[2]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionDescription) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionDescription) ProtoMessage() {}

func (x *SessionDescription) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[2]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionDescription.ProtoReflect.Descriptor instead.
func (*SessionDescription) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{2}
}

func (x *SessionDescription) GetSessionId() uint64 {
    if x != nil {
        return x.SessionId
    }
    return 0
}

func (x *SessionDescription) GetTimeoutMillis() uint64 {
    if x != nil {
        return x.TimeoutMillis
    }
    return 0
}

func (x *SessionDescription) GetDescription() string {
    if x != nil {
        return x.Description
    }
    return ""
}

func (x *SessionDescription) GetAttached() bool {
    if x != nil {
        return x.Attached
    }
    return false
}

// *
// Describes an owner or a waiter of this semaphore
type SemaphoreSession struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    // A monotonically increasing id which determines locking order
    OrderId uint64 `protobuf:"varint,5,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
    // An id of the session which tried to acquire the semaphore
    SessionId uint64 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
    // A timeout in milliseconds for operation in waiters queue
    TimeoutMillis uint64 `protobuf:"varint,2,opt,name=timeout_millis,json=timeoutMillis,proto3" json:"timeout_millis,omitempty"`
    // Number of tokens for an acquire operation
    Count uint64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
    // User-defined data attached to the acquire operation
    Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SemaphoreSession) Reset() {
    *x = SemaphoreSession{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[3]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SemaphoreSession) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SemaphoreSession) ProtoMessage() {}

func (x *SemaphoreSession) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[3]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SemaphoreSession.ProtoReflect.Descriptor instead.
func (*SemaphoreSession) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{3}
}

func (x *SemaphoreSession) GetOrderId() uint64 {
    if x != nil {
        return x.OrderId
    }
    return 0
}

func (x *SemaphoreSession) GetSessionId() uint64 {
    if x != nil {
        return x.SessionId
    }
    return 0
}

func (x *SemaphoreSession) GetTimeoutMillis() uint64 {
    if x != nil {
        return x.TimeoutMillis
    }
    return 0
}

func (x *SemaphoreSession) GetCount() uint64 {
    if x != nil {
        return x.Count
    }
    return 0
}

func (x *SemaphoreSession) GetData() []byte {
    if x != nil {
        return x.Data
    }
    return nil
}

// *
// Describes the state of a semaphore
type SemaphoreDescription struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    // Name of the semaphore
    Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
    // User-defined data attached to the semaphore
    Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
    // Number of tokens currently acquired by owners
    Count uint64 `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
    // Maximum number of tokens that may acquired
    Limit uint64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
    // Ephemeral semaphores are deleted when released by all owners and waiters
    Ephemeral bool `protobuf:"varint,4,opt,name=ephemeral,proto3" json:"ephemeral,omitempty"`
    // A list of current owners of the semaphore
    Owners []*SemaphoreSession `protobuf:"bytes,5,rep,name=owners,proto3" json:"owners,omitempty"`
    // A list of current waiters on the semaphore
    Waiters []*SemaphoreSession `protobuf:"bytes,6,rep,name=waiters,proto3" json:"waiters,omitempty"`
}

func (x *SemaphoreDescription) Reset() {
    *x = SemaphoreDescription{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[4]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SemaphoreDescription) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SemaphoreDescription) ProtoMessage() {}

func (x *SemaphoreDescription) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[4]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SemaphoreDescription.ProtoReflect.Descriptor instead.
func (*SemaphoreDescription) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{4}
}

func (x *SemaphoreDescription) GetName() string {
    if x != nil {
        return x.Name
    }
    return ""
}

func (x *SemaphoreDescription) GetData() []byte {
    if x != nil {
        return x.Data
    }
    return nil
}

func (x *SemaphoreDescription) GetCount() uint64 {
    if x != nil {
        return x.Count
    }
    return 0
}

func (x *SemaphoreDescription) GetLimit() uint64 {
    if x != nil {
        return x.Limit
    }
    return 0
}

func (x *SemaphoreDescription) GetEphemeral() bool {
    if x != nil {
        return x.Ephemeral
    }
    return false
}

func (x *SemaphoreDescription) GetOwners() []*SemaphoreSession {
    if x != nil {
        return x.Owners
    }
    return nil
}

func (x *SemaphoreDescription) GetWaiters() []*SemaphoreSession {
    if x != nil {
        return x.Waiters
    }
    return nil
}

// *
// Session request message sent from client to server
type SessionRequest struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    // Types that are assignable to Request:
    //
    //    *SessionRequest_Ping
    //    *SessionRequest_Pong
    //    *SessionRequest_SessionStart_
    //    *SessionRequest_SessionStop_
    //    *SessionRequest_Unsupported_5
    //    *SessionRequest_Unsupported_6
    //    *SessionRequest_AcquireSemaphore_
    //    *SessionRequest_ReleaseSemaphore_
    //    *SessionRequest_DescribeSemaphore_
    //    *SessionRequest_CreateSemaphore_
    //    *SessionRequest_UpdateSemaphore_
    //    *SessionRequest_DeleteSemaphore_
    //    *SessionRequest_Unsupported_13
    //    *SessionRequest_Unsupported_14
    //    *SessionRequest_Unsupported_15
    Request isSessionRequest_Request `protobuf_oneof:"request"`
}

func (x *SessionRequest) Reset() {
    *x = SessionRequest{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[5]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionRequest) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest) ProtoMessage() {}

func (x *SessionRequest) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[5]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionRequest.ProtoReflect.Descriptor instead.
func (*SessionRequest) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{5}
}

func (m *SessionRequest) GetRequest() isSessionRequest_Request {
    if m != nil {
        return m.Request
    }
    return nil
}

func (x *SessionRequest) GetPing() *SessionRequest_PingPong {
    if x, ok := x.GetRequest().(*SessionRequest_Ping); ok {
        return x.Ping
    }
    return nil
}

func (x *SessionRequest) GetPong() *SessionRequest_PingPong {
    if x, ok := x.GetRequest().(*SessionRequest_Pong); ok {
        return x.Pong
    }
    return nil
}

func (x *SessionRequest) GetSessionStart() *SessionRequest_SessionStart {
    if x, ok := x.GetRequest().(*SessionRequest_SessionStart_); ok {
        return x.SessionStart
    }
    return nil
}

func (x *SessionRequest) GetSessionStop() *SessionRequest_SessionStop {
    if x, ok := x.GetRequest().(*SessionRequest_SessionStop_); ok {
        return x.SessionStop
    }
    return nil
}

func (x *SessionRequest) GetUnsupported_5() *Unsupported {
    if x, ok := x.GetRequest().(*SessionRequest_Unsupported_5); ok {
        return x.Unsupported_5
    }
    return nil
}

func (x *SessionRequest) GetUnsupported_6() *Unsupported {
    if x, ok := x.GetRequest().(*SessionRequest_Unsupported_6); ok {
        return x.Unsupported_6
    }
    return nil
}

func (x *SessionRequest) GetAcquireSemaphore() *SessionRequest_AcquireSemaphore {
    if x, ok := x.GetRequest().(*SessionRequest_AcquireSemaphore_); ok {
        return x.AcquireSemaphore
    }
    return nil
}

func (x *SessionRequest) GetReleaseSemaphore() *SessionRequest_ReleaseSemaphore {
    if x, ok := x.GetRequest().(*SessionRequest_ReleaseSemaphore_); ok {
        return x.ReleaseSemaphore
    }
    return nil
}

func (x *SessionRequest) GetDescribeSemaphore() *SessionRequest_DescribeSemaphore {
    if x, ok := x.GetRequest().(*SessionRequest_DescribeSemaphore_); ok {
        return x.DescribeSemaphore
    }
    return nil
}

func (x *SessionRequest) GetCreateSemaphore() *SessionRequest_CreateSemaphore {
    if x, ok := x.GetRequest().(*SessionRequest_CreateSemaphore_); ok {
        return x.CreateSemaphore
    }
    return nil
}

func (x *SessionRequest) GetUpdateSemaphore() *SessionRequest_UpdateSemaphore {
    if x, ok := x.GetRequest().(*SessionRequest_UpdateSemaphore_); ok {
        return x.UpdateSemaphore
    }
    return nil
}

func (x *SessionRequest) GetDeleteSemaphore() *SessionRequest_DeleteSemaphore {
    if x, ok := x.GetRequest().(*SessionRequest_DeleteSemaphore_); ok {
        return x.DeleteSemaphore
    }
    return nil
}

func (x *SessionRequest) GetUnsupported_13() *Unsupported {
    if x, ok := x.GetRequest().(*SessionRequest_Unsupported_13); ok {
        return x.Unsupported_13
    }
    return nil
}

func (x *SessionRequest) GetUnsupported_14() *Unsupported {
    if x, ok := x.GetRequest().(*SessionRequest_Unsupported_14); ok {
        return x.Unsupported_14
    }
    return nil
}

func (x *SessionRequest) GetUnsupported_15() *Unsupported {
    if x, ok := x.GetRequest().(*SessionRequest_Unsupported_15); ok {
        return x.Unsupported_15
    }
    return nil
}

type isSessionRequest_Request interface {
    isSessionRequest_Request()
}

type SessionRequest_Ping struct {
    Ping *SessionRequest_PingPong `protobuf:"bytes,1,opt,name=ping,proto3,oneof"`
}

type SessionRequest_Pong struct {
    Pong *SessionRequest_PingPong `protobuf:"bytes,2,opt,name=pong,proto3,oneof"`
}

type SessionRequest_SessionStart_ struct {
    SessionStart *SessionRequest_SessionStart `protobuf:"bytes,3,opt,name=session_start,json=sessionStart,proto3,oneof"`
}

type SessionRequest_SessionStop_ struct {
    SessionStop *SessionRequest_SessionStop `protobuf:"bytes,4,opt,name=session_stop,json=sessionStop,proto3,oneof"`
}

type SessionRequest_Unsupported_5 struct {
    Unsupported_5 *Unsupported `protobuf:"bytes,5,opt,name=unsupported_5,json=unsupported5,proto3,oneof"`
}

type SessionRequest_Unsupported_6 struct {
    Unsupported_6 *Unsupported `protobuf:"bytes,6,opt,name=unsupported_6,json=unsupported6,proto3,oneof"`
}

type SessionRequest_AcquireSemaphore_ struct {
    AcquireSemaphore *SessionRequest_AcquireSemaphore `protobuf:"bytes,7,opt,name=acquire_semaphore,json=acquireSemaphore,proto3,oneof"`
}

type SessionRequest_ReleaseSemaphore_ struct {
    ReleaseSemaphore *SessionRequest_ReleaseSemaphore `protobuf:"bytes,8,opt,name=release_semaphore,json=releaseSemaphore,proto3,oneof"`
}

type SessionRequest_DescribeSemaphore_ struct {
    DescribeSemaphore *SessionRequest_DescribeSemaphore `protobuf:"bytes,9,opt,name=describe_semaphore,json=describeSemaphore,proto3,oneof"`
}

type SessionRequest_CreateSemaphore_ struct {
    CreateSemaphore *SessionRequest_CreateSemaphore `protobuf:"bytes,10,opt,name=create_semaphore,json=createSemaphore,proto3,oneof"`
}

type SessionRequest_UpdateSemaphore_ struct {
    UpdateSemaphore *SessionRequest_UpdateSemaphore `protobuf:"bytes,11,opt,name=update_semaphore,json=updateSemaphore,proto3,oneof"`
}

type SessionRequest_DeleteSemaphore_ struct {
    DeleteSemaphore *SessionRequest_DeleteSemaphore `protobuf:"bytes,12,opt,name=delete_semaphore,json=deleteSemaphore,proto3,oneof"`
}

type SessionRequest_Unsupported_13 struct {
    Unsupported_13 *Unsupported `protobuf:"bytes,13,opt,name=unsupported_13,json=unsupported13,proto3,oneof"`
}

type SessionRequest_Unsupported_14 struct {
    Unsupported_14 *Unsupported `protobuf:"bytes,14,opt,name=unsupported_14,json=unsupported14,proto3,oneof"`
}

type SessionRequest_Unsupported_15 struct {
    Unsupported_15 *Unsupported `protobuf:"bytes,15,opt,name=unsupported_15,json=unsupported15,proto3,oneof"`
}

func (*SessionRequest_Ping) isSessionRequest_Request() {}

func (*SessionRequest_Pong) isSessionRequest_Request() {}

func (*SessionRequest_SessionStart_) isSessionRequest_Request() {}

func (*SessionRequest_SessionStop_) isSessionRequest_Request() {}

func (*SessionRequest_Unsupported_5) isSessionRequest_Request() {}

func (*SessionRequest_Unsupported_6) isSessionRequest_Request() {}

func (*SessionRequest_AcquireSemaphore_) isSessionRequest_Request() {}

func (*SessionRequest_ReleaseSemaphore_) isSessionRequest_Request() {}

func (*SessionRequest_DescribeSemaphore_) isSessionRequest_Request() {}

func (*SessionRequest_CreateSemaphore_) isSessionRequest_Request() {}

func (*SessionRequest_UpdateSemaphore_) isSessionRequest_Request() {}

func (*SessionRequest_DeleteSemaphore_) isSessionRequest_Request() {}

func (*SessionRequest_Unsupported_13) isSessionRequest_Request() {}

func (*SessionRequest_Unsupported_14) isSessionRequest_Request() {}

func (*SessionRequest_Unsupported_15) isSessionRequest_Request() {}

// *
// Session response message sent from server to client
type SessionResponse struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    // Types that are assignable to Response:
    //
    //    *SessionResponse_Ping
    //    *SessionResponse_Pong
    //    *SessionResponse_Failure_
    //    *SessionResponse_SessionStarted_
    //    *SessionResponse_SessionStopped_
    //    *SessionResponse_Unsupported_6
    //    *SessionResponse_Unsupported_7
    //    *SessionResponse_AcquireSemaphorePending_
    //    *SessionResponse_AcquireSemaphoreResult_
    //    *SessionResponse_ReleaseSemaphoreResult_
    //    *SessionResponse_DescribeSemaphoreResult_
    //    *SessionResponse_DescribeSemaphoreChanged_
    //    *SessionResponse_CreateSemaphoreResult_
    //    *SessionResponse_UpdateSemaphoreResult_
    //    *SessionResponse_DeleteSemaphoreResult_
    //    *SessionResponse_Unsupported_16
    //    *SessionResponse_Unsupported_17
    //    *SessionResponse_Unsupported_18
    Response isSessionResponse_Response `protobuf_oneof:"response"`
}

func (x *SessionResponse) Reset() {
    *x = SessionResponse{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[6]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionResponse) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse) ProtoMessage() {}

func (x *SessionResponse) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[6]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionResponse.ProtoReflect.Descriptor instead.
func (*SessionResponse) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{6}
}

func (m *SessionResponse) GetResponse() isSessionResponse_Response {
    if m != nil {
        return m.Response
    }
    return nil
}

func (x *SessionResponse) GetPing() *SessionResponse_PingPong {
    if x, ok := x.GetResponse().(*SessionResponse_Ping); ok {
        return x.Ping
    }
    return nil
}

func (x *SessionResponse) GetPong() *SessionResponse_PingPong {
    if x, ok := x.GetResponse().(*SessionResponse_Pong); ok {
        return x.Pong
    }
    return nil
}

func (x *SessionResponse) GetFailure() *SessionResponse_Failure {
    if x, ok := x.GetResponse().(*SessionResponse_Failure_); ok {
        return x.Failure
    }
    return nil
}

func (x *SessionResponse) GetSessionStarted() *SessionResponse_SessionStarted {
    if x, ok := x.GetResponse().(*SessionResponse_SessionStarted_); ok {
        return x.SessionStarted
    }
    return nil
}

func (x *SessionResponse) GetSessionStopped() *SessionResponse_SessionStopped {
    if x, ok := x.GetResponse().(*SessionResponse_SessionStopped_); ok {
        return x.SessionStopped
    }
    return nil
}

func (x *SessionResponse) GetUnsupported_6() *Unsupported {
    if x, ok := x.GetResponse().(*SessionResponse_Unsupported_6); ok {
        return x.Unsupported_6
    }
    return nil
}

func (x *SessionResponse) GetUnsupported_7() *Unsupported {
    if x, ok := x.GetResponse().(*SessionResponse_Unsupported_7); ok {
        return x.Unsupported_7
    }
    return nil
}

func (x *SessionResponse) GetAcquireSemaphorePending() *SessionResponse_AcquireSemaphorePending {
    if x, ok := x.GetResponse().(*SessionResponse_AcquireSemaphorePending_); ok {
        return x.AcquireSemaphorePending
    }
    return nil
}

func (x *SessionResponse) GetAcquireSemaphoreResult() *SessionResponse_AcquireSemaphoreResult {
    if x, ok := x.GetResponse().(*SessionResponse_AcquireSemaphoreResult_); ok {
        return x.AcquireSemaphoreResult
    }
    return nil
}

func (x *SessionResponse) GetReleaseSemaphoreResult() *SessionResponse_ReleaseSemaphoreResult {
    if x, ok := x.GetResponse().(*SessionResponse_ReleaseSemaphoreResult_); ok {
        return x.ReleaseSemaphoreResult
    }
    return nil
}

func (x *SessionResponse) GetDescribeSemaphoreResult() *SessionResponse_DescribeSemaphoreResult {
    if x, ok := x.GetResponse().(*SessionResponse_DescribeSemaphoreResult_); ok {
        return x.DescribeSemaphoreResult
    }
    return nil
}

func (x *SessionResponse) GetDescribeSemaphoreChanged() *SessionResponse_DescribeSemaphoreChanged {
    if x, ok := x.GetResponse().(*SessionResponse_DescribeSemaphoreChanged_); ok {
        return x.DescribeSemaphoreChanged
    }
    return nil
}

func (x *SessionResponse) GetCreateSemaphoreResult() *SessionResponse_CreateSemaphoreResult {
    if x, ok := x.GetResponse().(*SessionResponse_CreateSemaphoreResult_); ok {
        return x.CreateSemaphoreResult
    }
    return nil
}

func (x *SessionResponse) GetUpdateSemaphoreResult() *SessionResponse_UpdateSemaphoreResult {
    if x, ok := x.GetResponse().(*SessionResponse_UpdateSemaphoreResult_); ok {
        return x.UpdateSemaphoreResult
    }
    return nil
}

func (x *SessionResponse) GetDeleteSemaphoreResult() *SessionResponse_DeleteSemaphoreResult {
    if x, ok := x.GetResponse().(*SessionResponse_DeleteSemaphoreResult_); ok {
        return x.DeleteSemaphoreResult
    }
    return nil
}

func (x *SessionResponse) GetUnsupported_16() *Unsupported {
    if x, ok := x.GetResponse().(*SessionResponse_Unsupported_16); ok {
        return x.Unsupported_16
    }
    return nil
}

func (x *SessionResponse) GetUnsupported_17() *Unsupported {
    if x, ok := x.GetResponse().(*SessionResponse_Unsupported_17); ok {
        return x.Unsupported_17
    }
    return nil
}

func (x *SessionResponse) GetUnsupported_18() *Unsupported {
    if x, ok := x.GetResponse().(*SessionResponse_Unsupported_18); ok {
        return x.Unsupported_18
    }
    return nil
}

type isSessionResponse_Response interface {
    isSessionResponse_Response()
}

type SessionResponse_Ping struct {
    Ping *SessionResponse_PingPong `protobuf:"bytes,1,opt,name=ping,proto3,oneof"`
}

type SessionResponse_Pong struct {
    Pong *SessionResponse_PingPong `protobuf:"bytes,2,opt,name=pong,proto3,oneof"`
}

type SessionResponse_Failure_ struct {
    Failure *SessionResponse_Failure `protobuf:"bytes,3,opt,name=failure,proto3,oneof"`
}

type SessionResponse_SessionStarted_ struct {
    SessionStarted *SessionResponse_SessionStarted `protobuf:"bytes,4,opt,name=session_started,json=sessionStarted,proto3,oneof"`
}

type SessionResponse_SessionStopped_ struct {
    SessionStopped *SessionResponse_SessionStopped `protobuf:"bytes,5,opt,name=session_stopped,json=sessionStopped,proto3,oneof"`
}

type SessionResponse_Unsupported_6 struct {
    Unsupported_6 *Unsupported `protobuf:"bytes,6,opt,name=unsupported_6,json=unsupported6,proto3,oneof"`
}

type SessionResponse_Unsupported_7 struct {
    Unsupported_7 *Unsupported `protobuf:"bytes,7,opt,name=unsupported_7,json=unsupported7,proto3,oneof"`
}

type SessionResponse_AcquireSemaphorePending_ struct {
    AcquireSemaphorePending *SessionResponse_AcquireSemaphorePending `protobuf:"bytes,8,opt,name=acquire_semaphore_pending,json=acquireSemaphorePending,proto3,oneof"`
}

type SessionResponse_AcquireSemaphoreResult_ struct {
    AcquireSemaphoreResult *SessionResponse_AcquireSemaphoreResult `protobuf:"bytes,9,opt,name=acquire_semaphore_result,json=acquireSemaphoreResult,proto3,oneof"`
}

type SessionResponse_ReleaseSemaphoreResult_ struct {
    ReleaseSemaphoreResult *SessionResponse_ReleaseSemaphoreResult `protobuf:"bytes,10,opt,name=release_semaphore_result,json=releaseSemaphoreResult,proto3,oneof"`
}

type SessionResponse_DescribeSemaphoreResult_ struct {
    DescribeSemaphoreResult *SessionResponse_DescribeSemaphoreResult `protobuf:"bytes,11,opt,name=describe_semaphore_result,json=describeSemaphoreResult,proto3,oneof"`
}

type SessionResponse_DescribeSemaphoreChanged_ struct {
    DescribeSemaphoreChanged *SessionResponse_DescribeSemaphoreChanged `protobuf:"bytes,12,opt,name=describe_semaphore_changed,json=describeSemaphoreChanged,proto3,oneof"`
}

type SessionResponse_CreateSemaphoreResult_ struct {
    CreateSemaphoreResult *SessionResponse_CreateSemaphoreResult `protobuf:"bytes,13,opt,name=create_semaphore_result,json=createSemaphoreResult,proto3,oneof"`
}

type SessionResponse_UpdateSemaphoreResult_ struct {
    UpdateSemaphoreResult *SessionResponse_UpdateSemaphoreResult `protobuf:"bytes,14,opt,name=update_semaphore_result,json=updateSemaphoreResult,proto3,oneof"`
}

type SessionResponse_DeleteSemaphoreResult_ struct {
    DeleteSemaphoreResult *SessionResponse_DeleteSemaphoreResult `protobuf:"bytes,15,opt,name=delete_semaphore_result,json=deleteSemaphoreResult,proto3,oneof"`
}

type SessionResponse_Unsupported_16 struct {
    Unsupported_16 *Unsupported `protobuf:"bytes,16,opt,name=unsupported_16,json=unsupported16,proto3,oneof"`
}

type SessionResponse_Unsupported_17 struct {
    Unsupported_17 *Unsupported `protobuf:"bytes,17,opt,name=unsupported_17,json=unsupported17,proto3,oneof"`
}

type SessionResponse_Unsupported_18 struct {
    Unsupported_18 *Unsupported `protobuf:"bytes,18,opt,name=unsupported_18,json=unsupported18,proto3,oneof"`
}

func (*SessionResponse_Ping) isSessionResponse_Response() {}

func (*SessionResponse_Pong) isSessionResponse_Response() {}

func (*SessionResponse_Failure_) isSessionResponse_Response() {}

func (*SessionResponse_SessionStarted_) isSessionResponse_Response() {}

func (*SessionResponse_SessionStopped_) isSessionResponse_Response() {}

func (*SessionResponse_Unsupported_6) isSessionResponse_Response() {}

func (*SessionResponse_Unsupported_7) isSessionResponse_Response() {}

func (*SessionResponse_AcquireSemaphorePending_) isSessionResponse_Response() {}

func (*SessionResponse_AcquireSemaphoreResult_) isSessionResponse_Response() {}

func (*SessionResponse_ReleaseSemaphoreResult_) isSessionResponse_Response() {}

func (*SessionResponse_DescribeSemaphoreResult_) isSessionResponse_Response() {}

func (*SessionResponse_DescribeSemaphoreChanged_) isSessionResponse_Response() {}

func (*SessionResponse_CreateSemaphoreResult_) isSessionResponse_Response() {}

func (*SessionResponse_UpdateSemaphoreResult_) isSessionResponse_Response() {}

func (*SessionResponse_DeleteSemaphoreResult_) isSessionResponse_Response() {}

func (*SessionResponse_Unsupported_16) isSessionResponse_Response() {}

func (*SessionResponse_Unsupported_17) isSessionResponse_Response() {}

func (*SessionResponse_Unsupported_18) isSessionResponse_Response() {}

type CreateNodeRequest struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    Path            string                          `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
    Config          *Config                         `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
    OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,3,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
}

func (x *CreateNodeRequest) Reset() {
    *x = CreateNodeRequest{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[7]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *CreateNodeRequest) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeRequest) ProtoMessage() {}

func (x *CreateNodeRequest) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[7]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateNodeRequest) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{7}
}

func (x *CreateNodeRequest) GetPath() string {
    if x != nil {
        return x.Path
    }
    return ""
}

func (x *CreateNodeRequest) GetConfig() *Config {
    if x != nil {
        return x.Config
    }
    return nil
}

func (x *CreateNodeRequest) GetOperationParams() *Ydb_Operations.OperationParams {
    if x != nil {
        return x.OperationParams
    }
    return nil
}

type CreateNodeResponse struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *CreateNodeResponse) Reset() {
    *x = CreateNodeResponse{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[8]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *CreateNodeResponse) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeResponse) ProtoMessage() {}

func (x *CreateNodeResponse) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[8]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeResponse.ProtoReflect.Descriptor instead.
func (*CreateNodeResponse) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{8}
}

func (x *CreateNodeResponse) GetOperation() *Ydb_Operations.Operation {
    if x != nil {
        return x.Operation
    }
    return nil
}

type AlterNodeRequest struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    Path            string                          `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
    Config          *Config                         `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
    OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,3,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
}

func (x *AlterNodeRequest) Reset() {
    *x = AlterNodeRequest{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[9]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *AlterNodeRequest) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*AlterNodeRequest) ProtoMessage() {}

func (x *AlterNodeRequest) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[9]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use AlterNodeRequest.ProtoReflect.Descriptor instead.
func (*AlterNodeRequest) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{9}
}

func (x *AlterNodeRequest) GetPath() string {
    if x != nil {
        return x.Path
    }
    return ""
}

func (x *AlterNodeRequest) GetConfig() *Config {
    if x != nil {
        return x.Config
    }
    return nil
}

func (x *AlterNodeRequest) GetOperationParams() *Ydb_Operations.OperationParams {
    if x != nil {
        return x.OperationParams
    }
    return nil
}

type AlterNodeResponse struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *AlterNodeResponse) Reset() {
    *x = AlterNodeResponse{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[10]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *AlterNodeResponse) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*AlterNodeResponse) ProtoMessage() {}

func (x *AlterNodeResponse) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[10]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use AlterNodeResponse.ProtoReflect.Descriptor instead.
func (*AlterNodeResponse) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{10}
}

func (x *AlterNodeResponse) GetOperation() *Ydb_Operations.Operation {
    if x != nil {
        return x.Operation
    }
    return nil
}

type DropNodeRequest struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    Path            string                          `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
    OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,2,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
}

func (x *DropNodeRequest) Reset() {
    *x = DropNodeRequest{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[11]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *DropNodeRequest) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*DropNodeRequest) ProtoMessage() {}

func (x *DropNodeRequest) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[11]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use DropNodeRequest.ProtoReflect.Descriptor instead.
func (*DropNodeRequest) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{11}
}

func (x *DropNodeRequest) GetPath() string {
    if x != nil {
        return x.Path
    }
    return ""
}

func (x *DropNodeRequest) GetOperationParams() *Ydb_Operations.OperationParams {
    if x != nil {
        return x.OperationParams
    }
    return nil
}

type DropNodeResponse struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *DropNodeResponse) Reset() {
    *x = DropNodeResponse{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[12]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *DropNodeResponse) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*DropNodeResponse) ProtoMessage() {}

func (x *DropNodeResponse) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[12]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use DropNodeResponse.ProtoReflect.Descriptor instead.
func (*DropNodeResponse) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{12}
}

func (x *DropNodeResponse) GetOperation() *Ydb_Operations.Operation {
    if x != nil {
        return x.Operation
    }
    return nil
}

type DescribeNodeRequest struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    Path            string                          `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
    OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,2,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
}

func (x *DescribeNodeRequest) Reset() {
    *x = DescribeNodeRequest{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[13]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *DescribeNodeRequest) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*DescribeNodeRequest) ProtoMessage() {}

func (x *DescribeNodeRequest) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[13]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use DescribeNodeRequest.ProtoReflect.Descriptor instead.
func (*DescribeNodeRequest) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{13}
}

func (x *DescribeNodeRequest) GetPath() string {
    if x != nil {
        return x.Path
    }
    return ""
}

func (x *DescribeNodeRequest) GetOperationParams() *Ydb_Operations.OperationParams {
    if x != nil {
        return x.OperationParams
    }
    return nil
}

type DescribeNodeResponse struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *DescribeNodeResponse) Reset() {
    *x = DescribeNodeResponse{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[14]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *DescribeNodeResponse) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*DescribeNodeResponse) ProtoMessage() {}

func (x *DescribeNodeResponse) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[14]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use DescribeNodeResponse.ProtoReflect.Descriptor instead.
func (*DescribeNodeResponse) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{14}
}

func (x *DescribeNodeResponse) GetOperation() *Ydb_Operations.Operation {
    if x != nil {
        return x.Operation
    }
    return nil
}

type DescribeNodeResult struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    Self   *Ydb_Scheme.Entry `protobuf:"bytes,1,opt,name=self,proto3" json:"self,omitempty"`
    Config *Config           `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *DescribeNodeResult) Reset() {
    *x = DescribeNodeResult{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[15]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *DescribeNodeResult) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*DescribeNodeResult) ProtoMessage() {}

func (x *DescribeNodeResult) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[15]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use DescribeNodeResult.ProtoReflect.Descriptor instead.
func (*DescribeNodeResult) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{15}
}

func (x *DescribeNodeResult) GetSelf() *Ydb_Scheme.Entry {
    if x != nil {
        return x.Self
    }
    return nil
}

func (x *DescribeNodeResult) GetConfig() *Config {
    if x != nil {
        return x.Config
    }
    return nil
}

// *
// Used for checking liveness of the connection
type SessionRequest_PingPong struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    // Opaque number specified in the ping message is echoed in the pong message
    Opaque uint64 `protobuf:"varint,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *SessionRequest_PingPong) Reset() {
    *x = SessionRequest_PingPong{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[16]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionRequest_PingPong) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest_PingPong) ProtoMessage() {}

func (x *SessionRequest_PingPong) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[16]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionRequest_PingPong.ProtoReflect.Descriptor instead.
func (*SessionRequest_PingPong) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{5, 0}
}

func (x *SessionRequest_PingPong) GetOpaque() uint64 {
    if x != nil {
        return x.Opaque
    }
    return 0
}

// *
// First message used to start/restore a session
type SessionRequest_SessionStart struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    // Path to a coordination node
    Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
    // Non-zero when restoring a session, 0 when creating a new session
    SessionId uint64 `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
    // Timeout in milliseconds during which client may restore a detached session
    TimeoutMillis uint64 `protobuf:"varint,3,opt,name=timeout_millis,json=timeoutMillis,proto3" json:"timeout_millis,omitempty"`
    // User-defined description that may be used to describe the client
    Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
    // Monotonically increasing sequence number generated by the client
    // When concurrent SessionStart requests are detected the one with
    // the biggest sequence number will succeed
    SeqNo uint64 `protobuf:"varint,5,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
    // Random bytes used to protect session from restore by other clients (max. 16 bytes)
    ProtectionKey []byte `protobuf:"bytes,6,opt,name=protection_key,json=protectionKey,proto3" json:"protection_key,omitempty"`
}

func (x *SessionRequest_SessionStart) Reset() {
    *x = SessionRequest_SessionStart{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[17]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionRequest_SessionStart) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest_SessionStart) ProtoMessage() {}

func (x *SessionRequest_SessionStart) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[17]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionRequest_SessionStart.ProtoReflect.Descriptor instead.
func (*SessionRequest_SessionStart) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{5, 1}
}

func (x *SessionRequest_SessionStart) GetPath() string {
    if x != nil {
        return x.Path
    }
    return ""
}

func (x *SessionRequest_SessionStart) GetSessionId() uint64 {
    if x != nil {
        return x.SessionId
    }
    return 0
}

func (x *SessionRequest_SessionStart) GetTimeoutMillis() uint64 {
    if x != nil {
        return x.TimeoutMillis
    }
    return 0
}

func (x *SessionRequest_SessionStart) GetDescription() string {
    if x != nil {
        return x.Description
    }
    return ""
}

func (x *SessionRequest_SessionStart) GetSeqNo() uint64 {
    if x != nil {
        return x.SeqNo
    }
    return 0
}

func (x *SessionRequest_SessionStart) GetProtectionKey() []byte {
    if x != nil {
        return x.ProtectionKey
    }
    return nil
}

// *
// Last message used to cleanly stop session before its timeout expires
type SessionRequest_SessionStop struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields
}

func (x *SessionRequest_SessionStop) Reset() {
    *x = SessionRequest_SessionStop{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[18]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionRequest_SessionStop) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest_SessionStop) ProtoMessage() {}

func (x *SessionRequest_SessionStop) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[18]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionRequest_SessionStop.ProtoReflect.Descriptor instead.
func (*SessionRequest_SessionStop) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{5, 2}
}

// *
// Used to acquire a semaphore
//
// WARNING: a single session cannot acquire the same semaphore multiple times
//
// Later requests override previous operations with the same semaphore,
// e.g. to reduce acquired count, change timeout or attached data.
type SessionRequest_AcquireSemaphore struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    // Client-defined request id, echoed in the response
    ReqId uint64 `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
    // Name of the semaphore to acquire
    Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
    // Timeout in milliseconds after which operation will fail
    // if it's still waiting in the waiters queue
    TimeoutMillis uint64 `protobuf:"varint,3,opt,name=timeout_millis,json=timeoutMillis,proto3" json:"timeout_millis,omitempty"`
    // Number of tokens to acquire on the semaphore
    Count uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
    // User-defined binary data that may be attached to the operation
    Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
    // Ephemeral semaphores are created with the first acquire operation
    // and automatically deleted with the last release operation
    Ephemeral bool `protobuf:"varint,6,opt,name=ephemeral,proto3" json:"ephemeral,omitempty"`
}

func (x *SessionRequest_AcquireSemaphore) Reset() {
    *x = SessionRequest_AcquireSemaphore{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[19]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionRequest_AcquireSemaphore) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest_AcquireSemaphore) ProtoMessage() {}

func (x *SessionRequest_AcquireSemaphore) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[19]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionRequest_AcquireSemaphore.ProtoReflect.Descriptor instead.
func (*SessionRequest_AcquireSemaphore) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{5, 3}
}

func (x *SessionRequest_AcquireSemaphore) GetReqId() uint64 {
    if x != nil {
        return x.ReqId
    }
    return 0
}

func (x *SessionRequest_AcquireSemaphore) GetName() string {
    if x != nil {
        return x.Name
    }
    return ""
}

func (x *SessionRequest_AcquireSemaphore) GetTimeoutMillis() uint64 {
    if x != nil {
        return x.TimeoutMillis
    }
    return 0
}

func (x *SessionRequest_AcquireSemaphore) GetCount() uint64 {
    if x != nil {
        return x.Count
    }
    return 0
}

func (x *SessionRequest_AcquireSemaphore) GetData() []byte {
    if x != nil {
        return x.Data
    }
    return nil
}

func (x *SessionRequest_AcquireSemaphore) GetEphemeral() bool {
    if x != nil {
        return x.Ephemeral
    }
    return false
}

// *
// Used to release a semaphore
//
// WARNING: a single session cannot release the same semaphore multiple times
//
// The release operation will either remove current session from waiters
// queue or release an already owned semaphore.
type SessionRequest_ReleaseSemaphore struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    // Client-defined request id, echoed in the response
    ReqId uint64 `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
    // Name of the semaphore to release
    Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SessionRequest_ReleaseSemaphore) Reset() {
    *x = SessionRequest_ReleaseSemaphore{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[20]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionRequest_ReleaseSemaphore) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest_ReleaseSemaphore) ProtoMessage() {}

func (x *SessionRequest_ReleaseSemaphore) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[20]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionRequest_ReleaseSemaphore.ProtoReflect.Descriptor instead.
func (*SessionRequest_ReleaseSemaphore) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{5, 4}
}

func (x *SessionRequest_ReleaseSemaphore) GetReqId() uint64 {
    if x != nil {
        return x.ReqId
    }
    return 0
}

func (x *SessionRequest_ReleaseSemaphore) GetName() string {
    if x != nil {
        return x.Name
    }
    return ""
}

// *
// Used to describe semaphores and watch them for changes
//
// WARNING: a describe operation will cancel previous watches on the same semaphore
type SessionRequest_DescribeSemaphore struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    // Client-defined request id, echoed in the response
    ReqId uint64 `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
    // Name of the semaphore to describe
    Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
    // Response will include owners list if true
    IncludeOwners bool `protobuf:"varint,3,opt,name=include_owners,json=includeOwners,proto3" json:"include_owners,omitempty"`
    // Response will include waiters list if true
    IncludeWaiters bool `protobuf:"varint,4,opt,name=include_waiters,json=includeWaiters,proto3" json:"include_waiters,omitempty"`
    // Watch for changes in semaphore data
    WatchData bool `protobuf:"varint,5,opt,name=watch_data,json=watchData,proto3" json:"watch_data,omitempty"`
    // Watch for changes in semaphore owners (including owners data)
    WatchOwners bool `protobuf:"varint,6,opt,name=watch_owners,json=watchOwners,proto3" json:"watch_owners,omitempty"`
}

func (x *SessionRequest_DescribeSemaphore) Reset() {
    *x = SessionRequest_DescribeSemaphore{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[21]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionRequest_DescribeSemaphore) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest_DescribeSemaphore) ProtoMessage() {}

func (x *SessionRequest_DescribeSemaphore) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[21]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionRequest_DescribeSemaphore.ProtoReflect.Descriptor instead.
func (*SessionRequest_DescribeSemaphore) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{5, 5}
}

func (x *SessionRequest_DescribeSemaphore) GetReqId() uint64 {
    if x != nil {
        return x.ReqId
    }
    return 0
}

func (x *SessionRequest_DescribeSemaphore) GetName() string {
    if x != nil {
        return x.Name
    }
    return ""
}

func (x *SessionRequest_DescribeSemaphore) GetIncludeOwners() bool {
    if x != nil {
        return x.IncludeOwners
    }
    return false
}

func (x *SessionRequest_DescribeSemaphore) GetIncludeWaiters() bool {
    if x != nil {
        return x.IncludeWaiters
    }
    return false
}

func (x *SessionRequest_DescribeSemaphore) GetWatchData() bool {
    if x != nil {
        return x.WatchData
    }
    return false
}

func (x *SessionRequest_DescribeSemaphore) GetWatchOwners() bool {
    if x != nil {
        return x.WatchOwners
    }
    return false
}

// *
// Used to create a new semaphore
type SessionRequest_CreateSemaphore struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    // Client-defined request id, echoed in the response
    ReqId uint64 `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
    // Name of the semaphore to create
    Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
    // Number of tokens that may be acquired by sessions
    Limit uint64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
    // User-defined data that is attached to the semaphore
    Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SessionRequest_CreateSemaphore) Reset() {
    *x = SessionRequest_CreateSemaphore{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[22]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionRequest_CreateSemaphore) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest_CreateSemaphore) ProtoMessage() {}

func (x *SessionRequest_CreateSemaphore) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[22]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionRequest_CreateSemaphore.ProtoReflect.Descriptor instead.
func (*SessionRequest_CreateSemaphore) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{5, 6}
}

func (x *SessionRequest_CreateSemaphore) GetReqId() uint64 {
    if x != nil {
        return x.ReqId
    }
    return 0
}

func (x *SessionRequest_CreateSemaphore) GetName() string {
    if x != nil {
        return x.Name
    }
    return ""
}

func (x *SessionRequest_CreateSemaphore) GetLimit() uint64 {
    if x != nil {
        return x.Limit
    }
    return 0
}

func (x *SessionRequest_CreateSemaphore) GetData() []byte {
    if x != nil {
        return x.Data
    }
    return nil
}

// *
// Used to change semaphore data
type SessionRequest_UpdateSemaphore struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    // Client-defined request id, echoed in the response
    ReqId uint64 `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
    // Name of the semaphore to update
    Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
    // User-defined data that is attached to the semaphore
    Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SessionRequest_UpdateSemaphore) Reset() {
    *x = SessionRequest_UpdateSemaphore{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[23]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionRequest_UpdateSemaphore) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest_UpdateSemaphore) ProtoMessage() {}

func (x *SessionRequest_UpdateSemaphore) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[23]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionRequest_UpdateSemaphore.ProtoReflect.Descriptor instead.
func (*SessionRequest_UpdateSemaphore) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{5, 7}
}

func (x *SessionRequest_UpdateSemaphore) GetReqId() uint64 {
    if x != nil {
        return x.ReqId
    }
    return 0
}

func (x *SessionRequest_UpdateSemaphore) GetName() string {
    if x != nil {
        return x.Name
    }
    return ""
}

func (x *SessionRequest_UpdateSemaphore) GetData() []byte {
    if x != nil {
        return x.Data
    }
    return nil
}

// *
// Used to delete an existing semaphore
type SessionRequest_DeleteSemaphore struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    // Client-defined request id, echoed in the response
    ReqId uint64 `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
    // Name of the semaphore to delete
    Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
    // Will delete semaphore even if currently acquired by sessions
    Force bool `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *SessionRequest_DeleteSemaphore) Reset() {
    *x = SessionRequest_DeleteSemaphore{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[24]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionRequest_DeleteSemaphore) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest_DeleteSemaphore) ProtoMessage() {}

func (x *SessionRequest_DeleteSemaphore) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[24]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionRequest_DeleteSemaphore.ProtoReflect.Descriptor instead.
func (*SessionRequest_DeleteSemaphore) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{5, 8}
}

func (x *SessionRequest_DeleteSemaphore) GetReqId() uint64 {
    if x != nil {
        return x.ReqId
    }
    return 0
}

func (x *SessionRequest_DeleteSemaphore) GetName() string {
    if x != nil {
        return x.Name
    }
    return ""
}

func (x *SessionRequest_DeleteSemaphore) GetForce() bool {
    if x != nil {
        return x.Force
    }
    return false
}

// *
// Used for checking liveness of the connection
type SessionResponse_PingPong struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    // Opaque number specified in the ping message is echoed in the pong message
    Opaque uint64 `protobuf:"varint,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *SessionResponse_PingPong) Reset() {
    *x = SessionResponse_PingPong{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[25]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionResponse_PingPong) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_PingPong) ProtoMessage() {}

func (x *SessionResponse_PingPong) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[25]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionResponse_PingPong.ProtoReflect.Descriptor instead.
func (*SessionResponse_PingPong) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SessionResponse_PingPong) GetOpaque() uint64 {
    if x != nil {
        return x.Opaque
    }
    return 0
}

// *
// Used to report connection and session level failures
type SessionResponse_Failure struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    Status Ydb.StatusIds_StatusCode  `protobuf:"varint,1,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
    Issues []*Ydb_Issue.IssueMessage `protobuf:"bytes,2,rep,name=issues,proto3" json:"issues,omitempty"`
}

func (x *SessionResponse_Failure) Reset() {
    *x = SessionResponse_Failure{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[26]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionResponse_Failure) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_Failure) ProtoMessage() {}

func (x *SessionResponse_Failure) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[26]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionResponse_Failure.ProtoReflect.Descriptor instead.
func (*SessionResponse_Failure) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{6, 1}
}

func (x *SessionResponse_Failure) GetStatus() Ydb.StatusIds_StatusCode {
    if x != nil {
        return x.Status
    }
    return Ydb.StatusIds_StatusCode(0)
}

func (x *SessionResponse_Failure) GetIssues() []*Ydb_Issue.IssueMessage {
    if x != nil {
        return x.Issues
    }
    return nil
}

// *
// Used to report a successful session create/restore operation
type SessionResponse_SessionStarted struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    // A server generation id that may be used for restoring the session
    SessionId uint64 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
    // Timeout in milliseconds that will be used by the server
    TimeoutMillis uint64 `protobuf:"varint,2,opt,name=timeout_millis,json=timeoutMillis,proto3" json:"timeout_millis,omitempty"`
}

func (x *SessionResponse_SessionStarted) Reset() {
    *x = SessionResponse_SessionStarted{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[27]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionResponse_SessionStarted) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_SessionStarted) ProtoMessage() {}

func (x *SessionResponse_SessionStarted) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[27]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionResponse_SessionStarted.ProtoReflect.Descriptor instead.
func (*SessionResponse_SessionStarted) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{6, 2}
}

func (x *SessionResponse_SessionStarted) GetSessionId() uint64 {
    if x != nil {
        return x.SessionId
    }
    return 0
}

func (x *SessionResponse_SessionStarted) GetTimeoutMillis() uint64 {
    if x != nil {
        return x.TimeoutMillis
    }
    return 0
}

// *
// Used to report a successful graceful termination of the session
type SessionResponse_SessionStopped struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    SessionId uint64 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *SessionResponse_SessionStopped) Reset() {
    *x = SessionResponse_SessionStopped{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[28]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionResponse_SessionStopped) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_SessionStopped) ProtoMessage() {}

func (x *SessionResponse_SessionStopped) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[28]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionResponse_SessionStopped.ProtoReflect.Descriptor instead.
func (*SessionResponse_SessionStopped) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{6, 3}
}

func (x *SessionResponse_SessionStopped) GetSessionId() uint64 {
    if x != nil {
        return x.SessionId
    }
    return 0
}

// *
// Used by the server to report when an acquire operation is added to the waiters queue
type SessionResponse_AcquireSemaphorePending struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    ReqId uint64 `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (x *SessionResponse_AcquireSemaphorePending) Reset() {
    *x = SessionResponse_AcquireSemaphorePending{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[29]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionResponse_AcquireSemaphorePending) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_AcquireSemaphorePending) ProtoMessage() {}

func (x *SessionResponse_AcquireSemaphorePending) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[29]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionResponse_AcquireSemaphorePending.ProtoReflect.Descriptor instead.
func (*SessionResponse_AcquireSemaphorePending) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{6, 4}
}

func (x *SessionResponse_AcquireSemaphorePending) GetReqId() uint64 {
    if x != nil {
        return x.ReqId
    }
    return 0
}

// *
// Used by the server to report the result of an acquire operation
type SessionResponse_AcquireSemaphoreResult struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    ReqId  uint64                    `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
    Status Ydb.StatusIds_StatusCode  `protobuf:"varint,2,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
    Issues []*Ydb_Issue.IssueMessage `protobuf:"bytes,3,rep,name=issues,proto3" json:"issues,omitempty"`
    // True if semaphore was acquired, false if acquire timed out
    Acquired bool `protobuf:"varint,4,opt,name=acquired,proto3" json:"acquired,omitempty"`
}

func (x *SessionResponse_AcquireSemaphoreResult) Reset() {
    *x = SessionResponse_AcquireSemaphoreResult{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[30]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionResponse_AcquireSemaphoreResult) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_AcquireSemaphoreResult) ProtoMessage() {}

func (x *SessionResponse_AcquireSemaphoreResult) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[30]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionResponse_AcquireSemaphoreResult.ProtoReflect.Descriptor instead.
func (*SessionResponse_AcquireSemaphoreResult) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{6, 5}
}

func (x *SessionResponse_AcquireSemaphoreResult) GetReqId() uint64 {
    if x != nil {
        return x.ReqId
    }
    return 0
}

func (x *SessionResponse_AcquireSemaphoreResult) GetStatus() Ydb.StatusIds_StatusCode {
    if x != nil {
        return x.Status
    }
    return Ydb.StatusIds_StatusCode(0)
}

func (x *SessionResponse_AcquireSemaphoreResult) GetIssues() []*Ydb_Issue.IssueMessage {
    if x != nil {
        return x.Issues
    }
    return nil
}

func (x *SessionResponse_AcquireSemaphoreResult) GetAcquired() bool {
    if x != nil {
        return x.Acquired
    }
    return false
}

// *
// Used by the server to report the result of a release operation
type SessionResponse_ReleaseSemaphoreResult struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    ReqId  uint64                    `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
    Status Ydb.StatusIds_StatusCode  `protobuf:"varint,2,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
    Issues []*Ydb_Issue.IssueMessage `protobuf:"bytes,3,rep,name=issues,proto3" json:"issues,omitempty"`
    // True if semaphore was released, false if there was no active acquire operation
    Released bool `protobuf:"varint,4,opt,name=released,proto3" json:"released,omitempty"`
}

func (x *SessionResponse_ReleaseSemaphoreResult) Reset() {
    *x = SessionResponse_ReleaseSemaphoreResult{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[31]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionResponse_ReleaseSemaphoreResult) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_ReleaseSemaphoreResult) ProtoMessage() {}

func (x *SessionResponse_ReleaseSemaphoreResult) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[31]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionResponse_ReleaseSemaphoreResult.ProtoReflect.Descriptor instead.
func (*SessionResponse_ReleaseSemaphoreResult) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{6, 6}
}

func (x *SessionResponse_ReleaseSemaphoreResult) GetReqId() uint64 {
    if x != nil {
        return x.ReqId
    }
    return 0
}

func (x *SessionResponse_ReleaseSemaphoreResult) GetStatus() Ydb.StatusIds_StatusCode {
    if x != nil {
        return x.Status
    }
    return Ydb.StatusIds_StatusCode(0)
}

func (x *SessionResponse_ReleaseSemaphoreResult) GetIssues() []*Ydb_Issue.IssueMessage {
    if x != nil {
        return x.Issues
    }
    return nil
}

func (x *SessionResponse_ReleaseSemaphoreResult) GetReleased() bool {
    if x != nil {
        return x.Released
    }
    return false
}

// *
// The result of the describe operation
type SessionResponse_DescribeSemaphoreResult struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    ReqId                uint64                    `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
    Status               Ydb.StatusIds_StatusCode  `protobuf:"varint,2,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
    Issues               []*Ydb_Issue.IssueMessage `protobuf:"bytes,3,rep,name=issues,proto3" json:"issues,omitempty"`
    SemaphoreDescription *SemaphoreDescription     `protobuf:"bytes,4,opt,name=semaphore_description,json=semaphoreDescription,proto3" json:"semaphore_description,omitempty"`
    // True if a watch has been added for the semaphore
    WatchAdded bool `protobuf:"varint,5,opt,name=watch_added,json=watchAdded,proto3" json:"watch_added,omitempty"`
}

func (x *SessionResponse_DescribeSemaphoreResult) Reset() {
    *x = SessionResponse_DescribeSemaphoreResult{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[32]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionResponse_DescribeSemaphoreResult) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_DescribeSemaphoreResult) ProtoMessage() {}

func (x *SessionResponse_DescribeSemaphoreResult) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[32]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionResponse_DescribeSemaphoreResult.ProtoReflect.Descriptor instead.
func (*SessionResponse_DescribeSemaphoreResult) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{6, 7}
}

func (x *SessionResponse_DescribeSemaphoreResult) GetReqId() uint64 {
    if x != nil {
        return x.ReqId
    }
    return 0
}

func (x *SessionResponse_DescribeSemaphoreResult) GetStatus() Ydb.StatusIds_StatusCode {
    if x != nil {
        return x.Status
    }
    return Ydb.StatusIds_StatusCode(0)
}

func (x *SessionResponse_DescribeSemaphoreResult) GetIssues() []*Ydb_Issue.IssueMessage {
    if x != nil {
        return x.Issues
    }
    return nil
}

func (x *SessionResponse_DescribeSemaphoreResult) GetSemaphoreDescription() *SemaphoreDescription {
    if x != nil {
        return x.SemaphoreDescription
    }
    return nil
}

func (x *SessionResponse_DescribeSemaphoreResult) GetWatchAdded() bool {
    if x != nil {
        return x.WatchAdded
    }
    return false
}

// *
// Used to report a change in the watched semaphore
type SessionResponse_DescribeSemaphoreChanged struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    ReqId         uint64 `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
    DataChanged   bool   `protobuf:"varint,2,opt,name=data_changed,json=dataChanged,proto3" json:"data_changed,omitempty"`
    OwnersChanged bool   `protobuf:"varint,3,opt,name=owners_changed,json=ownersChanged,proto3" json:"owners_changed,omitempty"`
}

func (x *SessionResponse_DescribeSemaphoreChanged) Reset() {
    *x = SessionResponse_DescribeSemaphoreChanged{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[33]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionResponse_DescribeSemaphoreChanged) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_DescribeSemaphoreChanged) ProtoMessage() {}

func (x *SessionResponse_DescribeSemaphoreChanged) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[33]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionResponse_DescribeSemaphoreChanged.ProtoReflect.Descriptor instead.
func (*SessionResponse_DescribeSemaphoreChanged) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{6, 8}
}

func (x *SessionResponse_DescribeSemaphoreChanged) GetReqId() uint64 {
    if x != nil {
        return x.ReqId
    }
    return 0
}

func (x *SessionResponse_DescribeSemaphoreChanged) GetDataChanged() bool {
    if x != nil {
        return x.DataChanged
    }
    return false
}

func (x *SessionResponse_DescribeSemaphoreChanged) GetOwnersChanged() bool {
    if x != nil {
        return x.OwnersChanged
    }
    return false
}

// *
// The result of semaphore creation
type SessionResponse_CreateSemaphoreResult struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    ReqId  uint64                    `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
    Status Ydb.StatusIds_StatusCode  `protobuf:"varint,2,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
    Issues []*Ydb_Issue.IssueMessage `protobuf:"bytes,3,rep,name=issues,proto3" json:"issues,omitempty"`
}

func (x *SessionResponse_CreateSemaphoreResult) Reset() {
    *x = SessionResponse_CreateSemaphoreResult{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[34]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionResponse_CreateSemaphoreResult) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_CreateSemaphoreResult) ProtoMessage() {}

func (x *SessionResponse_CreateSemaphoreResult) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[34]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionResponse_CreateSemaphoreResult.ProtoReflect.Descriptor instead.
func (*SessionResponse_CreateSemaphoreResult) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{6, 9}
}

func (x *SessionResponse_CreateSemaphoreResult) GetReqId() uint64 {
    if x != nil {
        return x.ReqId
    }
    return 0
}

func (x *SessionResponse_CreateSemaphoreResult) GetStatus() Ydb.StatusIds_StatusCode {
    if x != nil {
        return x.Status
    }
    return Ydb.StatusIds_StatusCode(0)
}

func (x *SessionResponse_CreateSemaphoreResult) GetIssues() []*Ydb_Issue.IssueMessage {
    if x != nil {
        return x.Issues
    }
    return nil
}

// *
// The result of semaphore update
type SessionResponse_UpdateSemaphoreResult struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    ReqId  uint64                    `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
    Status Ydb.StatusIds_StatusCode  `protobuf:"varint,2,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
    Issues []*Ydb_Issue.IssueMessage `protobuf:"bytes,3,rep,name=issues,proto3" json:"issues,omitempty"`
}

func (x *SessionResponse_UpdateSemaphoreResult) Reset() {
    *x = SessionResponse_UpdateSemaphoreResult{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[35]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionResponse_UpdateSemaphoreResult) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_UpdateSemaphoreResult) ProtoMessage() {}

func (x *SessionResponse_UpdateSemaphoreResult) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[35]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionResponse_UpdateSemaphoreResult.ProtoReflect.Descriptor instead.
func (*SessionResponse_UpdateSemaphoreResult) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{6, 10}
}

func (x *SessionResponse_UpdateSemaphoreResult) GetReqId() uint64 {
    if x != nil {
        return x.ReqId
    }
    return 0
}

func (x *SessionResponse_UpdateSemaphoreResult) GetStatus() Ydb.StatusIds_StatusCode {
    if x != nil {
        return x.Status
    }
    return Ydb.StatusIds_StatusCode(0)
}

func (x *SessionResponse_UpdateSemaphoreResult) GetIssues() []*Ydb_Issue.IssueMessage {
    if x != nil {
        return x.Issues
    }
    return nil
}

// *
// The result of semaphore deletion
type SessionResponse_DeleteSemaphoreResult struct {
    state         protoimpl.MessageState
    sizeCache     protoimpl.SizeCache
    unknownFields protoimpl.UnknownFields

    ReqId  uint64                    `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
    Status Ydb.StatusIds_StatusCode  `protobuf:"varint,2,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
    Issues []*Ydb_Issue.IssueMessage `protobuf:"bytes,3,rep,name=issues,proto3" json:"issues,omitempty"`
}

func (x *SessionResponse_DeleteSemaphoreResult) Reset() {
    *x = SessionResponse_DeleteSemaphoreResult{}
    if protoimpl.UnsafeEnabled {
        mi := &file_protos_ydb_coordination_proto_msgTypes[36]
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        ms.StoreMessageInfo(mi)
    }
}

func (x *SessionResponse_DeleteSemaphoreResult) String() string {
    return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse_DeleteSemaphoreResult) ProtoMessage() {}

func (x *SessionResponse_DeleteSemaphoreResult) ProtoReflect() protoreflect.Message {
    mi := &file_protos_ydb_coordination_proto_msgTypes[36]
    if protoimpl.UnsafeEnabled && x != nil {
        ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
        if ms.LoadMessageInfo() == nil {
            ms.StoreMessageInfo(mi)
        }
        return ms
    }
    return mi.MessageOf(x)
}

// Deprecated: Use SessionResponse_DeleteSemaphoreResult.ProtoReflect.Descriptor instead.
func (*SessionResponse_DeleteSemaphoreResult) Descriptor() ([]byte, []int) {
    return file_protos_ydb_coordination_proto_rawDescGZIP(), []int{6, 11}
}

func (x *SessionResponse_DeleteSemaphoreResult) GetReqId() uint64 {
    if x != nil {
        return x.ReqId
    }
    return 0
}

func (x *SessionResponse_DeleteSemaphoreResult) GetStatus() Ydb.StatusIds_StatusCode {
    if x != nil {
        return x.Status
    }
    return Ydb.StatusIds_StatusCode(0)
}

func (x *SessionResponse_DeleteSemaphoreResult) GetIssues() []*Ydb_Issue.IssueMessage {
    if x != nil {
        return x.Issues
    }
    return nil
}

var File_protos_ydb_coordination_proto protoreflect.FileDescriptor

var file_protos_ydb_coordination_proto_rawDesc = []byte{
    0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x79, 0x64, 0x62, 0x5f, 0x63, 0x6f, 0x6f,
    0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
    0x10, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
    0x6e, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x79, 0x64, 0x62, 0x5f, 0x6f, 0x70,
    0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x79, 0x64, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
    0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x79, 0x64, 0x62, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x6d,
    0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x79, 0x64, 0x62, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e,
    0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0d, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f,
    0x72, 0x74, 0x65, 0x64, 0x22, 0xae, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
    0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
    0x61, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x63, 0x68, 0x65, 0x63,
    0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18,
    0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b,
    0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x3d, 0x0a, 0x1b,
    0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65,
    0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
    0x0d, 0x52, 0x18, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50,
    0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x72,
    0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f,
    0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x59, 0x64, 0x62,
    0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
    0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x13, 0x72,
    0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x6f,
    0x64, 0x65, 0x12, 0x59, 0x0a, 0x17, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e,
    0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
    0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
    0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
    0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x15, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x43, 0x6f,
    0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x66, 0x0a,
    0x1a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f,
    0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
    0x0e, 0x32, 0x29, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
    0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x17, 0x72, 0x61,
    0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
    0x73, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
    0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
    0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
    0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74,
    0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x02, 0x20,
    0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x69, 0x6c, 0x6c,
    0x69, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
    0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
    0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
    0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
    0x22, 0x9d, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x53, 0x65,
    0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
    0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
    0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
    0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
    0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69,
    0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
    0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
    0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
    0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
    0x22, 0x82, 0x02, 0x0a, 0x14, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x44, 0x65,
    0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
    0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
    0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
    0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
    0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
    0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a,
    0x09, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
    0x52, 0x09, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x06, 0x6f,
    0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x59, 0x64,
    0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
    0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
    0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x77, 0x61, 0x69, 0x74, 0x65,
    0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43,
    0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6d, 0x61,
    0x70, 0x68, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x77, 0x61,
    0x69, 0x74, 0x65, 0x72, 0x73, 0x22, 0xbd, 0x11, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
    0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67,
    0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f,
    0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
    0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6e,
    0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x04, 0x70, 0x6f, 0x6e,
    0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f,
    0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
    0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x6f,
    0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x0d, 0x73, 0x65,
    0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
    0x0b, 0x32, 0x2d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
    0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
    0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
    0x12, 0x51, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x70,
    0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f,
    0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
    0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
    0x53, 0x74, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
    0x74, 0x6f, 0x70, 0x12, 0x44, 0x0a, 0x0d, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
    0x65, 0x64, 0x5f, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x59, 0x64, 0x62,
    0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e,
    0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x6e, 0x73,
    0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x35, 0x12, 0x44, 0x0a, 0x0d, 0x75, 0x6e, 0x73,
    0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
    0x32, 0x1d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x48,
    0x00, 0x52, 0x0c, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x36, 0x12,
    0x60, 0x0a, 0x11, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x6d, 0x61, 0x70,
    0x68, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x59, 0x64, 0x62,
    0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
    0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x71,
    0x75, 0x69, 0x72, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52,
    0x10, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72,
    0x65, 0x12, 0x60, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x6d,
    0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x59,
    0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
    0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
    0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x48,
    0x00, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68,
    0x6f, 0x72, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f,
    0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
    0x32, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69,
    0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
    0x74, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68,
    0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53,
    0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61,
    0x74, 0x65, 0x5f, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x30, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
    0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70,
    0x68, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
    0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74,
    0x65, 0x5f, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
    0x0b, 0x32, 0x30, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
    0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68,
    0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6d,
    0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
    0x5f, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
    0x32, 0x30, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
    0x73, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f,
    0x72, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x6d, 0x61,
    0x70, 0x68, 0x6f, 0x72, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f,
    0x72, 0x74, 0x65, 0x64, 0x5f, 0x31, 0x33, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
    0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x2e, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d,
    0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x31, 0x33, 0x12, 0x46, 0x0a,
    0x0e, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x31, 0x34, 0x18,
    0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72,
    0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f,
    0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
    0x74, 0x65, 0x64, 0x31, 0x34, 0x12, 0x46, 0x0a, 0x0e, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f,
    0x72, 0x74, 0x65, 0x64, 0x5f, 0x31, 0x35, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
    0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x2e, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d,
    0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x31, 0x35, 0x1a, 0x22, 0x0a,
    0x08, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x61,
    0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75,
    0x65, 0x1a, 0xc8, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
    0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
    0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
    0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
    0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
    0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74,
    0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x20, 0x0a, 0x0b,
    0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
    0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15,
    0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
    0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
    0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70,
    0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x1a, 0x0d, 0x0a, 0x0b,
    0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x1a, 0xac, 0x01, 0x0a, 0x10,
    0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65,
    0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
    0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
    0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74,
    0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x03, 0x20,
    0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x69, 0x6c, 0x6c,
    0x69, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
    0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
    0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
    0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
    0x09, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x1a, 0x3d, 0x0a, 0x10, 0x52, 0x65,
    0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x12, 0x15,
    0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
    0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
    0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xd0, 0x01, 0x0a, 0x11, 0x44, 0x65,
    0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x12,
    0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
    0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
    0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
    0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
    0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
    0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x77, 0x61, 0x69,
    0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c,
    0x75, 0x64, 0x65, 0x57, 0x61, 0x69, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61,
    0x74, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
    0x77, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x74,
    0x63, 0x68, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
    0x0b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x1a, 0x66, 0x0a, 0x0f,
    0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x12,
    0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
    0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
    0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
    0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
    0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
    0x64, 0x61, 0x74, 0x61, 0x1a, 0x50, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
    0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69,
    0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x12,
    0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
    0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
    0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x52, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
    0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71,
    0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64,
    0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
    0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20,
    0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65,
    0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbc, 0x19, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
    0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x70, 0x69, 0x6e,
    0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f,
    0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
    0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x50,
    0x6f, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x04, 0x70,
    0x6f, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x59, 0x64, 0x62, 0x2e,
    0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73,
    0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x6e,
    0x67, 0x50, 0x6f, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x12, 0x45, 0x0a,
    0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
    0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
    0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
    0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69,
    0x6c, 0x75, 0x72, 0x65, 0x12, 0x5b, 0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
    0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
    0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
    0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x48,
    0x00, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
    0x64, 0x12, 0x5b, 0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f,
    0x70, 0x70, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x59, 0x64, 0x62,
    0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
    0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65,
    0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0e,
    0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x44,
    0x0a, 0x0d, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x36, 0x18,
    0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72,
    0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f,
    0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
    0x74, 0x65, 0x64, 0x36, 0x12, 0x44, 0x0a, 0x0d, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
    0x74, 0x65, 0x64, 0x5f, 0x37, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x59, 0x64,
    0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
    0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x6e,
    0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x37, 0x12, 0x77, 0x0a, 0x19, 0x61, 0x63,
    0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x5f,
    0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
    0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
    0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72,
    0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x17, 0x61, 0x63, 0x71, 0x75,
    0x69, 0x72, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x6e, 0x64,
    0x69, 0x6e, 0x67, 0x12, 0x74, 0x0a, 0x18, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x73,
    0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
    0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72,
    0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
    0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
    0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48,
    0x00, 0x52, 0x16, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68,
    0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x74, 0x0a, 0x18, 0x72, 0x65, 0x6c,
    0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x5f, 0x72,
    0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x59, 0x64,
    0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
    0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
    0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52,
    0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
    0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
    0x77, 0x0a, 0x19, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x6d, 0x61,
    0x70, 0x68, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x39, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
    0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x65,
    0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52,
    0x17, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f,
    0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x7a, 0x0a, 0x1a, 0x64, 0x65, 0x73, 0x63,
    0x72, 0x69, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x5f, 0x63,
    0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x59,
    0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
    0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
    0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72,
    0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x18, 0x64, 0x65, 0x73, 0x63,
    0x72, 0x69, 0x62, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61,
    0x6e, 0x67, 0x65, 0x64, 0x12, 0x71, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73,
    0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
    0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72,
    0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
    0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
    0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00,
    0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72,
    0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x71, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74,
    0x65, 0x5f, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75,
    0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43,
    0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73,
    0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
    0x74, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
    0x74, 0x48, 0x00, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70,
    0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x71, 0x0a, 0x17, 0x64, 0x65,
    0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x5f, 0x72,
    0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x59, 0x64,
    0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
    0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44,
    0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x65,
    0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
    0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x46, 0x0a,
    0x0e, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x31, 0x36, 0x18,
    0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72,
    0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f,
    0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
    0x74, 0x65, 0x64, 0x31, 0x36, 0x12, 0x46, 0x0a, 0x0e, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f,
    0x72, 0x74, 0x65, 0x64, 0x5f, 0x31, 0x37, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
    0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x2e, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d,
    0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x31, 0x37, 0x12, 0x46, 0x0a,
    0x0e, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x31, 0x38, 0x18,
    0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72,
    0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f,
    0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
    0x74, 0x65, 0x64, 0x31, 0x38, 0x1a, 0x22, 0x0a, 0x08, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6e,
    0x67, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
    0x04, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x1a, 0x6d, 0x0a, 0x07, 0x46, 0x61, 0x69,
    0x6c, 0x75, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
    0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
    0x73, 0x49, 0x64, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
    0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
    0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x49, 0x73,
    0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
    0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x1a, 0x56, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73,
    0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
    0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
    0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d,
    0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
    0x04, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
    0x1a, 0x2f, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x70,
    0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
    0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
    0x64, 0x1a, 0x30, 0x0a, 0x17, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x65, 0x6d, 0x61,
    0x70, 0x68, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x0a, 0x06,
    0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65,
    0x71, 0x49, 0x64, 0x1a, 0xaf, 0x01, 0x0a, 0x16, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53,
    0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15,
    0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
    0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
    0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74,
    0x75, 0x73, 0x49, 0x64, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
    0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75,
    0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x49,
    0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
    0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x71,
    0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x71,
    0x75, 0x69, 0x72, 0x65, 0x64, 0x1a, 0xaf, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
    0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
    0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
    0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
    0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x53, 0x74,
    0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
    0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x73,
    0x73, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62,
    0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73,
    0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72,
    0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
    0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x1a, 0x92, 0x02, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63,
    0x72, 0x69, 0x62, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
    0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
    0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74,
    0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62,
    0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
    0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a,
    0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
    0x59, 0x64, 0x62, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4d,
    0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x5b,
    0x0a, 0x15, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
    0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
    0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x2e, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
    0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x73, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65,
    0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
    0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
    0x52, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x65, 0x64, 0x1a, 0x7b, 0x0a, 0x18,
    0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72,
    0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f,
    0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12,
    0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18,
    0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67,
    0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x68, 0x61,
    0x6e, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65,
    0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x1a, 0x92, 0x01, 0x0a, 0x15, 0x43, 0x72,
    0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
    0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
    0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74,
    0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62,
    0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
    0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a,
    0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
    0x59, 0x64, 0x62, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4d,
    0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x1a, 0x92,
    0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f,
    0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f,
    0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12,
    0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
    0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x73, 0x2e,
    0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
    0x75, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
    0x28, 0x0b, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49,
    0x73, 0x73, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73,
    0x75, 0x65, 0x73, 0x1a, 0x92, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
    0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a,
    0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72,
    0x65, 0x71, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
    0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
    0x73, 0x49, 0x64, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
    0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
    0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x49, 0x73,
    0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
    0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
    0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
    0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
    0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x30,
    0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
    0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
    0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
    0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
    0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62,
    0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65,
    0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x4d, 0x0a, 0x12,
    0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
    0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
    0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x10,
    0x41, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
    0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
    0x70, 0x61, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
    0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64,
    0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
    0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
    0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
    0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
    0x6d, 0x73, 0x22, 0x4c, 0x0a, 0x11, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52,
    0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62,
    0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x22, 0x71, 0x0a, 0x0f, 0x44, 0x72, 0x6f, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
    0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
    0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
    0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
    0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
    0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
    0x61, 0x6d, 0x73, 0x22, 0x4b, 0x0a, 0x10, 0x44, 0x72, 0x6f, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x52,
    0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62,
    0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x22, 0x75, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4e, 0x6f, 0x64, 0x65,
    0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
    0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x10, 0x6f,
    0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
    0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
    0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x4f, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72,
    0x69, 0x62, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
    0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
    0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f,
    0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63,
    0x72, 0x69, 0x62, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25,
    0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x59,
    0x64, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
    0x04, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
    0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x72,
    0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
    0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2a, 0x68, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x69,
    0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f,
    0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
    0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53,
    0x54, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x43,
    0x54, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e,
    0x43, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x58, 0x45, 0x44, 0x10,
    0x02, 0x2a, 0x93, 0x01, 0x0a, 0x17, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
    0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a,
    0x20, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f,
    0x55, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45,
    0x54, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
    0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x4d, 0x4f, 0x44,
    0x45, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x27,
    0x0a, 0x23, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x43,
    0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x54,
    0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x42, 0x77, 0x0a, 0x1b, 0x74, 0x65, 0x63, 0x68, 0x2e,
    0x79, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
    0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x50, 0x01, 0x5a, 0x3f, 0x67, 0x69,
    0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61,
    0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e,
    0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x59, 0x64, 0x62,
    0x5f, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf8, 0x01, 0x01,
    0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
    file_protos_ydb_coordination_proto_rawDescOnce sync.Once
    file_protos_ydb_coordination_proto_rawDescData = file_protos_ydb_coordination_proto_rawDesc
)

func file_protos_ydb_coordination_proto_rawDescGZIP() []byte {
    file_protos_ydb_coordination_proto_rawDescOnce.Do(func() {
        file_protos_ydb_coordination_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_ydb_coordination_proto_rawDescData)
    })
    return file_protos_ydb_coordination_proto_rawDescData
}

var file_protos_ydb_coordination_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_protos_ydb_coordination_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_protos_ydb_coordination_proto_goTypes = []interface{}{
    (ConsistencyMode)(0),                             // 0: Ydb.Coordination.ConsistencyMode
    (RateLimiterCountersMode)(0),                     // 1: Ydb.Coordination.RateLimiterCountersMode
    (*Unsupported)(nil),                              // 2: Ydb.Coordination.Unsupported
    (*Config)(nil),                                   // 3: Ydb.Coordination.Config
    (*SessionDescription)(nil),                       // 4: Ydb.Coordination.SessionDescription
    (*SemaphoreSession)(nil),                         // 5: Ydb.Coordination.SemaphoreSession
    (*SemaphoreDescription)(nil),                     // 6: Ydb.Coordination.SemaphoreDescription
    (*SessionRequest)(nil),                           // 7: Ydb.Coordination.SessionRequest
    (*SessionResponse)(nil),                          // 8: Ydb.Coordination.SessionResponse
    (*CreateNodeRequest)(nil),                        // 9: Ydb.Coordination.CreateNodeRequest
    (*CreateNodeResponse)(nil),                       // 10: Ydb.Coordination.CreateNodeResponse
    (*AlterNodeRequest)(nil),                         // 11: Ydb.Coordination.AlterNodeRequest
    (*AlterNodeResponse)(nil),                        // 12: Ydb.Coordination.AlterNodeResponse
    (*DropNodeRequest)(nil),                          // 13: Ydb.Coordination.DropNodeRequest
    (*DropNodeResponse)(nil),                         // 14: Ydb.Coordination.DropNodeResponse
    (*DescribeNodeRequest)(nil),                      // 15: Ydb.Coordination.DescribeNodeRequest
    (*DescribeNodeResponse)(nil),                     // 16: Ydb.Coordination.DescribeNodeResponse
    (*DescribeNodeResult)(nil),                       // 17: Ydb.Coordination.DescribeNodeResult
    (*SessionRequest_PingPong)(nil),                  // 18: Ydb.Coordination.SessionRequest.PingPong
    (*SessionRequest_SessionStart)(nil),              // 19: Ydb.Coordination.SessionRequest.SessionStart
    (*SessionRequest_SessionStop)(nil),               // 20: Ydb.Coordination.SessionRequest.SessionStop
    (*SessionRequest_AcquireSemaphore)(nil),          // 21: Ydb.Coordination.SessionRequest.AcquireSemaphore
    (*SessionRequest_ReleaseSemaphore)(nil),          // 22: Ydb.Coordination.SessionRequest.ReleaseSemaphore
    (*SessionRequest_DescribeSemaphore)(nil),         // 23: Ydb.Coordination.SessionRequest.DescribeSemaphore
    (*SessionRequest_CreateSemaphore)(nil),           // 24: Ydb.Coordination.SessionRequest.CreateSemaphore
    (*SessionRequest_UpdateSemaphore)(nil),           // 25: Ydb.Coordination.SessionRequest.UpdateSemaphore
    (*SessionRequest_DeleteSemaphore)(nil),           // 26: Ydb.Coordination.SessionRequest.DeleteSemaphore
    (*SessionResponse_PingPong)(nil),                 // 27: Ydb.Coordination.SessionResponse.PingPong
    (*SessionResponse_Failure)(nil),                  // 28: Ydb.Coordination.SessionResponse.Failure
    (*SessionResponse_SessionStarted)(nil),           // 29: Ydb.Coordination.SessionResponse.SessionStarted
    (*SessionResponse_SessionStopped)(nil),           // 30: Ydb.Coordination.SessionResponse.SessionStopped
    (*SessionResponse_AcquireSemaphorePending)(nil),  // 31: Ydb.Coordination.SessionResponse.AcquireSemaphorePending
    (*SessionResponse_AcquireSemaphoreResult)(nil),   // 32: Ydb.Coordination.SessionResponse.AcquireSemaphoreResult
    (*SessionResponse_ReleaseSemaphoreResult)(nil),   // 33: Ydb.Coordination.SessionResponse.ReleaseSemaphoreResult
    (*SessionResponse_DescribeSemaphoreResult)(nil),  // 34: Ydb.Coordination.SessionResponse.DescribeSemaphoreResult
    (*SessionResponse_DescribeSemaphoreChanged)(nil), // 35: Ydb.Coordination.SessionResponse.DescribeSemaphoreChanged
    (*SessionResponse_CreateSemaphoreResult)(nil),    // 36: Ydb.Coordination.SessionResponse.CreateSemaphoreResult
    (*SessionResponse_UpdateSemaphoreResult)(nil),    // 37: Ydb.Coordination.SessionResponse.UpdateSemaphoreResult
    (*SessionResponse_DeleteSemaphoreResult)(nil),    // 38: Ydb.Coordination.SessionResponse.DeleteSemaphoreResult
    (*Ydb_Operations.OperationParams)(nil),           // 39: Ydb.Operations.OperationParams
    (*Ydb_Operations.Operation)(nil),                 // 40: Ydb.Operations.Operation
    (*Ydb_Scheme.Entry)(nil),                         // 41: Ydb.Scheme.Entry
    (Ydb.StatusIds_StatusCode)(0),                    // 42: Ydb.StatusIds.StatusCode
    (*Ydb_Issue.IssueMessage)(nil),                   // 43: Ydb.Issue.IssueMessage
}
var file_protos_ydb_coordination_proto_depIdxs = []int32{
    0,  // 0: Ydb.Coordination.Config.read_consistency_mode:type_name -> Ydb.Coordination.ConsistencyMode
    0,  // 1: Ydb.Coordination.Config.attach_consistency_mode:type_name -> Ydb.Coordination.ConsistencyMode
    1,  // 2: Ydb.Coordination.Config.rate_limiter_counters_mode:type_name -> Ydb.Coordination.RateLimiterCountersMode
    5,  // 3: Ydb.Coordination.SemaphoreDescription.owners:type_name -> Ydb.Coordination.SemaphoreSession
    5,  // 4: Ydb.Coordination.SemaphoreDescription.waiters:type_name -> Ydb.Coordination.SemaphoreSession
    18, // 5: Ydb.Coordination.SessionRequest.ping:type_name -> Ydb.Coordination.SessionRequest.PingPong
    18, // 6: Ydb.Coordination.SessionRequest.pong:type_name -> Ydb.Coordination.SessionRequest.PingPong
    19, // 7: Ydb.Coordination.SessionRequest.session_start:type_name -> Ydb.Coordination.SessionRequest.SessionStart
    20, // 8: Ydb.Coordination.SessionRequest.session_stop:type_name -> Ydb.Coordination.SessionRequest.SessionStop
    2,  // 9: Ydb.Coordination.SessionRequest.unsupported_5:type_name -> Ydb.Coordination.Unsupported
    2,  // 10: Ydb.Coordination.SessionRequest.unsupported_6:type_name -> Ydb.Coordination.Unsupported
    21, // 11: Ydb.Coordination.SessionRequest.acquire_semaphore:type_name -> Ydb.Coordination.SessionRequest.AcquireSemaphore
    22, // 12: Ydb.Coordination.SessionRequest.release_semaphore:type_name -> Ydb.Coordination.SessionRequest.ReleaseSemaphore
    23, // 13: Ydb.Coordination.SessionRequest.describe_semaphore:type_name -> Ydb.Coordination.SessionRequest.DescribeSemaphore
    24, // 14: Ydb.Coordination.SessionRequest.create_semaphore:type_name -> Ydb.Coordination.SessionRequest.CreateSemaphore
    25, // 15: Ydb.Coordination.SessionRequest.update_semaphore:type_name -> Ydb.Coordination.SessionRequest.UpdateSemaphore
    26, // 16: Ydb.Coordination.SessionRequest.delete_semaphore:type_name -> Ydb.Coordination.SessionRequest.DeleteSemaphore
    2,  // 17: Ydb.Coordination.SessionRequest.unsupported_13:type_name -> Ydb.Coordination.Unsupported
    2,  // 18: Ydb.Coordination.SessionRequest.unsupported_14:type_name -> Ydb.Coordination.Unsupported
    2,  // 19: Ydb.Coordination.SessionRequest.unsupported_15:type_name -> Ydb.Coordination.Unsupported
    27, // 20: Ydb.Coordination.SessionResponse.ping:type_name -> Ydb.Coordination.SessionResponse.PingPong
    27, // 21: Ydb.Coordination.SessionResponse.pong:type_name -> Ydb.Coordination.SessionResponse.PingPong
    28, // 22: Ydb.Coordination.SessionResponse.failure:type_name -> Ydb.Coordination.SessionResponse.Failure
    29, // 23: Ydb.Coordination.SessionResponse.session_started:type_name -> Ydb.Coordination.SessionResponse.SessionStarted
    30, // 24: Ydb.Coordination.SessionResponse.session_stopped:type_name -> Ydb.Coordination.SessionResponse.SessionStopped
    2,  // 25: Ydb.Coordination.SessionResponse.unsupported_6:type_name -> Ydb.Coordination.Unsupported
    2,  // 26: Ydb.Coordination.SessionResponse.unsupported_7:type_name -> Ydb.Coordination.Unsupported
    31, // 27: Ydb.Coordination.SessionResponse.acquire_semaphore_pending:type_name -> Ydb.Coordination.SessionResponse.AcquireSemaphorePending
    32, // 28: Ydb.Coordination.SessionResponse.acquire_semaphore_result:type_name -> Ydb.Coordination.SessionResponse.AcquireSemaphoreResult
    33, // 29: Ydb.Coordination.SessionResponse.release_semaphore_result:type_name -> Ydb.Coordination.SessionResponse.ReleaseSemaphoreResult
    34, // 30: Ydb.Coordination.SessionResponse.describe_semaphore_result:type_name -> Ydb.Coordination.SessionResponse.DescribeSemaphoreResult
    35, // 31: Ydb.Coordination.SessionResponse.describe_semaphore_changed:type_name -> Ydb.Coordination.SessionResponse.DescribeSemaphoreChanged
    36, // 32: Ydb.Coordination.SessionResponse.create_semaphore_result:type_name -> Ydb.Coordination.SessionResponse.CreateSemaphoreResult
    37, // 33: Ydb.Coordination.SessionResponse.update_semaphore_result:type_name -> Ydb.Coordination.SessionResponse.UpdateSemaphoreResult
    38, // 34: Ydb.Coordination.SessionResponse.delete_semaphore_result:type_name -> Ydb.Coordination.SessionResponse.DeleteSemaphoreResult
    2,  // 35: Ydb.Coordination.SessionResponse.unsupported_16:type_name -> Ydb.Coordination.Unsupported
    2,  // 36: Ydb.Coordination.SessionResponse.unsupported_17:type_name -> Ydb.Coordination.Unsupported
    2,  // 37: Ydb.Coordination.SessionResponse.unsupported_18:type_name -> Ydb.Coordination.Unsupported
    3,  // 38: Ydb.Coordination.CreateNodeRequest.config:type_name -> Ydb.Coordination.Config
    39, // 39: Ydb.Coordination.CreateNodeRequest.operation_params:type_name -> Ydb.Operations.OperationParams
    40, // 40: Ydb.Coordination.CreateNodeResponse.operation:type_name -> Ydb.Operations.Operation
    3,  // 41: Ydb.Coordination.AlterNodeRequest.config:type_name -> Ydb.Coordination.Config
    39, // 42: Ydb.Coordination.AlterNodeRequest.operation_params:type_name -> Ydb.Operations.OperationParams
    40, // 43: Ydb.Coordination.AlterNodeResponse.operation:type_name -> Ydb.Operations.Operation
    39, // 44: Ydb.Coordination.DropNodeRequest.operation_params:type_name -> Ydb.Operations.OperationParams
    40, // 45: Ydb.Coordination.DropNodeResponse.operation:type_name -> Ydb.Operations.Operation
    39, // 46: Ydb.Coordination.DescribeNodeRequest.operation_params:type_name -> Ydb.Operations.OperationParams
    40, // 47: Ydb.Coordination.DescribeNodeResponse.operation:type_name -> Ydb.Operations.Operation
    41, // 48: Ydb.Coordination.DescribeNodeResult.self:type_name -> Ydb.Scheme.Entry
    3,  // 49: Ydb.Coordination.DescribeNodeResult.config:type_name -> Ydb.Coordination.Config
    42, // 50: Ydb.Coordination.SessionResponse.Failure.status:type_name -> Ydb.StatusIds.StatusCode
    43, // 51: Ydb.Coordination.SessionResponse.Failure.issues:type_name -> Ydb.Issue.IssueMessage
    42, // 52: Ydb.Coordination.SessionResponse.AcquireSemaphoreResult.status:type_name -> Ydb.StatusIds.StatusCode
    43, // 53: Ydb.Coordination.SessionResponse.AcquireSemaphoreResult.issues:type_name -> Ydb.Issue.IssueMessage
    42, // 54: Ydb.Coordination.SessionResponse.ReleaseSemaphoreResult.status:type_name -> Ydb.StatusIds.StatusCode
    43, // 55: Ydb.Coordination.SessionResponse.ReleaseSemaphoreResult.issues:type_name -> Ydb.Issue.IssueMessage
    42, // 56: Ydb.Coordination.SessionResponse.DescribeSemaphoreResult.status:type_name -> Ydb.StatusIds.StatusCode
    43, // 57: Ydb.Coordination.SessionResponse.DescribeSemaphoreResult.issues:type_name -> Ydb.Issue.IssueMessage
    6,  // 58: Ydb.Coordination.SessionResponse.DescribeSemaphoreResult.semaphore_description:type_name -> Ydb.Coordination.SemaphoreDescription
    42, // 59: Ydb.Coordination.SessionResponse.CreateSemaphoreResult.status:type_name -> Ydb.StatusIds.StatusCode
    43, // 60: Ydb.Coordination.SessionResponse.CreateSemaphoreResult.issues:type_name -> Ydb.Issue.IssueMessage
    42, // 61: Ydb.Coordination.SessionResponse.UpdateSemaphoreResult.status:type_name -> Ydb.StatusIds.StatusCode
    43, // 62: Ydb.Coordination.SessionResponse.UpdateSemaphoreResult.issues:type_name -> Ydb.Issue.IssueMessage
    42, // 63: Ydb.Coordination.SessionResponse.DeleteSemaphoreResult.status:type_name -> Ydb.StatusIds.StatusCode
    43, // 64: Ydb.Coordination.SessionResponse.DeleteSemaphoreResult.issues:type_name -> Ydb.Issue.IssueMessage
    65, // [65:65] is the sub-list for method output_type
    65, // [65:65] is the sub-list for method input_type
    65, // [65:65] is the sub-list for extension type_name
    65, // [65:65] is the sub-list for extension extendee
    0,  // [0:65] is the sub-list for field type_name
}

func init() { file_protos_ydb_coordination_proto_init() }
func file_protos_ydb_coordination_proto_init() {
    if File_protos_ydb_coordination_proto != nil {
        return
    }
    if !protoimpl.UnsafeEnabled {
        file_protos_ydb_coordination_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*Unsupported); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*Config); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionDescription); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SemaphoreSession); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SemaphoreDescription); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionRequest); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionResponse); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*CreateNodeRequest); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*CreateNodeResponse); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*AlterNodeRequest); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*AlterNodeResponse); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*DropNodeRequest); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*DropNodeResponse); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*DescribeNodeRequest); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*DescribeNodeResponse); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*DescribeNodeResult); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionRequest_PingPong); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionRequest_SessionStart); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionRequest_SessionStop); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionRequest_AcquireSemaphore); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionRequest_ReleaseSemaphore); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionRequest_DescribeSemaphore); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionRequest_CreateSemaphore); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionRequest_UpdateSemaphore); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionRequest_DeleteSemaphore); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionResponse_PingPong); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionResponse_Failure); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionResponse_SessionStarted); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionResponse_SessionStopped); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionResponse_AcquireSemaphorePending); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionResponse_AcquireSemaphoreResult); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionResponse_ReleaseSemaphoreResult); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionResponse_DescribeSemaphoreResult); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionResponse_DescribeSemaphoreChanged); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionResponse_CreateSemaphoreResult); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionResponse_UpdateSemaphoreResult); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
        file_protos_ydb_coordination_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
            switch v := v.(*SessionResponse_DeleteSemaphoreResult); i {
            case 0:
                return &v.state
            case 1:
                return &v.sizeCache
            case 2:
                return &v.unknownFields
            default:
                return nil
            }
        }
    }
    file_protos_ydb_coordination_proto_msgTypes[5].OneofWrappers = []interface{}{
        (*SessionRequest_Ping)(nil),
        (*SessionRequest_Pong)(nil),
        (*SessionRequest_SessionStart_)(nil),
        (*SessionRequest_SessionStop_)(nil),
        (*SessionRequest_Unsupported_5)(nil),
        (*SessionRequest_Unsupported_6)(nil),
        (*SessionRequest_AcquireSemaphore_)(nil),
        (*SessionRequest_ReleaseSemaphore_)(nil),
        (*SessionRequest_DescribeSemaphore_)(nil),
        (*SessionRequest_CreateSemaphore_)(nil),
        (*SessionRequest_UpdateSemaphore_)(nil),
        (*SessionRequest_DeleteSemaphore_)(nil),
        (*SessionRequest_Unsupported_13)(nil),
        (*SessionRequest_Unsupported_14)(nil),
        (*SessionRequest_Unsupported_15)(nil),
    }
    file_protos_ydb_coordination_proto_msgTypes[6].OneofWrappers = []interface{}{
        (*SessionResponse_Ping)(nil),
        (*SessionResponse_Pong)(nil),
        (*SessionResponse_Failure_)(nil),
        (*SessionResponse_SessionStarted_)(nil),
        (*SessionResponse_SessionStopped_)(nil),
        (*SessionResponse_Unsupported_6)(nil),
        (*SessionResponse_Unsupported_7)(nil),
        (*SessionResponse_AcquireSemaphorePending_)(nil),
        (*SessionResponse_AcquireSemaphoreResult_)(nil),
        (*SessionResponse_ReleaseSemaphoreResult_)(nil),
        (*SessionResponse_DescribeSemaphoreResult_)(nil),
        (*SessionResponse_DescribeSemaphoreChanged_)(nil),
        (*SessionResponse_CreateSemaphoreResult_)(nil),
        (*SessionResponse_UpdateSemaphoreResult_)(nil),
        (*SessionResponse_DeleteSemaphoreResult_)(nil),
        (*SessionResponse_Unsupported_16)(nil),
        (*SessionResponse_Unsupported_17)(nil),
        (*SessionResponse_Unsupported_18)(nil),
    }
    type x struct{}
    out := protoimpl.TypeBuilder{
        File: protoimpl.DescBuilder{
            GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
            RawDescriptor: file_protos_ydb_coordination_proto_rawDesc,
            NumEnums:      2,
            NumMessages:   37,
            NumExtensions: 0,
            NumServices:   0,
        },
        GoTypes:           file_protos_ydb_coordination_proto_goTypes,
        DependencyIndexes: file_protos_ydb_coordination_proto_depIdxs,
        EnumInfos:         file_protos_ydb_coordination_proto_enumTypes,
        MessageInfos:      file_protos_ydb_coordination_proto_msgTypes,
    }.Build()
    File_protos_ydb_coordination_proto = out.File
    file_protos_ydb_coordination_proto_rawDesc = nil
    file_protos_ydb_coordination_proto_goTypes = nil
    file_protos_ydb_coordination_proto_depIdxs = nil
}
