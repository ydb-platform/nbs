// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: ydb_query_v1.proto

package Ydb_Query_V1

import (
	context "context"
	Ydb_Operations "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Operations"
	Ydb_Query "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Query"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QueryService_CreateSession_FullMethodName       = "/Ydb.Query.V1.QueryService/CreateSession"
	QueryService_DeleteSession_FullMethodName       = "/Ydb.Query.V1.QueryService/DeleteSession"
	QueryService_AttachSession_FullMethodName       = "/Ydb.Query.V1.QueryService/AttachSession"
	QueryService_BeginTransaction_FullMethodName    = "/Ydb.Query.V1.QueryService/BeginTransaction"
	QueryService_CommitTransaction_FullMethodName   = "/Ydb.Query.V1.QueryService/CommitTransaction"
	QueryService_RollbackTransaction_FullMethodName = "/Ydb.Query.V1.QueryService/RollbackTransaction"
	QueryService_ExecuteQuery_FullMethodName        = "/Ydb.Query.V1.QueryService/ExecuteQuery"
	QueryService_ExecuteScript_FullMethodName       = "/Ydb.Query.V1.QueryService/ExecuteScript"
	QueryService_FetchScriptResults_FullMethodName  = "/Ydb.Query.V1.QueryService/FetchScriptResults"
)

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryServiceClient interface {
	// Sessions are basic primitives for communicating with YDB Query Service. The are similar to
	// connections for classic relational DBs. Sessions serve three main purposes:
	// 1. Provide a flow control for DB requests with limited number of active channels.
	// 2. Distribute load evenly across multiple DB nodes.
	// 3. Store state for volatile stateful operations, such as short-living transactions.
	CreateSession(ctx context.Context, in *Ydb_Query.CreateSessionRequest, opts ...grpc.CallOption) (*Ydb_Query.CreateSessionResponse, error)
	DeleteSession(ctx context.Context, in *Ydb_Query.DeleteSessionRequest, opts ...grpc.CallOption) (*Ydb_Query.DeleteSessionResponse, error)
	AttachSession(ctx context.Context, in *Ydb_Query.AttachSessionRequest, opts ...grpc.CallOption) (QueryService_AttachSessionClient, error)
	// Short-living transactions allow transactional execution of several queries, including support
	// for interactive transactions. Transaction control can be implemented via flags in ExecuteQuery
	// call (recommended), or via explicit calls to Begin/Commit/RollbackTransaction.
	BeginTransaction(ctx context.Context, in *Ydb_Query.BeginTransactionRequest, opts ...grpc.CallOption) (*Ydb_Query.BeginTransactionResponse, error)
	CommitTransaction(ctx context.Context, in *Ydb_Query.CommitTransactionRequest, opts ...grpc.CallOption) (*Ydb_Query.CommitTransactionResponse, error)
	RollbackTransaction(ctx context.Context, in *Ydb_Query.RollbackTransactionRequest, opts ...grpc.CallOption) (*Ydb_Query.RollbackTransactionResponse, error)
	// Execute interactive query in a specified short-living transaction.
	// YDB query can contain DML, DDL and DCL statements. Supported mix of different statement types depends
	// on the chosen transaction type.
	// In case of error, including transport errors such as interrupted stream, whole transaction
	// needs to be retried. For non-idempotent transaction, a custom client logic is required to
	// retry conditionally retriable statuses, when transaction execution state is unknown.
	ExecuteQuery(ctx context.Context, in *Ydb_Query.ExecuteQueryRequest, opts ...grpc.CallOption) (QueryService_ExecuteQueryClient, error)
	// Execute long-running script.
	// YDB scripts can contain all type of statements, including TCL statements. This way you can execute multiple
	// transactions in a single YDB script.
	// ExecuteScript call returns long-running Ydb.Operation object with:
	//
	//	operation.metadata = ExecuteScriptMetadata
	//	operation.result = Empty
	//
	// Script execution metadata contains all information about current execution state, including
	// execution_id, execution statistics and result sets info.
	// You can use standard operation methods such as Get/Cancel/Forget/ListOperations to work with script executions.
	// Script can be executed as persistent, in which case all execution information and results will be stored
	// persistently and available after successful or unsuccessful execution.
	ExecuteScript(ctx context.Context, in *Ydb_Query.ExecuteScriptRequest, opts ...grpc.CallOption) (*Ydb_Operations.Operation, error)
	// Fetch results for script execution using fetch_token for continuation.
	// For script with multiple result sets, parts of different results sets are interleaved in responses.
	// For persistent scripts, you can fetch results in specific position of specific result set using
	// position instead of fetch_token.
	FetchScriptResults(ctx context.Context, in *Ydb_Query.FetchScriptResultsRequest, opts ...grpc.CallOption) (*Ydb_Query.FetchScriptResultsResponse, error)
}

type queryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryServiceClient(cc grpc.ClientConnInterface) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) CreateSession(ctx context.Context, in *Ydb_Query.CreateSessionRequest, opts ...grpc.CallOption) (*Ydb_Query.CreateSessionResponse, error) {
	out := new(Ydb_Query.CreateSessionResponse)
	err := c.cc.Invoke(ctx, QueryService_CreateSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) DeleteSession(ctx context.Context, in *Ydb_Query.DeleteSessionRequest, opts ...grpc.CallOption) (*Ydb_Query.DeleteSessionResponse, error) {
	out := new(Ydb_Query.DeleteSessionResponse)
	err := c.cc.Invoke(ctx, QueryService_DeleteSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) AttachSession(ctx context.Context, in *Ydb_Query.AttachSessionRequest, opts ...grpc.CallOption) (QueryService_AttachSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &QueryService_ServiceDesc.Streams[0], QueryService_AttachSession_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &queryServiceAttachSessionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueryService_AttachSessionClient interface {
	Recv() (*Ydb_Query.SessionState, error)
	grpc.ClientStream
}

type queryServiceAttachSessionClient struct {
	grpc.ClientStream
}

func (x *queryServiceAttachSessionClient) Recv() (*Ydb_Query.SessionState, error) {
	m := new(Ydb_Query.SessionState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryServiceClient) BeginTransaction(ctx context.Context, in *Ydb_Query.BeginTransactionRequest, opts ...grpc.CallOption) (*Ydb_Query.BeginTransactionResponse, error) {
	out := new(Ydb_Query.BeginTransactionResponse)
	err := c.cc.Invoke(ctx, QueryService_BeginTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) CommitTransaction(ctx context.Context, in *Ydb_Query.CommitTransactionRequest, opts ...grpc.CallOption) (*Ydb_Query.CommitTransactionResponse, error) {
	out := new(Ydb_Query.CommitTransactionResponse)
	err := c.cc.Invoke(ctx, QueryService_CommitTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) RollbackTransaction(ctx context.Context, in *Ydb_Query.RollbackTransactionRequest, opts ...grpc.CallOption) (*Ydb_Query.RollbackTransactionResponse, error) {
	out := new(Ydb_Query.RollbackTransactionResponse)
	err := c.cc.Invoke(ctx, QueryService_RollbackTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ExecuteQuery(ctx context.Context, in *Ydb_Query.ExecuteQueryRequest, opts ...grpc.CallOption) (QueryService_ExecuteQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &QueryService_ServiceDesc.Streams[1], QueryService_ExecuteQuery_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &queryServiceExecuteQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueryService_ExecuteQueryClient interface {
	Recv() (*Ydb_Query.ExecuteQueryResponsePart, error)
	grpc.ClientStream
}

type queryServiceExecuteQueryClient struct {
	grpc.ClientStream
}

func (x *queryServiceExecuteQueryClient) Recv() (*Ydb_Query.ExecuteQueryResponsePart, error) {
	m := new(Ydb_Query.ExecuteQueryResponsePart)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryServiceClient) ExecuteScript(ctx context.Context, in *Ydb_Query.ExecuteScriptRequest, opts ...grpc.CallOption) (*Ydb_Operations.Operation, error) {
	out := new(Ydb_Operations.Operation)
	err := c.cc.Invoke(ctx, QueryService_ExecuteScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) FetchScriptResults(ctx context.Context, in *Ydb_Query.FetchScriptResultsRequest, opts ...grpc.CallOption) (*Ydb_Query.FetchScriptResultsResponse, error) {
	out := new(Ydb_Query.FetchScriptResultsResponse)
	err := c.cc.Invoke(ctx, QueryService_FetchScriptResults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
// All implementations must embed UnimplementedQueryServiceServer
// for forward compatibility
type QueryServiceServer interface {
	// Sessions are basic primitives for communicating with YDB Query Service. The are similar to
	// connections for classic relational DBs. Sessions serve three main purposes:
	// 1. Provide a flow control for DB requests with limited number of active channels.
	// 2. Distribute load evenly across multiple DB nodes.
	// 3. Store state for volatile stateful operations, such as short-living transactions.
	CreateSession(context.Context, *Ydb_Query.CreateSessionRequest) (*Ydb_Query.CreateSessionResponse, error)
	DeleteSession(context.Context, *Ydb_Query.DeleteSessionRequest) (*Ydb_Query.DeleteSessionResponse, error)
	AttachSession(*Ydb_Query.AttachSessionRequest, QueryService_AttachSessionServer) error
	// Short-living transactions allow transactional execution of several queries, including support
	// for interactive transactions. Transaction control can be implemented via flags in ExecuteQuery
	// call (recommended), or via explicit calls to Begin/Commit/RollbackTransaction.
	BeginTransaction(context.Context, *Ydb_Query.BeginTransactionRequest) (*Ydb_Query.BeginTransactionResponse, error)
	CommitTransaction(context.Context, *Ydb_Query.CommitTransactionRequest) (*Ydb_Query.CommitTransactionResponse, error)
	RollbackTransaction(context.Context, *Ydb_Query.RollbackTransactionRequest) (*Ydb_Query.RollbackTransactionResponse, error)
	// Execute interactive query in a specified short-living transaction.
	// YDB query can contain DML, DDL and DCL statements. Supported mix of different statement types depends
	// on the chosen transaction type.
	// In case of error, including transport errors such as interrupted stream, whole transaction
	// needs to be retried. For non-idempotent transaction, a custom client logic is required to
	// retry conditionally retriable statuses, when transaction execution state is unknown.
	ExecuteQuery(*Ydb_Query.ExecuteQueryRequest, QueryService_ExecuteQueryServer) error
	// Execute long-running script.
	// YDB scripts can contain all type of statements, including TCL statements. This way you can execute multiple
	// transactions in a single YDB script.
	// ExecuteScript call returns long-running Ydb.Operation object with:
	//
	//	operation.metadata = ExecuteScriptMetadata
	//	operation.result = Empty
	//
	// Script execution metadata contains all information about current execution state, including
	// execution_id, execution statistics and result sets info.
	// You can use standard operation methods such as Get/Cancel/Forget/ListOperations to work with script executions.
	// Script can be executed as persistent, in which case all execution information and results will be stored
	// persistently and available after successful or unsuccessful execution.
	ExecuteScript(context.Context, *Ydb_Query.ExecuteScriptRequest) (*Ydb_Operations.Operation, error)
	// Fetch results for script execution using fetch_token for continuation.
	// For script with multiple result sets, parts of different results sets are interleaved in responses.
	// For persistent scripts, you can fetch results in specific position of specific result set using
	// position instead of fetch_token.
	FetchScriptResults(context.Context, *Ydb_Query.FetchScriptResultsRequest) (*Ydb_Query.FetchScriptResultsResponse, error)
	mustEmbedUnimplementedQueryServiceServer()
}

// UnimplementedQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (UnimplementedQueryServiceServer) CreateSession(context.Context, *Ydb_Query.CreateSessionRequest) (*Ydb_Query.CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedQueryServiceServer) DeleteSession(context.Context, *Ydb_Query.DeleteSessionRequest) (*Ydb_Query.DeleteSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedQueryServiceServer) AttachSession(*Ydb_Query.AttachSessionRequest, QueryService_AttachSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method AttachSession not implemented")
}
func (UnimplementedQueryServiceServer) BeginTransaction(context.Context, *Ydb_Query.BeginTransactionRequest) (*Ydb_Query.BeginTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginTransaction not implemented")
}
func (UnimplementedQueryServiceServer) CommitTransaction(context.Context, *Ydb_Query.CommitTransactionRequest) (*Ydb_Query.CommitTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitTransaction not implemented")
}
func (UnimplementedQueryServiceServer) RollbackTransaction(context.Context, *Ydb_Query.RollbackTransactionRequest) (*Ydb_Query.RollbackTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackTransaction not implemented")
}
func (UnimplementedQueryServiceServer) ExecuteQuery(*Ydb_Query.ExecuteQueryRequest, QueryService_ExecuteQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteQuery not implemented")
}
func (UnimplementedQueryServiceServer) ExecuteScript(context.Context, *Ydb_Query.ExecuteScriptRequest) (*Ydb_Operations.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteScript not implemented")
}
func (UnimplementedQueryServiceServer) FetchScriptResults(context.Context, *Ydb_Query.FetchScriptResultsRequest) (*Ydb_Query.FetchScriptResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchScriptResults not implemented")
}
func (UnimplementedQueryServiceServer) mustEmbedUnimplementedQueryServiceServer() {}

// UnsafeQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServiceServer will
// result in compilation errors.
type UnsafeQueryServiceServer interface {
	mustEmbedUnimplementedQueryServiceServer()
}

func RegisterQueryServiceServer(s grpc.ServiceRegistrar, srv QueryServiceServer) {
	s.RegisterService(&QueryService_ServiceDesc, srv)
}

func _QueryService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Query.CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CreateSession(ctx, req.(*Ydb_Query.CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Query.DeleteSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_DeleteSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).DeleteSession(ctx, req.(*Ydb_Query.DeleteSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_AttachSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Ydb_Query.AttachSessionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServiceServer).AttachSession(m, &queryServiceAttachSessionServer{stream})
}

type QueryService_AttachSessionServer interface {
	Send(*Ydb_Query.SessionState) error
	grpc.ServerStream
}

type queryServiceAttachSessionServer struct {
	grpc.ServerStream
}

func (x *queryServiceAttachSessionServer) Send(m *Ydb_Query.SessionState) error {
	return x.ServerStream.SendMsg(m)
}

func _QueryService_BeginTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Query.BeginTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).BeginTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_BeginTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).BeginTransaction(ctx, req.(*Ydb_Query.BeginTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_CommitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Query.CommitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CommitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_CommitTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CommitTransaction(ctx, req.(*Ydb_Query.CommitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_RollbackTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Query.RollbackTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).RollbackTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_RollbackTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).RollbackTransaction(ctx, req.(*Ydb_Query.RollbackTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ExecuteQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Ydb_Query.ExecuteQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServiceServer).ExecuteQuery(m, &queryServiceExecuteQueryServer{stream})
}

type QueryService_ExecuteQueryServer interface {
	Send(*Ydb_Query.ExecuteQueryResponsePart) error
	grpc.ServerStream
}

type queryServiceExecuteQueryServer struct {
	grpc.ServerStream
}

func (x *queryServiceExecuteQueryServer) Send(m *Ydb_Query.ExecuteQueryResponsePart) error {
	return x.ServerStream.SendMsg(m)
}

func _QueryService_ExecuteScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Query.ExecuteScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ExecuteScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_ExecuteScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ExecuteScript(ctx, req.(*Ydb_Query.ExecuteScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_FetchScriptResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Query.FetchScriptResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).FetchScriptResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_FetchScriptResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).FetchScriptResults(ctx, req.(*Ydb_Query.FetchScriptResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryService_ServiceDesc is the grpc.ServiceDesc for QueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ydb.Query.V1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _QueryService_CreateSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _QueryService_DeleteSession_Handler,
		},
		{
			MethodName: "BeginTransaction",
			Handler:    _QueryService_BeginTransaction_Handler,
		},
		{
			MethodName: "CommitTransaction",
			Handler:    _QueryService_CommitTransaction_Handler,
		},
		{
			MethodName: "RollbackTransaction",
			Handler:    _QueryService_RollbackTransaction_Handler,
		},
		{
			MethodName: "ExecuteScript",
			Handler:    _QueryService_ExecuteScript_Handler,
		},
		{
			MethodName: "FetchScriptResults",
			Handler:    _QueryService_FetchScriptResults_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AttachSession",
			Handler:       _QueryService_AttachSession_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExecuteQuery",
			Handler:       _QueryService_ExecuteQuery_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ydb_query_v1.proto",
}
