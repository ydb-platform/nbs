// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: ydb_table_v1.proto

package Ydb_Table_V1

import (
    context "context"
    Ydb_Table "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Table"
    grpc "google.golang.org/grpc"
    codes "google.golang.org/grpc/codes"
    status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
    TableService_CreateSession_FullMethodName          = "/Ydb.Table.V1.TableService/CreateSession"
    TableService_DeleteSession_FullMethodName          = "/Ydb.Table.V1.TableService/DeleteSession"
    TableService_KeepAlive_FullMethodName              = "/Ydb.Table.V1.TableService/KeepAlive"
    TableService_CreateTable_FullMethodName            = "/Ydb.Table.V1.TableService/CreateTable"
    TableService_DropTable_FullMethodName              = "/Ydb.Table.V1.TableService/DropTable"
    TableService_AlterTable_FullMethodName             = "/Ydb.Table.V1.TableService/AlterTable"
    TableService_CopyTable_FullMethodName              = "/Ydb.Table.V1.TableService/CopyTable"
    TableService_CopyTables_FullMethodName             = "/Ydb.Table.V1.TableService/CopyTables"
    TableService_RenameTables_FullMethodName           = "/Ydb.Table.V1.TableService/RenameTables"
    TableService_DescribeTable_FullMethodName          = "/Ydb.Table.V1.TableService/DescribeTable"
    TableService_ExplainDataQuery_FullMethodName       = "/Ydb.Table.V1.TableService/ExplainDataQuery"
    TableService_PrepareDataQuery_FullMethodName       = "/Ydb.Table.V1.TableService/PrepareDataQuery"
    TableService_ExecuteDataQuery_FullMethodName       = "/Ydb.Table.V1.TableService/ExecuteDataQuery"
    TableService_ExecuteSchemeQuery_FullMethodName     = "/Ydb.Table.V1.TableService/ExecuteSchemeQuery"
    TableService_BeginTransaction_FullMethodName       = "/Ydb.Table.V1.TableService/BeginTransaction"
    TableService_CommitTransaction_FullMethodName      = "/Ydb.Table.V1.TableService/CommitTransaction"
    TableService_RollbackTransaction_FullMethodName    = "/Ydb.Table.V1.TableService/RollbackTransaction"
    TableService_DescribeTableOptions_FullMethodName   = "/Ydb.Table.V1.TableService/DescribeTableOptions"
    TableService_StreamReadTable_FullMethodName        = "/Ydb.Table.V1.TableService/StreamReadTable"
    TableService_ReadRows_FullMethodName               = "/Ydb.Table.V1.TableService/ReadRows"
    TableService_BulkUpsert_FullMethodName             = "/Ydb.Table.V1.TableService/BulkUpsert"
    TableService_StreamExecuteScanQuery_FullMethodName = "/Ydb.Table.V1.TableService/StreamExecuteScanQuery"
)

// TableServiceClient is the client API for TableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TableServiceClient interface {
    // Create new session. Implicit session creation is forbidden,
    // so user must create new session before execute any query,
    // otherwise BAD_SESSION status will be returned.
    // Simultaneous execution of requests are forbiden.
    // Sessions are volatile, can be invalidated by server, for example in case
    // of fatal errors. All requests with this session will fail with BAD_SESSION status.
    // So, client must be able to handle BAD_SESSION status.
    CreateSession(ctx context.Context, in *Ydb_Table.CreateSessionRequest, opts ...grpc.CallOption) (*Ydb_Table.CreateSessionResponse, error)
    // Ends a session, releasing server resources associated with it.
    DeleteSession(ctx context.Context, in *Ydb_Table.DeleteSessionRequest, opts ...grpc.CallOption) (*Ydb_Table.DeleteSessionResponse, error)
    // Idle sessions can be kept alive by calling KeepAlive periodically.
    KeepAlive(ctx context.Context, in *Ydb_Table.KeepAliveRequest, opts ...grpc.CallOption) (*Ydb_Table.KeepAliveResponse, error)
    // Creates new table.
    CreateTable(ctx context.Context, in *Ydb_Table.CreateTableRequest, opts ...grpc.CallOption) (*Ydb_Table.CreateTableResponse, error)
    // Drop table.
    DropTable(ctx context.Context, in *Ydb_Table.DropTableRequest, opts ...grpc.CallOption) (*Ydb_Table.DropTableResponse, error)
    // Modifies schema of given table.
    AlterTable(ctx context.Context, in *Ydb_Table.AlterTableRequest, opts ...grpc.CallOption) (*Ydb_Table.AlterTableResponse, error)
    // Creates copy of given table.
    CopyTable(ctx context.Context, in *Ydb_Table.CopyTableRequest, opts ...grpc.CallOption) (*Ydb_Table.CopyTableResponse, error)
    // Creates consistent copy of given tables.
    CopyTables(ctx context.Context, in *Ydb_Table.CopyTablesRequest, opts ...grpc.CallOption) (*Ydb_Table.CopyTablesResponse, error)
    // Creates consistent move of given tables.
    RenameTables(ctx context.Context, in *Ydb_Table.RenameTablesRequest, opts ...grpc.CallOption) (*Ydb_Table.RenameTablesResponse, error)
    // Returns information about given table (metadata).
    DescribeTable(ctx context.Context, in *Ydb_Table.DescribeTableRequest, opts ...grpc.CallOption) (*Ydb_Table.DescribeTableResponse, error)
    // Explains data query.
    // SessionId of previously created session must be provided.
    ExplainDataQuery(ctx context.Context, in *Ydb_Table.ExplainDataQueryRequest, opts ...grpc.CallOption) (*Ydb_Table.ExplainDataQueryResponse, error)
    // Prepares data query, returns query id.
    // SessionId of previously created session must be provided.
    PrepareDataQuery(ctx context.Context, in *Ydb_Table.PrepareDataQueryRequest, opts ...grpc.CallOption) (*Ydb_Table.PrepareDataQueryResponse, error)
    // Executes data query.
    // SessionId of previously created session must be provided.
    ExecuteDataQuery(ctx context.Context, in *Ydb_Table.ExecuteDataQueryRequest, opts ...grpc.CallOption) (*Ydb_Table.ExecuteDataQueryResponse, error)
    // Executes scheme query.
    // SessionId of previously created session must be provided.
    ExecuteSchemeQuery(ctx context.Context, in *Ydb_Table.ExecuteSchemeQueryRequest, opts ...grpc.CallOption) (*Ydb_Table.ExecuteSchemeQueryResponse, error)
    // Begins new transaction.
    BeginTransaction(ctx context.Context, in *Ydb_Table.BeginTransactionRequest, opts ...grpc.CallOption) (*Ydb_Table.BeginTransactionResponse, error)
    // Commits specified active transaction.
    CommitTransaction(ctx context.Context, in *Ydb_Table.CommitTransactionRequest, opts ...grpc.CallOption) (*Ydb_Table.CommitTransactionResponse, error)
    // Performs a rollback of the specified active transaction.
    RollbackTransaction(ctx context.Context, in *Ydb_Table.RollbackTransactionRequest, opts ...grpc.CallOption) (*Ydb_Table.RollbackTransactionResponse, error)
    // Describe supported table options.
    DescribeTableOptions(ctx context.Context, in *Ydb_Table.DescribeTableOptionsRequest, opts ...grpc.CallOption) (*Ydb_Table.DescribeTableOptionsResponse, error)
    // Streaming read table
    StreamReadTable(ctx context.Context, in *Ydb_Table.ReadTableRequest, opts ...grpc.CallOption) (TableService_StreamReadTableClient, error)
    // Reads specified keys non-transactionally from a single table
    ReadRows(ctx context.Context, in *Ydb_Table.ReadRowsRequest, opts ...grpc.CallOption) (*Ydb_Table.ReadRowsResponse, error)
    // Upserts a batch of rows non-transactionally.
    // Returns success only when all rows were successfully upserted. In case of an error some rows might
    // be upserted and some might not.
    BulkUpsert(ctx context.Context, in *Ydb_Table.BulkUpsertRequest, opts ...grpc.CallOption) (*Ydb_Table.BulkUpsertResponse, error)
    // Executes scan query with streaming result.
    StreamExecuteScanQuery(ctx context.Context, in *Ydb_Table.ExecuteScanQueryRequest, opts ...grpc.CallOption) (TableService_StreamExecuteScanQueryClient, error)
}

type tableServiceClient struct {
    cc grpc.ClientConnInterface
}

func NewTableServiceClient(cc grpc.ClientConnInterface) TableServiceClient {
    return &tableServiceClient{cc}
}

func (c *tableServiceClient) CreateSession(ctx context.Context, in *Ydb_Table.CreateSessionRequest, opts ...grpc.CallOption) (*Ydb_Table.CreateSessionResponse, error) {
    out := new(Ydb_Table.CreateSessionResponse)
    err := c.cc.Invoke(ctx, TableService_CreateSession_FullMethodName, in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *tableServiceClient) DeleteSession(ctx context.Context, in *Ydb_Table.DeleteSessionRequest, opts ...grpc.CallOption) (*Ydb_Table.DeleteSessionResponse, error) {
    out := new(Ydb_Table.DeleteSessionResponse)
    err := c.cc.Invoke(ctx, TableService_DeleteSession_FullMethodName, in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *tableServiceClient) KeepAlive(ctx context.Context, in *Ydb_Table.KeepAliveRequest, opts ...grpc.CallOption) (*Ydb_Table.KeepAliveResponse, error) {
    out := new(Ydb_Table.KeepAliveResponse)
    err := c.cc.Invoke(ctx, TableService_KeepAlive_FullMethodName, in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *tableServiceClient) CreateTable(ctx context.Context, in *Ydb_Table.CreateTableRequest, opts ...grpc.CallOption) (*Ydb_Table.CreateTableResponse, error) {
    out := new(Ydb_Table.CreateTableResponse)
    err := c.cc.Invoke(ctx, TableService_CreateTable_FullMethodName, in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *tableServiceClient) DropTable(ctx context.Context, in *Ydb_Table.DropTableRequest, opts ...grpc.CallOption) (*Ydb_Table.DropTableResponse, error) {
    out := new(Ydb_Table.DropTableResponse)
    err := c.cc.Invoke(ctx, TableService_DropTable_FullMethodName, in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *tableServiceClient) AlterTable(ctx context.Context, in *Ydb_Table.AlterTableRequest, opts ...grpc.CallOption) (*Ydb_Table.AlterTableResponse, error) {
    out := new(Ydb_Table.AlterTableResponse)
    err := c.cc.Invoke(ctx, TableService_AlterTable_FullMethodName, in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *tableServiceClient) CopyTable(ctx context.Context, in *Ydb_Table.CopyTableRequest, opts ...grpc.CallOption) (*Ydb_Table.CopyTableResponse, error) {
    out := new(Ydb_Table.CopyTableResponse)
    err := c.cc.Invoke(ctx, TableService_CopyTable_FullMethodName, in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *tableServiceClient) CopyTables(ctx context.Context, in *Ydb_Table.CopyTablesRequest, opts ...grpc.CallOption) (*Ydb_Table.CopyTablesResponse, error) {
    out := new(Ydb_Table.CopyTablesResponse)
    err := c.cc.Invoke(ctx, TableService_CopyTables_FullMethodName, in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *tableServiceClient) RenameTables(ctx context.Context, in *Ydb_Table.RenameTablesRequest, opts ...grpc.CallOption) (*Ydb_Table.RenameTablesResponse, error) {
    out := new(Ydb_Table.RenameTablesResponse)
    err := c.cc.Invoke(ctx, TableService_RenameTables_FullMethodName, in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *tableServiceClient) DescribeTable(ctx context.Context, in *Ydb_Table.DescribeTableRequest, opts ...grpc.CallOption) (*Ydb_Table.DescribeTableResponse, error) {
    out := new(Ydb_Table.DescribeTableResponse)
    err := c.cc.Invoke(ctx, TableService_DescribeTable_FullMethodName, in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *tableServiceClient) ExplainDataQuery(ctx context.Context, in *Ydb_Table.ExplainDataQueryRequest, opts ...grpc.CallOption) (*Ydb_Table.ExplainDataQueryResponse, error) {
    out := new(Ydb_Table.ExplainDataQueryResponse)
    err := c.cc.Invoke(ctx, TableService_ExplainDataQuery_FullMethodName, in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *tableServiceClient) PrepareDataQuery(ctx context.Context, in *Ydb_Table.PrepareDataQueryRequest, opts ...grpc.CallOption) (*Ydb_Table.PrepareDataQueryResponse, error) {
    out := new(Ydb_Table.PrepareDataQueryResponse)
    err := c.cc.Invoke(ctx, TableService_PrepareDataQuery_FullMethodName, in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *tableServiceClient) ExecuteDataQuery(ctx context.Context, in *Ydb_Table.ExecuteDataQueryRequest, opts ...grpc.CallOption) (*Ydb_Table.ExecuteDataQueryResponse, error) {
    out := new(Ydb_Table.ExecuteDataQueryResponse)
    err := c.cc.Invoke(ctx, TableService_ExecuteDataQuery_FullMethodName, in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *tableServiceClient) ExecuteSchemeQuery(ctx context.Context, in *Ydb_Table.ExecuteSchemeQueryRequest, opts ...grpc.CallOption) (*Ydb_Table.ExecuteSchemeQueryResponse, error) {
    out := new(Ydb_Table.ExecuteSchemeQueryResponse)
    err := c.cc.Invoke(ctx, TableService_ExecuteSchemeQuery_FullMethodName, in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *tableServiceClient) BeginTransaction(ctx context.Context, in *Ydb_Table.BeginTransactionRequest, opts ...grpc.CallOption) (*Ydb_Table.BeginTransactionResponse, error) {
    out := new(Ydb_Table.BeginTransactionResponse)
    err := c.cc.Invoke(ctx, TableService_BeginTransaction_FullMethodName, in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *tableServiceClient) CommitTransaction(ctx context.Context, in *Ydb_Table.CommitTransactionRequest, opts ...grpc.CallOption) (*Ydb_Table.CommitTransactionResponse, error) {
    out := new(Ydb_Table.CommitTransactionResponse)
    err := c.cc.Invoke(ctx, TableService_CommitTransaction_FullMethodName, in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *tableServiceClient) RollbackTransaction(ctx context.Context, in *Ydb_Table.RollbackTransactionRequest, opts ...grpc.CallOption) (*Ydb_Table.RollbackTransactionResponse, error) {
    out := new(Ydb_Table.RollbackTransactionResponse)
    err := c.cc.Invoke(ctx, TableService_RollbackTransaction_FullMethodName, in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *tableServiceClient) DescribeTableOptions(ctx context.Context, in *Ydb_Table.DescribeTableOptionsRequest, opts ...grpc.CallOption) (*Ydb_Table.DescribeTableOptionsResponse, error) {
    out := new(Ydb_Table.DescribeTableOptionsResponse)
    err := c.cc.Invoke(ctx, TableService_DescribeTableOptions_FullMethodName, in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *tableServiceClient) StreamReadTable(ctx context.Context, in *Ydb_Table.ReadTableRequest, opts ...grpc.CallOption) (TableService_StreamReadTableClient, error) {
    stream, err := c.cc.NewStream(ctx, &TableService_ServiceDesc.Streams[0], TableService_StreamReadTable_FullMethodName, opts...)
    if err != nil {
        return nil, err
    }
    x := &tableServiceStreamReadTableClient{stream}
    if err := x.ClientStream.SendMsg(in); err != nil {
        return nil, err
    }
    if err := x.ClientStream.CloseSend(); err != nil {
        return nil, err
    }
    return x, nil
}

type TableService_StreamReadTableClient interface {
    Recv() (*Ydb_Table.ReadTableResponse, error)
    grpc.ClientStream
}

type tableServiceStreamReadTableClient struct {
    grpc.ClientStream
}

func (x *tableServiceStreamReadTableClient) Recv() (*Ydb_Table.ReadTableResponse, error) {
    m := new(Ydb_Table.ReadTableResponse)
    if err := x.ClientStream.RecvMsg(m); err != nil {
        return nil, err
    }
    return m, nil
}

func (c *tableServiceClient) ReadRows(ctx context.Context, in *Ydb_Table.ReadRowsRequest, opts ...grpc.CallOption) (*Ydb_Table.ReadRowsResponse, error) {
    out := new(Ydb_Table.ReadRowsResponse)
    err := c.cc.Invoke(ctx, TableService_ReadRows_FullMethodName, in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *tableServiceClient) BulkUpsert(ctx context.Context, in *Ydb_Table.BulkUpsertRequest, opts ...grpc.CallOption) (*Ydb_Table.BulkUpsertResponse, error) {
    out := new(Ydb_Table.BulkUpsertResponse)
    err := c.cc.Invoke(ctx, TableService_BulkUpsert_FullMethodName, in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *tableServiceClient) StreamExecuteScanQuery(ctx context.Context, in *Ydb_Table.ExecuteScanQueryRequest, opts ...grpc.CallOption) (TableService_StreamExecuteScanQueryClient, error) {
    stream, err := c.cc.NewStream(ctx, &TableService_ServiceDesc.Streams[1], TableService_StreamExecuteScanQuery_FullMethodName, opts...)
    if err != nil {
        return nil, err
    }
    x := &tableServiceStreamExecuteScanQueryClient{stream}
    if err := x.ClientStream.SendMsg(in); err != nil {
        return nil, err
    }
    if err := x.ClientStream.CloseSend(); err != nil {
        return nil, err
    }
    return x, nil
}

type TableService_StreamExecuteScanQueryClient interface {
    Recv() (*Ydb_Table.ExecuteScanQueryPartialResponse, error)
    grpc.ClientStream
}

type tableServiceStreamExecuteScanQueryClient struct {
    grpc.ClientStream
}

func (x *tableServiceStreamExecuteScanQueryClient) Recv() (*Ydb_Table.ExecuteScanQueryPartialResponse, error) {
    m := new(Ydb_Table.ExecuteScanQueryPartialResponse)
    if err := x.ClientStream.RecvMsg(m); err != nil {
        return nil, err
    }
    return m, nil
}

// TableServiceServer is the server API for TableService service.
// All implementations must embed UnimplementedTableServiceServer
// for forward compatibility
type TableServiceServer interface {
    // Create new session. Implicit session creation is forbidden,
    // so user must create new session before execute any query,
    // otherwise BAD_SESSION status will be returned.
    // Simultaneous execution of requests are forbiden.
    // Sessions are volatile, can be invalidated by server, for example in case
    // of fatal errors. All requests with this session will fail with BAD_SESSION status.
    // So, client must be able to handle BAD_SESSION status.
    CreateSession(context.Context, *Ydb_Table.CreateSessionRequest) (*Ydb_Table.CreateSessionResponse, error)
    // Ends a session, releasing server resources associated with it.
    DeleteSession(context.Context, *Ydb_Table.DeleteSessionRequest) (*Ydb_Table.DeleteSessionResponse, error)
    // Idle sessions can be kept alive by calling KeepAlive periodically.
    KeepAlive(context.Context, *Ydb_Table.KeepAliveRequest) (*Ydb_Table.KeepAliveResponse, error)
    // Creates new table.
    CreateTable(context.Context, *Ydb_Table.CreateTableRequest) (*Ydb_Table.CreateTableResponse, error)
    // Drop table.
    DropTable(context.Context, *Ydb_Table.DropTableRequest) (*Ydb_Table.DropTableResponse, error)
    // Modifies schema of given table.
    AlterTable(context.Context, *Ydb_Table.AlterTableRequest) (*Ydb_Table.AlterTableResponse, error)
    // Creates copy of given table.
    CopyTable(context.Context, *Ydb_Table.CopyTableRequest) (*Ydb_Table.CopyTableResponse, error)
    // Creates consistent copy of given tables.
    CopyTables(context.Context, *Ydb_Table.CopyTablesRequest) (*Ydb_Table.CopyTablesResponse, error)
    // Creates consistent move of given tables.
    RenameTables(context.Context, *Ydb_Table.RenameTablesRequest) (*Ydb_Table.RenameTablesResponse, error)
    // Returns information about given table (metadata).
    DescribeTable(context.Context, *Ydb_Table.DescribeTableRequest) (*Ydb_Table.DescribeTableResponse, error)
    // Explains data query.
    // SessionId of previously created session must be provided.
    ExplainDataQuery(context.Context, *Ydb_Table.ExplainDataQueryRequest) (*Ydb_Table.ExplainDataQueryResponse, error)
    // Prepares data query, returns query id.
    // SessionId of previously created session must be provided.
    PrepareDataQuery(context.Context, *Ydb_Table.PrepareDataQueryRequest) (*Ydb_Table.PrepareDataQueryResponse, error)
    // Executes data query.
    // SessionId of previously created session must be provided.
    ExecuteDataQuery(context.Context, *Ydb_Table.ExecuteDataQueryRequest) (*Ydb_Table.ExecuteDataQueryResponse, error)
    // Executes scheme query.
    // SessionId of previously created session must be provided.
    ExecuteSchemeQuery(context.Context, *Ydb_Table.ExecuteSchemeQueryRequest) (*Ydb_Table.ExecuteSchemeQueryResponse, error)
    // Begins new transaction.
    BeginTransaction(context.Context, *Ydb_Table.BeginTransactionRequest) (*Ydb_Table.BeginTransactionResponse, error)
    // Commits specified active transaction.
    CommitTransaction(context.Context, *Ydb_Table.CommitTransactionRequest) (*Ydb_Table.CommitTransactionResponse, error)
    // Performs a rollback of the specified active transaction.
    RollbackTransaction(context.Context, *Ydb_Table.RollbackTransactionRequest) (*Ydb_Table.RollbackTransactionResponse, error)
    // Describe supported table options.
    DescribeTableOptions(context.Context, *Ydb_Table.DescribeTableOptionsRequest) (*Ydb_Table.DescribeTableOptionsResponse, error)
    // Streaming read table
    StreamReadTable(*Ydb_Table.ReadTableRequest, TableService_StreamReadTableServer) error
    // Reads specified keys non-transactionally from a single table
    ReadRows(context.Context, *Ydb_Table.ReadRowsRequest) (*Ydb_Table.ReadRowsResponse, error)
    // Upserts a batch of rows non-transactionally.
    // Returns success only when all rows were successfully upserted. In case of an error some rows might
    // be upserted and some might not.
    BulkUpsert(context.Context, *Ydb_Table.BulkUpsertRequest) (*Ydb_Table.BulkUpsertResponse, error)
    // Executes scan query with streaming result.
    StreamExecuteScanQuery(*Ydb_Table.ExecuteScanQueryRequest, TableService_StreamExecuteScanQueryServer) error
    mustEmbedUnimplementedTableServiceServer()
}

// UnimplementedTableServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTableServiceServer struct {
}

func (UnimplementedTableServiceServer) CreateSession(context.Context, *Ydb_Table.CreateSessionRequest) (*Ydb_Table.CreateSessionResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedTableServiceServer) DeleteSession(context.Context, *Ydb_Table.DeleteSessionRequest) (*Ydb_Table.DeleteSessionResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedTableServiceServer) KeepAlive(context.Context, *Ydb_Table.KeepAliveRequest) (*Ydb_Table.KeepAliveResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}
func (UnimplementedTableServiceServer) CreateTable(context.Context, *Ydb_Table.CreateTableRequest) (*Ydb_Table.CreateTableResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedTableServiceServer) DropTable(context.Context, *Ydb_Table.DropTableRequest) (*Ydb_Table.DropTableResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method DropTable not implemented")
}
func (UnimplementedTableServiceServer) AlterTable(context.Context, *Ydb_Table.AlterTableRequest) (*Ydb_Table.AlterTableResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method AlterTable not implemented")
}
func (UnimplementedTableServiceServer) CopyTable(context.Context, *Ydb_Table.CopyTableRequest) (*Ydb_Table.CopyTableResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method CopyTable not implemented")
}
func (UnimplementedTableServiceServer) CopyTables(context.Context, *Ydb_Table.CopyTablesRequest) (*Ydb_Table.CopyTablesResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method CopyTables not implemented")
}
func (UnimplementedTableServiceServer) RenameTables(context.Context, *Ydb_Table.RenameTablesRequest) (*Ydb_Table.RenameTablesResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method RenameTables not implemented")
}
func (UnimplementedTableServiceServer) DescribeTable(context.Context, *Ydb_Table.DescribeTableRequest) (*Ydb_Table.DescribeTableResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method DescribeTable not implemented")
}
func (UnimplementedTableServiceServer) ExplainDataQuery(context.Context, *Ydb_Table.ExplainDataQueryRequest) (*Ydb_Table.ExplainDataQueryResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method ExplainDataQuery not implemented")
}
func (UnimplementedTableServiceServer) PrepareDataQuery(context.Context, *Ydb_Table.PrepareDataQueryRequest) (*Ydb_Table.PrepareDataQueryResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method PrepareDataQuery not implemented")
}
func (UnimplementedTableServiceServer) ExecuteDataQuery(context.Context, *Ydb_Table.ExecuteDataQueryRequest) (*Ydb_Table.ExecuteDataQueryResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method ExecuteDataQuery not implemented")
}
func (UnimplementedTableServiceServer) ExecuteSchemeQuery(context.Context, *Ydb_Table.ExecuteSchemeQueryRequest) (*Ydb_Table.ExecuteSchemeQueryResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method ExecuteSchemeQuery not implemented")
}
func (UnimplementedTableServiceServer) BeginTransaction(context.Context, *Ydb_Table.BeginTransactionRequest) (*Ydb_Table.BeginTransactionResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method BeginTransaction not implemented")
}
func (UnimplementedTableServiceServer) CommitTransaction(context.Context, *Ydb_Table.CommitTransactionRequest) (*Ydb_Table.CommitTransactionResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method CommitTransaction not implemented")
}
func (UnimplementedTableServiceServer) RollbackTransaction(context.Context, *Ydb_Table.RollbackTransactionRequest) (*Ydb_Table.RollbackTransactionResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method RollbackTransaction not implemented")
}
func (UnimplementedTableServiceServer) DescribeTableOptions(context.Context, *Ydb_Table.DescribeTableOptionsRequest) (*Ydb_Table.DescribeTableOptionsResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method DescribeTableOptions not implemented")
}
func (UnimplementedTableServiceServer) StreamReadTable(*Ydb_Table.ReadTableRequest, TableService_StreamReadTableServer) error {
    return status.Errorf(codes.Unimplemented, "method StreamReadTable not implemented")
}
func (UnimplementedTableServiceServer) ReadRows(context.Context, *Ydb_Table.ReadRowsRequest) (*Ydb_Table.ReadRowsResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method ReadRows not implemented")
}
func (UnimplementedTableServiceServer) BulkUpsert(context.Context, *Ydb_Table.BulkUpsertRequest) (*Ydb_Table.BulkUpsertResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method BulkUpsert not implemented")
}
func (UnimplementedTableServiceServer) StreamExecuteScanQuery(*Ydb_Table.ExecuteScanQueryRequest, TableService_StreamExecuteScanQueryServer) error {
    return status.Errorf(codes.Unimplemented, "method StreamExecuteScanQuery not implemented")
}
func (UnimplementedTableServiceServer) mustEmbedUnimplementedTableServiceServer() {}

// UnsafeTableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TableServiceServer will
// result in compilation errors.
type UnsafeTableServiceServer interface {
    mustEmbedUnimplementedTableServiceServer()
}

func RegisterTableServiceServer(s grpc.ServiceRegistrar, srv TableServiceServer) {
    s.RegisterService(&TableService_ServiceDesc, srv)
}

func _TableService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(Ydb_Table.CreateSessionRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(TableServiceServer).CreateSession(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: TableService_CreateSession_FullMethodName,
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(TableServiceServer).CreateSession(ctx, req.(*Ydb_Table.CreateSessionRequest))
    }
    return interceptor(ctx, in, info, handler)
}

func _TableService_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(Ydb_Table.DeleteSessionRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(TableServiceServer).DeleteSession(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: TableService_DeleteSession_FullMethodName,
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(TableServiceServer).DeleteSession(ctx, req.(*Ydb_Table.DeleteSessionRequest))
    }
    return interceptor(ctx, in, info, handler)
}

func _TableService_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(Ydb_Table.KeepAliveRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(TableServiceServer).KeepAlive(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: TableService_KeepAlive_FullMethodName,
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(TableServiceServer).KeepAlive(ctx, req.(*Ydb_Table.KeepAliveRequest))
    }
    return interceptor(ctx, in, info, handler)
}

func _TableService_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(Ydb_Table.CreateTableRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(TableServiceServer).CreateTable(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: TableService_CreateTable_FullMethodName,
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(TableServiceServer).CreateTable(ctx, req.(*Ydb_Table.CreateTableRequest))
    }
    return interceptor(ctx, in, info, handler)
}

func _TableService_DropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(Ydb_Table.DropTableRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(TableServiceServer).DropTable(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: TableService_DropTable_FullMethodName,
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(TableServiceServer).DropTable(ctx, req.(*Ydb_Table.DropTableRequest))
    }
    return interceptor(ctx, in, info, handler)
}

func _TableService_AlterTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(Ydb_Table.AlterTableRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(TableServiceServer).AlterTable(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: TableService_AlterTable_FullMethodName,
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(TableServiceServer).AlterTable(ctx, req.(*Ydb_Table.AlterTableRequest))
    }
    return interceptor(ctx, in, info, handler)
}

func _TableService_CopyTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(Ydb_Table.CopyTableRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(TableServiceServer).CopyTable(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: TableService_CopyTable_FullMethodName,
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(TableServiceServer).CopyTable(ctx, req.(*Ydb_Table.CopyTableRequest))
    }
    return interceptor(ctx, in, info, handler)
}

func _TableService_CopyTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(Ydb_Table.CopyTablesRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(TableServiceServer).CopyTables(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: TableService_CopyTables_FullMethodName,
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(TableServiceServer).CopyTables(ctx, req.(*Ydb_Table.CopyTablesRequest))
    }
    return interceptor(ctx, in, info, handler)
}

func _TableService_RenameTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(Ydb_Table.RenameTablesRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(TableServiceServer).RenameTables(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: TableService_RenameTables_FullMethodName,
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(TableServiceServer).RenameTables(ctx, req.(*Ydb_Table.RenameTablesRequest))
    }
    return interceptor(ctx, in, info, handler)
}

func _TableService_DescribeTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(Ydb_Table.DescribeTableRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(TableServiceServer).DescribeTable(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: TableService_DescribeTable_FullMethodName,
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(TableServiceServer).DescribeTable(ctx, req.(*Ydb_Table.DescribeTableRequest))
    }
    return interceptor(ctx, in, info, handler)
}

func _TableService_ExplainDataQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(Ydb_Table.ExplainDataQueryRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(TableServiceServer).ExplainDataQuery(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: TableService_ExplainDataQuery_FullMethodName,
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(TableServiceServer).ExplainDataQuery(ctx, req.(*Ydb_Table.ExplainDataQueryRequest))
    }
    return interceptor(ctx, in, info, handler)
}

func _TableService_PrepareDataQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(Ydb_Table.PrepareDataQueryRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(TableServiceServer).PrepareDataQuery(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: TableService_PrepareDataQuery_FullMethodName,
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(TableServiceServer).PrepareDataQuery(ctx, req.(*Ydb_Table.PrepareDataQueryRequest))
    }
    return interceptor(ctx, in, info, handler)
}

func _TableService_ExecuteDataQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(Ydb_Table.ExecuteDataQueryRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(TableServiceServer).ExecuteDataQuery(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: TableService_ExecuteDataQuery_FullMethodName,
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(TableServiceServer).ExecuteDataQuery(ctx, req.(*Ydb_Table.ExecuteDataQueryRequest))
    }
    return interceptor(ctx, in, info, handler)
}

func _TableService_ExecuteSchemeQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(Ydb_Table.ExecuteSchemeQueryRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(TableServiceServer).ExecuteSchemeQuery(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: TableService_ExecuteSchemeQuery_FullMethodName,
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(TableServiceServer).ExecuteSchemeQuery(ctx, req.(*Ydb_Table.ExecuteSchemeQueryRequest))
    }
    return interceptor(ctx, in, info, handler)
}

func _TableService_BeginTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(Ydb_Table.BeginTransactionRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(TableServiceServer).BeginTransaction(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: TableService_BeginTransaction_FullMethodName,
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(TableServiceServer).BeginTransaction(ctx, req.(*Ydb_Table.BeginTransactionRequest))
    }
    return interceptor(ctx, in, info, handler)
}

func _TableService_CommitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(Ydb_Table.CommitTransactionRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(TableServiceServer).CommitTransaction(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: TableService_CommitTransaction_FullMethodName,
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(TableServiceServer).CommitTransaction(ctx, req.(*Ydb_Table.CommitTransactionRequest))
    }
    return interceptor(ctx, in, info, handler)
}

func _TableService_RollbackTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(Ydb_Table.RollbackTransactionRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(TableServiceServer).RollbackTransaction(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: TableService_RollbackTransaction_FullMethodName,
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(TableServiceServer).RollbackTransaction(ctx, req.(*Ydb_Table.RollbackTransactionRequest))
    }
    return interceptor(ctx, in, info, handler)
}

func _TableService_DescribeTableOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(Ydb_Table.DescribeTableOptionsRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(TableServiceServer).DescribeTableOptions(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: TableService_DescribeTableOptions_FullMethodName,
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(TableServiceServer).DescribeTableOptions(ctx, req.(*Ydb_Table.DescribeTableOptionsRequest))
    }
    return interceptor(ctx, in, info, handler)
}

func _TableService_StreamReadTable_Handler(srv interface{}, stream grpc.ServerStream) error {
    m := new(Ydb_Table.ReadTableRequest)
    if err := stream.RecvMsg(m); err != nil {
        return err
    }
    return srv.(TableServiceServer).StreamReadTable(m, &tableServiceStreamReadTableServer{stream})
}

type TableService_StreamReadTableServer interface {
    Send(*Ydb_Table.ReadTableResponse) error
    grpc.ServerStream
}

type tableServiceStreamReadTableServer struct {
    grpc.ServerStream
}

func (x *tableServiceStreamReadTableServer) Send(m *Ydb_Table.ReadTableResponse) error {
    return x.ServerStream.SendMsg(m)
}

func _TableService_ReadRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(Ydb_Table.ReadRowsRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(TableServiceServer).ReadRows(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: TableService_ReadRows_FullMethodName,
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(TableServiceServer).ReadRows(ctx, req.(*Ydb_Table.ReadRowsRequest))
    }
    return interceptor(ctx, in, info, handler)
}

func _TableService_BulkUpsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(Ydb_Table.BulkUpsertRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(TableServiceServer).BulkUpsert(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: TableService_BulkUpsert_FullMethodName,
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(TableServiceServer).BulkUpsert(ctx, req.(*Ydb_Table.BulkUpsertRequest))
    }
    return interceptor(ctx, in, info, handler)
}

func _TableService_StreamExecuteScanQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
    m := new(Ydb_Table.ExecuteScanQueryRequest)
    if err := stream.RecvMsg(m); err != nil {
        return err
    }
    return srv.(TableServiceServer).StreamExecuteScanQuery(m, &tableServiceStreamExecuteScanQueryServer{stream})
}

type TableService_StreamExecuteScanQueryServer interface {
    Send(*Ydb_Table.ExecuteScanQueryPartialResponse) error
    grpc.ServerStream
}

type tableServiceStreamExecuteScanQueryServer struct {
    grpc.ServerStream
}

func (x *tableServiceStreamExecuteScanQueryServer) Send(m *Ydb_Table.ExecuteScanQueryPartialResponse) error {
    return x.ServerStream.SendMsg(m)
}

// TableService_ServiceDesc is the grpc.ServiceDesc for TableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TableService_ServiceDesc = grpc.ServiceDesc{
    ServiceName: "Ydb.Table.V1.TableService",
    HandlerType: (*TableServiceServer)(nil),
    Methods: []grpc.MethodDesc{
        {
            MethodName: "CreateSession",
            Handler:    _TableService_CreateSession_Handler,
        },
        {
            MethodName: "DeleteSession",
            Handler:    _TableService_DeleteSession_Handler,
        },
        {
            MethodName: "KeepAlive",
            Handler:    _TableService_KeepAlive_Handler,
        },
        {
            MethodName: "CreateTable",
            Handler:    _TableService_CreateTable_Handler,
        },
        {
            MethodName: "DropTable",
            Handler:    _TableService_DropTable_Handler,
        },
        {
            MethodName: "AlterTable",
            Handler:    _TableService_AlterTable_Handler,
        },
        {
            MethodName: "CopyTable",
            Handler:    _TableService_CopyTable_Handler,
        },
        {
            MethodName: "CopyTables",
            Handler:    _TableService_CopyTables_Handler,
        },
        {
            MethodName: "RenameTables",
            Handler:    _TableService_RenameTables_Handler,
        },
        {
            MethodName: "DescribeTable",
            Handler:    _TableService_DescribeTable_Handler,
        },
        {
            MethodName: "ExplainDataQuery",
            Handler:    _TableService_ExplainDataQuery_Handler,
        },
        {
            MethodName: "PrepareDataQuery",
            Handler:    _TableService_PrepareDataQuery_Handler,
        },
        {
            MethodName: "ExecuteDataQuery",
            Handler:    _TableService_ExecuteDataQuery_Handler,
        },
        {
            MethodName: "ExecuteSchemeQuery",
            Handler:    _TableService_ExecuteSchemeQuery_Handler,
        },
        {
            MethodName: "BeginTransaction",
            Handler:    _TableService_BeginTransaction_Handler,
        },
        {
            MethodName: "CommitTransaction",
            Handler:    _TableService_CommitTransaction_Handler,
        },
        {
            MethodName: "RollbackTransaction",
            Handler:    _TableService_RollbackTransaction_Handler,
        },
        {
            MethodName: "DescribeTableOptions",
            Handler:    _TableService_DescribeTableOptions_Handler,
        },
        {
            MethodName: "ReadRows",
            Handler:    _TableService_ReadRows_Handler,
        },
        {
            MethodName: "BulkUpsert",
            Handler:    _TableService_BulkUpsert_Handler,
        },
    },
    Streams: []grpc.StreamDesc{
        {
            StreamName:    "StreamReadTable",
            Handler:       _TableService_StreamReadTable_Handler,
            ServerStreams: true,
        },
        {
            StreamName:    "StreamExecuteScanQuery",
            Handler:       _TableService_StreamExecuteScanQuery_Handler,
            ServerStreams: true,
        },
    },
    Metadata: "ydb_table_v1.proto",
}
