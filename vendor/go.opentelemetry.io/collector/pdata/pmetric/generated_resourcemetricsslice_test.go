// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pmetric

import (
    "testing"
    "unsafe"

    "github.com/stretchr/testify/assert"

    otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
)

func TestResourceMetricsSlice(t *testing.T) {
    es := NewResourceMetricsSlice()
    assert.Equal(t, 0, es.Len())
    es = newResourceMetricsSlice(&[]*otlpmetrics.ResourceMetrics{})
    assert.Equal(t, 0, es.Len())

    emptyVal := NewResourceMetrics()
    testVal := generateTestResourceMetrics()
    for i := 0; i < 7; i++ {
        el := es.AppendEmpty()
        assert.Equal(t, emptyVal, es.At(i))
        fillTestResourceMetrics(el)
        assert.Equal(t, testVal, es.At(i))
    }
    assert.Equal(t, 7, es.Len())
}

func TestResourceMetricsSlice_CopyTo(t *testing.T) {
    dest := NewResourceMetricsSlice()
    // Test CopyTo to empty
    NewResourceMetricsSlice().CopyTo(dest)
    assert.Equal(t, NewResourceMetricsSlice(), dest)

    // Test CopyTo larger slice
    generateTestResourceMetricsSlice().CopyTo(dest)
    assert.Equal(t, generateTestResourceMetricsSlice(), dest)

    // Test CopyTo same size slice
    generateTestResourceMetricsSlice().CopyTo(dest)
    assert.Equal(t, generateTestResourceMetricsSlice(), dest)
}

func TestResourceMetricsSlice_EnsureCapacity(t *testing.T) {
    es := generateTestResourceMetricsSlice()

    // Test ensure smaller capacity.
    const ensureSmallLen = 4
    es.EnsureCapacity(ensureSmallLen)
    assert.Less(t, ensureSmallLen, es.Len())
    assert.Equal(t, es.Len(), cap(*es.orig))
    assert.Equal(t, generateTestResourceMetricsSlice(), es)

    // Test ensure larger capacity
    const ensureLargeLen = 9
    es.EnsureCapacity(ensureLargeLen)
    assert.Less(t, generateTestResourceMetricsSlice().Len(), ensureLargeLen)
    assert.Equal(t, ensureLargeLen, cap(*es.orig))
    assert.Equal(t, generateTestResourceMetricsSlice(), es)
}

func TestResourceMetricsSlice_MoveAndAppendTo(t *testing.T) {
    // Test MoveAndAppendTo to empty
    expectedSlice := generateTestResourceMetricsSlice()
    dest := NewResourceMetricsSlice()
    src := generateTestResourceMetricsSlice()
    src.MoveAndAppendTo(dest)
    assert.Equal(t, generateTestResourceMetricsSlice(), dest)
    assert.Equal(t, 0, src.Len())
    assert.Equal(t, expectedSlice.Len(), dest.Len())

    // Test MoveAndAppendTo empty slice
    src.MoveAndAppendTo(dest)
    assert.Equal(t, generateTestResourceMetricsSlice(), dest)
    assert.Equal(t, 0, src.Len())
    assert.Equal(t, expectedSlice.Len(), dest.Len())

    // Test MoveAndAppendTo not empty slice
    generateTestResourceMetricsSlice().MoveAndAppendTo(dest)
    assert.Equal(t, 2*expectedSlice.Len(), dest.Len())
    for i := 0; i < expectedSlice.Len(); i++ {
        assert.Equal(t, expectedSlice.At(i), dest.At(i))
        assert.Equal(t, expectedSlice.At(i), dest.At(i+expectedSlice.Len()))
    }
}

func TestResourceMetricsSlice_RemoveIf(t *testing.T) {
    // Test RemoveIf on empty slice
    emptySlice := NewResourceMetricsSlice()
    emptySlice.RemoveIf(func(el ResourceMetrics) bool {
        t.Fail()
        return false
    })

    // Test RemoveIf
    filtered := generateTestResourceMetricsSlice()
    pos := 0
    filtered.RemoveIf(func(el ResourceMetrics) bool {
        pos++
        return pos%3 == 0
    })
    assert.Equal(t, 5, filtered.Len())
}

func TestResourceMetricsSlice_Sort(t *testing.T) {
    es := generateTestResourceMetricsSlice()
    es.Sort(func(a, b ResourceMetrics) bool {
        return uintptr(unsafe.Pointer(a.orig)) < uintptr(unsafe.Pointer(b.orig))
    })
    for i := 1; i < es.Len(); i++ {
        assert.True(t, uintptr(unsafe.Pointer(es.At(i-1).orig)) < uintptr(unsafe.Pointer(es.At(i).orig)))
    }
    es.Sort(func(a, b ResourceMetrics) bool {
        return uintptr(unsafe.Pointer(a.orig)) > uintptr(unsafe.Pointer(b.orig))
    })
    for i := 1; i < es.Len(); i++ {
        assert.True(t, uintptr(unsafe.Pointer(es.At(i-1).orig)) > uintptr(unsafe.Pointer(es.At(i).orig)))
    }
}

func generateTestResourceMetricsSlice() ResourceMetricsSlice {
    es := NewResourceMetricsSlice()
    fillTestResourceMetricsSlice(es)
    return es
}

func fillTestResourceMetricsSlice(es ResourceMetricsSlice) {
    *es.orig = make([]*otlpmetrics.ResourceMetrics, 7)
    for i := 0; i < 7; i++ {
        (*es.orig)[i] = &otlpmetrics.ResourceMetrics{}
        fillTestResourceMetrics(newResourceMetrics((*es.orig)[i]))
    }
}
