{
    "Version": "v0.85.0",
    "GoVersion": "1.20",
    "Sum": "h1:ecDJicAq1mbQcsEkzo1q+6Y2DP8plK51y4p4w7ZhNmA=",
    "Packages": {
        "go.opentelemetry.io/collector/receiver": {
            "Imports": [
                "context",
                "fmt",
                "go.opentelemetry.io/collector/component",
                "go.opentelemetry.io/collector/consumer",
                "go.uber.org/zap"
            ],
            "TestImports": [
                "context",
                "github.com/stretchr/testify/assert",
                "github.com/stretchr/testify/require",
                "go.opentelemetry.io/collector/component",
                "go.opentelemetry.io/collector/component/componenttest",
                "go.opentelemetry.io/collector/consumer",
                "go.opentelemetry.io/collector/consumer/consumertest",
                "testing"
            ]
        },
        "go.opentelemetry.io/collector/receiver/receivertest": {
            "Imports": [
                "context",
                "errors",
                "fmt",
                "github.com/stretchr/testify/assert",
                "github.com/stretchr/testify/require",
                "go.opentelemetry.io/collector/component",
                "go.opentelemetry.io/collector/component/componenttest",
                "go.opentelemetry.io/collector/consumer",
                "go.opentelemetry.io/collector/consumer/consumererror",
                "go.opentelemetry.io/collector/pdata/pcommon",
                "go.opentelemetry.io/collector/pdata/plog",
                "go.opentelemetry.io/collector/pdata/ptrace",
                "go.opentelemetry.io/collector/receiver",
                "math/rand",
                "sync",
                "sync/atomic",
                "testing",
                "time"
            ],
            "TestImports": [
                "context",
                "github.com/stretchr/testify/assert",
                "github.com/stretchr/testify/require",
                "go.opentelemetry.io/collector/component",
                "go.opentelemetry.io/collector/component/componenttest",
                "go.opentelemetry.io/collector/consumer",
                "go.opentelemetry.io/collector/consumer/consumererror",
                "go.opentelemetry.io/collector/consumer/consumertest",
                "go.opentelemetry.io/collector/pdata/plog",
                "go.opentelemetry.io/collector/receiver",
                "strconv",
                "sync/atomic",
                "testing"
            ]
        },
        "go.opentelemetry.io/collector/receiver/scrapererror": {
            "Imports": [
                "errors",
                "go.uber.org/multierr"
            ],
            "TestImports": [
                "errors",
                "fmt",
                "github.com/stretchr/testify/assert",
                "github.com/stretchr/testify/require",
                "testing"
            ]
        },
        "go.opentelemetry.io/collector/receiver/scraperhelper": {
            "Imports": [
                "context",
                "errors",
                "fmt",
                "go.opentelemetry.io/collector/component",
                "go.opentelemetry.io/collector/consumer",
                "go.opentelemetry.io/collector/obsreport",
                "go.opentelemetry.io/collector/pdata/pmetric",
                "go.opentelemetry.io/collector/receiver",
                "go.opentelemetry.io/collector/receiver/scrapererror",
                "go.uber.org/multierr",
                "go.uber.org/zap",
                "time"
            ],
            "TestImports": [
                "context",
                "errors",
                "github.com/stretchr/testify/assert",
                "github.com/stretchr/testify/require",
                "go.opentelemetry.io/collector/component",
                "go.opentelemetry.io/collector/component/componenttest",
                "go.opentelemetry.io/collector/consumer",
                "go.opentelemetry.io/collector/consumer/consumertest",
                "go.opentelemetry.io/collector/obsreport/obsreporttest",
                "go.opentelemetry.io/collector/pdata/pmetric",
                "go.opentelemetry.io/collector/receiver/receivertest",
                "go.opentelemetry.io/collector/receiver/scrapererror",
                "go.opentelemetry.io/otel/codes",
                "go.opentelemetry.io/otel/sdk/trace",
                "go.uber.org/multierr",
                "testing",
                "time"
            ]
        }
    }
}